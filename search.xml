<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AI应用分享</title>
      <link href="/2023/09/21/AI%E5%BA%94%E7%94%A8%E5%88%86%E4%BA%AB/"/>
      <url>/2023/09/21/AI%E5%BA%94%E7%94%A8%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="AI应用分享"><a href="#AI应用分享" class="headerlink" title="AI应用分享"></a>AI应用分享</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><strong>本文件用于23年9月22日和物联网的小伙伴分享AI的应用，所用代码已开源</strong>：</p><ol><li>个人博客：<a href="http://www.lizhiyang.xyz/">www.lizhiyang.xyz</a></li><li>CSDN博客：爱睡觉的咋 <a href="https://blog.csdn.net/weixin_63866037?spm=1000.2115.3001.5343">https://blog.csdn.net/weixin_63866037?spm=1000.2115.3001.5343</a></li><li>Opencv+PyQT+串口通信：<a href="https://pan.baidu.com/s/1Kz7HesfcM-LfQCJdFOeTVA?pwd=k6z7">https://pan.baidu.com/s/1Kz7HesfcM-LfQCJdFOeTVA?pwd=k6z7</a> 提取码：k6z7 </li><li>Yolov5教程：</li></ol><ul><li>Yolov5：强大到你难以想象──新冠疫情下的口罩检测:<a href="http://t.csdn.cn/Iutzk">http://t.csdn.cn/Iutzk</a></li><li>一文详解Yolov5——基于Yolov5的火灾检测系统:<a href="http://t.csdn.cn/3N2Rx">http://t.csdn.cn/3N2Rx</a></li><li>Yolov5+图像分割+百度AI接口——车牌实时检测识别系统:<a href="http://t.csdn.cn/PVoeD">http://t.csdn.cn/PVoeD</a> </li><li>Yolov5移植树莓派实现目标检测:<a href="http://t.csdn.cn/rPyZc">http://t.csdn.cn/rPyZc</a></li><li>Yolov5移植树莓派4B问题总结:<a href="http://t.csdn.cn/NfxWF">http://t.csdn.cn/NfxWF</a></li></ul><ol start="5"><li>Opencv教程：<a href="https://www.yuque.com/aishuijuedeza/opencv/">https://www.yuque.com/aishuijuedeza/opencv/</a></li></ol><p><img src="https://pic-bed-ar2.pages.dev/img/%E5%B9%BB%E7%81%AF%E7%89%871.JPG" alt="在这里插入图片描述"><br><img src="https://pic-bed-ar2.pages.dev/img/%E5%B9%BB%E7%81%AF%E7%89%872.JPG" alt="在这里插入图片描述"><br><img src="https://pic-bed-ar2.pages.dev/img/%E5%B9%BB%E7%81%AF%E7%89%873.JPG" alt="在这里插入图片描述"><br><img src="https://pic-bed-ar2.pages.dev/img/%E5%B9%BB%E7%81%AF%E7%89%874.JPG" alt="在这里插入图片描述"><br><img src="https://pic-bed-ar2.pages.dev/img/%E5%B9%BB%E7%81%AF%E7%89%875.JPG" alt="在这里插入图片描述"><br><img src="https://pic-bed-ar2.pages.dev/img/%E5%B9%BB%E7%81%AF%E7%89%876.JPG" alt="在这里插入图片描述"><br><img src="https://pic-bed-ar2.pages.dev/img/%E5%B9%BB%E7%81%AF%E7%89%877.JPG" alt="在这里插入图片描述"></p><ul><li>作者为一名在校大三学生，<strong>人工智能专业</strong></li><li>学习方向：<strong>深度学习和计算机视觉</strong></li><li>百度飞桨PPDE，百度飞桨领航团成员，阿里云开发者社区博客专家，<strong>csdn人工智能领域新星创作者 万粉博主</strong></li></ul><ul><li><a href="https://github.com/lzypython">Github主页</a>：<a href="https://github.com/lzypython">https://github.com/lzypython</a></li><li><a href="https://www.lizhiyang.xyz/">个人博客主页</a>：<a href="https://www.lizhiyang.xyz/">https://www.lizhiyang.xyz/</a></li><li><a href="https://lizhiyang.blog.csdn.net/">CSDN主页</a>：<a href="https://lizhiyang.blog.csdn.net/">https://lizhiyang.blog.csdn.net/</a></li></ul><p><font size=5><strong>欢迎关注，交流学习！</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.顺序表</title>
      <link href="/2023/08/22/44-%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
      <url>/2023/08/22/44-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><p>在程序中，经常需要将一组（<strong>通常是同为某个类型的</strong>）数据元素作为整体管理和使用，需要创建这种元素组，用变量记录它们，传进传出函数等等。<strong>一组数据中包含的元素个数可能发生变化（可以增加或删除元素）</strong>。<br>对于这种需求，最简单的解决办法是将这样一组元素看成一个序列，用元素在序列里的位置和顺序，表示实际应用中的某种有意义的信息，或者表示数据之间的某种关系。<br>这样的一组序列元素的组织形式，我们可以将其抽象为线性表，<strong>一个线性表是某类元素的一个集合，还记录着元素之间的一种顺序关系</strong>。线性表是<strong>最基本的数据结构之一，在实际程序中应用非常广泛，它还经常被用作更复杂的数据结构的实现基础</strong>。<br>根据线性表的实际存储方式，分为两种实现模型：</p><ul><li>顺序表，将元素顺序地存放在一块连续的存储区里，元素间的顺序关系由它们的存储顺序自然表示。</li><li>链表，将元素存放在通过连接构造起来的一系列存储块中。</li></ul><p>Python里面中的list和tuple两种类型采用了顺序表的实现技术，<strong>元组是不可变类型，因此不支持改变其内部状态的任何操作</strong>，其他方面元组与列表的性质相似。<br>顺序表的操作</p><h1 id="顺序表的操作"><a href="#顺序表的操作" class="headerlink" title="顺序表的操作"></a>顺序表的操作</h1><p>增加</p><ul><li>在尾端加入元素，时间复杂度是O(1)</li><li>非保序的加入元素，时间复杂度是O(1) ,<em>有点像交换</em></li><li>保序的元素加入，时间复杂的为O(n)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25.Scharr算子</title>
      <link href="/2023/08/21/42-Scharr%E7%AE%97%E5%AD%90/"/>
      <url>/2023/08/21/42-Scharr%E7%AE%97%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>cv2.Scharr()<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673617259645-52d830b9-bcb5-4663-ac6f-49f9aa2af20c.png#averageHue=%23f5f7f6&clientId=u6eb8516f-f944-4&from=paste&height=483&id=u4c160788&originHeight=725&originWidth=966&originalType=binary&ratio=1&rotation=0&showTitle=false&size=272883&status=done&style=none&taskId=ubc5cf44b-c200-4938-b4e7-27b5514118c&title=&width=644" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：Scharr算子.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 21:41 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># scharr算子</span></span><br><span class="line"><span class="comment"># 计算x方向</span></span><br><span class="line">dx = cv2.Scharr(image,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 计算y方向</span></span><br><span class="line">dy = cv2.Scharr(image,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 将两个方向加在一起，add方法</span></span><br><span class="line">sobel_img = cv2.add(dx,dy)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;sobel_img&quot;</span>,np.hstack((image,sobel_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673617413302-f0bd6777-25af-4faf-8612-d56814102a17.png#averageHue=%236e6758&clientId=u6eb8516f-f944-4&from=paste&height=512&id=ue307204c&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1395494&status=done&style=none&taskId=u1127a9d7-a62f-4662-b044-b396fd6de7f&title=&width=1282" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24.sobel算子</title>
      <link href="/2023/08/21/41-sobel%E7%AE%97%E5%AD%90/"/>
      <url>/2023/08/21/41-sobel%E7%AE%97%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><strong>边缘是像素值发生跃迁的位置，是图像的显著特征之一，在图像特征提取，对象检测，模式识别等方面都有重要的作用。</strong><br><strong>sobel算子对图像求一阶导数。一阶导数越大，说明像素在该方向的变化越大，边缘信号越强。</strong><br><strong>因为图像的灰度值都是离散的数字, sobel算子采用离散差分算子计算图像像素点亮度值的近似梯度.</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673616494785-55021d67-308c-4c35-ba7e-117769d09619.png#averageHue=%23fcfbfb&clientId=u5b5565d8-ca5b-4&from=paste&height=319&id=u98133cf5&originHeight=479&originWidth=671&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63120&status=done&style=none&taskId=u5a1b5277-190d-4e59-83ae-37403ac9079&title=&width=447.3333333333333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673616553176-8e04d99f-07b5-4fed-a813-fab80c186575.png#averageHue=%23f7f9f8&clientId=u5b5565d8-ca5b-4&from=paste&height=118&id=ueaceca77&originHeight=177&originWidth=746&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60798&status=done&style=none&taskId=u55fc1806-a3cd-4b61-bfb4-53d4946e6dd&title=&width=497.3333333333333" alt="image.png"><br>soble x轴和y轴要分别计算,计算完用add添加在一起<br>cv2.soble(image,desize,dx,dy)<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673617034854-bfc4b992-485e-4bed-ad80-84e1691ba1e5.png#averageHue=%23e2e4e5&clientId=u5b5565d8-ca5b-4&from=paste&height=38&id=uda95801e&originHeight=57&originWidth=478&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23830&status=done&style=none&taskId=u13d7f317-b499-4d2f-98de-5b1f4207a6e&title=&width=318.6666666666667" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：sobel算子.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 20:54 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># sobel算子</span></span><br><span class="line"><span class="comment"># 计算x方向</span></span><br><span class="line">dx = cv2.Sobel(image,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,ksize = <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 计算y方向</span></span><br><span class="line">dy = cv2.Sobel(image,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,ksize = <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 将两个方向加在一起，add方法</span></span><br><span class="line">sobel_img = cv2.add(dx,dy)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;sobel_img&quot;</span>,np.hstack((image,sobel_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673617185370-394877a5-9069-499d-88f0-b1c94febed99.png#averageHue=%23736d5a&clientId=u5b5565d8-ca5b-4&from=paste&height=512&id=u46b796db&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1626200&status=done&style=none&taskId=u27f5222e-d2c6-4d38-a523-69e22a67e12&title=&width=1282" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23.双边滤波</title>
      <link href="/2023/08/21/40-%E5%8F%8C%E8%BE%B9%E6%BB%A4%E6%B3%A2/"/>
      <url>/2023/08/21/40-%E5%8F%8C%E8%BE%B9%E6%BB%A4%E6%B3%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>双边滤波可以保留边缘,同时可以对边缘内的区域进行平滑处理.<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673613906051-427a32c9-d110-4e10-aea3-a93de9a6c003.png#averageHue=%23d5cec3&clientId=u9f689851-df0c-4&from=paste&height=325&id=ubd893c3d&originHeight=488&originWidth=1080&originalType=binary&ratio=1&rotation=0&showTitle=false&size=252774&status=done&style=none&taskId=u40e297d5-8573-4c70-a1a0-4406069a427&title=&width=720" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673613933496-30c17645-6069-4816-83a1-3d571f6c861f.png#averageHue=%23517043&clientId=u9f689851-df0c-4&from=paste&height=387&id=ue74c1fa6&originHeight=581&originWidth=1034&originalType=binary&ratio=1&rotation=0&showTitle=false&size=413100&status=done&style=none&taskId=u03cdf73b-bd88-4c3b-bec7-1eb7bfc8c6d&title=&width=689.3333333333334" alt="image.png"><br>cv2.bilateralFilter(src,d,sigmaColor,sigmaSpace[,dst[,boederType]])<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673614017868-c326a508-7c9f-4069-80d7-eb2279b83c4f.png#averageHue=%23f4f6f5&clientId=u9f689851-df0c-4&from=paste&height=61&id=u85828550&originHeight=92&originWidth=470&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29172&status=done&style=none&taskId=u7d7d79ee-8f39-492c-93dc-73020e10cbf&title=&width=313.3333333333333" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：双边滤波.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 20:36 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 双边滤波</span></span><br><span class="line">bilateral = cv2.bilateralFilter(image,<span class="number">7</span>,<span class="number">20</span>,<span class="number">50</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;bilateral&quot;</span>,np.hstack((image,bilateral)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673614398810-6f7548f4-183e-4be6-a4e9-c811e17e9791.png#averageHue=%237b7467&clientId=u9f689851-df0c-4&from=paste&height=512&id=u60275603&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=753933&status=done&style=none&taskId=u509a77cf-e46f-4dcb-b1b4-9d31c37f49b&title=&width=1282" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22.中值滤波</title>
      <link href="/2023/08/21/39-%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2/"/>
      <url>/2023/08/21/39-%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>中值滤波原理非常简单,，假设有一个数组[1556789],取其中的中间值(即中位数)作为卷积后的结果值即可.中值滤波对胡椒噪音(也叫椒盐噪音)效果明显.<br>cv2.medianBlur(img,ksize)</p><ul><li>注意ksize是一个数字</li><li>适合均匀的噪声，如椒盐噪声</li><li><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673613509374-0a6186c8-ed6e-4c91-a539-3781080fffa1.png#averageHue=%23d65b53&clientId=ub9440669-5ced-4&from=paste&height=492&id=u5d1eecc6&originHeight=738&originWidth=1441&originalType=binary&ratio=1&rotation=0&showTitle=false&size=632848&status=done&style=none&taskId=ufbb3a6be-40f5-4f5c-8df4-0aef6aa3cac&title=&width=960.6666666666666" alt="image.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：中值滤波.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 20:33 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 中值滤波</span></span><br><span class="line">medianBulr = cv2.medianBlur(image,<span class="number">5</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;medianBulr&quot;</span>,np.hstack((image,medianBulr)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673613321171-62bbd722-df46-4dce-a37f-b75656bc382c.png#averageHue=%237b7467&clientId=ue0bef82e-b4e7-4&from=paste&height=512&id=ud838847e&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=744505&status=done&style=none&taskId=u84fbb8a2-d6dc-4bba-96f9-2319c5577b8&title=&width=1282" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21.高斯滤波</title>
      <link href="/2023/08/21/38-%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2/"/>
      <url>/2023/08/21/38-%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><strong>高斯函数是符合高斯分布（也叫正态分布）的数据的概率密度函数</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673611341227-d8d6c4c6-a49a-466b-b335-897f7a1111a9.png#averageHue=%23f2f0ef&clientId=u8bfe6127-0132-4&from=paste&height=405&id=ued794a8f&originHeight=607&originWidth=994&originalType=binary&ratio=1&rotation=0&showTitle=false&size=224490&status=done&style=none&taskId=u18abbd8b-486b-40bb-9d8f-dbd40ba3053&title=&width=662.6666666666666" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673611781048-20890494-223f-4508-90bd-b58343aa17f9.png#averageHue=%23f4f6f5&clientId=u8bfe6127-0132-4&from=paste&height=297&id=ubb6a5a36&originHeight=445&originWidth=1040&originalType=binary&ratio=1&rotation=0&showTitle=false&size=188965&status=done&style=none&taskId=u71a20e60-de87-4aa0-949c-c32a8bbb6e3&title=&width=693.3333333333334" alt="image.png"></p><p>给定sigma将坐标代入下面的公式即可计算出卷积核的值,还要除以权重得到的是高斯核的模板<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673612228417-514e47dd-3e37-4491-86ee-bb400a2ea50e.png#averageHue=%23f6f5f1&clientId=u8bfe6127-0132-4&from=paste&height=325&id=u452d5f30&originHeight=488&originWidth=1010&originalType=binary&ratio=1&rotation=0&showTitle=false&size=169655&status=done&style=none&taskId=u70be3193-08b5-4823-904a-b2832206325&title=&width=673.3333333333334" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673612165247-1334516d-c970-4c2b-a77e-f6f81480b4b4.png#averageHue=%23f7f9f8&clientId=u8bfe6127-0132-4&from=paste&height=212&id=u7042677f&originHeight=318&originWidth=1064&originalType=binary&ratio=1&rotation=0&showTitle=false&size=151494&status=done&style=none&taskId=uf50db01d-fe8a-4309-bb1d-050a83e0387&title=&width=709.3333333333334" alt="image.png"><br>cv2.GaussianBlur()<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673612301179-32a10bf4-40ce-4c84-9986-c9b22aa5646c.png#averageHue=%23f5f7f6&clientId=u8bfe6127-0132-4&from=paste&height=128&id=u263a2c32&originHeight=192&originWidth=697&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79233&status=done&style=none&taskId=u7d488983-5532-4fc1-a1fd-62676c9ccf7&title=&width=464.6666666666667" alt="image.png"></p><ul><li>sigma越大，平滑效果越明显</li><li>ksize越大，平滑效果越明显<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：高斯滤波.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 20:00 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 高斯滤波</span></span><br><span class="line">gaus_img = cv2.GaussianBlur(image,(<span class="number">5</span>,<span class="number">5</span>),<span class="number">1.5</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;gaus_img&quot;</span>,np.hstack((image,gaus_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673612705393-67862cd7-fd26-44a4-8b30-6192007bfded.png#averageHue=%237b7467&clientId=uc5a75c74-5fc9-4&from=paste&height=512&id=u1633a98d&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=738183&status=done&style=none&taskId=u70f150a7-3f89-425a-a100-b3fc56eb503&title=&width=1282" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20.方盒滤波和均值滤波</title>
      <link href="/2023/08/21/37-%E6%96%B9%E7%9B%92%E6%BB%A4%E6%B3%A2%E5%92%8C%E5%9D%87%E5%80%BC%E6%BB%A4%E6%B3%A2/"/>
      <url>/2023/08/21/37-%E6%96%B9%E7%9B%92%E6%BB%A4%E6%B3%A2%E5%92%8C%E5%9D%87%E5%80%BC%E6%BB%A4%E6%B3%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="方盒滤波"><a href="#方盒滤波" class="headerlink" title="方盒滤波"></a>方盒滤波</h1><p>cv2.boxFilter()<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673610490233-41b95f6a-e51c-4107-a75e-0ad5547b8555.png#averageHue=%23f5f7f4&clientId=u949e96d1-5a4c-4&from=paste&height=365&id=ub8e28163&originHeight=547&originWidth=823&originalType=binary&ratio=1&rotation=0&showTitle=false&size=120621&status=done&style=none&taskId=u26fa1d94-adae-4d41-8a04-208e0e747bb&title=&width=548.6666666666666" alt="image.png"></p><ul><li>ksize：卷积核大小</li><li><strong>相当于均值滤波</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：方盒滤波和均值滤波.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 19:54 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 方盒滤波</span></span><br><span class="line">box_img = cv2.boxFilter(image,-<span class="number">1</span>,(<span class="number">5</span>,<span class="number">5</span>),normalize = <span class="literal">True</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;box_img&quot;</span>,np.hstack((image,box_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673611041468-6036b1e9-d177-4150-b19e-4f54b8aaa2b2.png#averageHue=%237b7467&clientId=u949e96d1-5a4c-4&from=paste&height=512&id=ucce7dae2&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=735361&status=done&style=none&taskId=ua7b2721d-68ba-4b40-a5a7-fc58698c819&title=&width=1282" alt="image.png"></h1><h1 id="均值滤波"><a href="#均值滤波" class="headerlink" title="均值滤波"></a>均值滤波</h1><p>cv2.blur()<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673610788818-d4312a10-1210-43cb-9a02-382c9261391d.png#averageHue=%23f3f5f5&clientId=u949e96d1-5a4c-4&from=paste&height=31&id=u9d1b1249&originHeight=46&originWidth=562&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18452&status=done&style=none&taskId=u89669763-c489-4afe-88b0-e18d8fed4de&title=&width=374.6666666666667" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：方盒滤波和均值滤波.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 19:54 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 方盒滤波</span></span><br><span class="line"><span class="comment"># box_img = cv2.boxFilter(image,-1,(3,3),normalize = True)</span></span><br><span class="line"><span class="comment"># 均值滤波</span></span><br><span class="line">blur_img = cv2.blur(image,(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">cv2.imshow(<span class="string">&quot;blur_img&quot;</span>,np.hstack((image,blur_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673611099534-f0ba60f6-59c5-4007-994f-943524ec2956.png#averageHue=%237b7467&clientId=u949e96d1-5a4c-4&from=paste&height=512&id=u2c5c68b5&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=737107&status=done&style=none&taskId=ueea07d19-67fb-43f8-8d95-3135f7941af&title=&width=1282" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19.卷积</title>
      <link href="/2023/08/21/36-%E5%8D%B7%E7%A7%AF/"/>
      <url>/2023/08/21/36-%E5%8D%B7%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="图片卷积"><a href="#图片卷积" class="headerlink" title="图片卷积"></a>图片卷积</h1><p>之前的csdn博客：<a href="https://blog.csdn.net/weixin_63866037/article/details/127150062">https://blog.csdn.net/weixin_63866037&#x2F;article&#x2F;details&#x2F;127150062</a><br><strong>图像卷积就是卷积核在图像上按行滑动遍历像素时不断的相乘求和的过程，卷积核一般都是奇数</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673608519342-f8773b7a-9f53-4d7f-8b07-7c7e0d0b2d59.png#averageHue=%23e9dcc7&clientId=u2041213e-f1be-4&from=paste&height=315&id=ub82dac0b&originHeight=472&originWidth=676&originalType=binary&ratio=1&rotation=0&showTitle=false&size=96940&status=done&style=none&taskId=u88b7eaaf-38d6-4750-ad25-9687f04e68f&title=&width=450.6666666666667" alt="image.png"></p><ul><li><strong>步长</strong><ul><li>步长就是卷积核在图像上移动的步幅</li></ul></li><li><strong>padding</strong><ul><li>从上面例子中我们发现,卷积之后图片的长宽会变小.如果要保持图片大小不变,我们需要在图片周围填充0。padding指的就是填充的0的圈数.</li><li>我们可以通过公式计算出需要填充的0的圈数</li><li><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673609079027-576a8ec4-24cd-4cd5-bcf3-74eea83f6ff0.png#averageHue=%23faf5f4&clientId=u2041213e-f1be-4&from=paste&height=358&id=u60fb2845&originHeight=537&originWidth=1076&originalType=binary&ratio=1&rotation=0&showTitle=false&size=130081&status=done&style=none&taskId=ucc0f7a52-6633-495c-b320-a9109308aef&title=&width=717.3333333333334" alt="image.png"></li><li><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673609211267-8dc34cfa-87e0-4137-aae9-fa664c7b966e.png#averageHue=%23eeeeee&clientId=u2041213e-f1be-4&from=paste&height=31&id=u1a2bb019&originHeight=46&originWidth=952&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21601&status=done&style=none&taskId=u20752935-4615-405d-9980-3c34fd6602f&title=&width=634.6666666666666" alt="image.png"></li></ul></li><li><strong>奇数原因：</strong></li><li><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673609294199-508e6d10-38f4-476a-902c-3d910b0475bd.png#averageHue=%23f6f8f7&clientId=u2041213e-f1be-4&from=paste&height=119&id=u5ce6b697&originHeight=178&originWidth=1058&originalType=binary&ratio=1&rotation=0&showTitle=false&size=101340&status=done&style=none&taskId=u5a58dc88-fd96-470d-8708-93153e72cd6&title=&width=705.3333333333334" alt="image.png"></li><li>cv.filter2D(src,ddepth,kernel[,dst[,anchor[,delta[,borderType]]]])</li><li><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673609415974-0c513557-6566-45e2-af1c-1049c38d5ca4.png#averageHue=%23f5f7f6&clientId=u2041213e-f1be-4&from=paste&height=120&id=u2d6cbf29&originHeight=180&originWidth=950&originalType=binary&ratio=1&rotation=0&showTitle=false&size=114076&status=done&style=none&taskId=u5fc64c63-7b86-4ef5-92b7-22ace187e20&title=&width=633.3333333333334" alt="image.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：卷积.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 19:43 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 定义3*3卷积核,不同的卷积核会有不同的效果，这里相当于模糊的效果</span></span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.int32)/<span class="number">25</span></span><br><span class="line"><span class="comment"># 进行卷积操作</span></span><br><span class="line">filter_img = cv2.filter2D(image,-<span class="number">1</span>,kernel)</span><br><span class="line">cv2.imshow(<span class="string">&quot;filter_img&quot;</span>,np.hstack((image,filter_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673610414778-17066c36-0bb5-4a92-a170-28693c1d7380.png#averageHue=%237b7467&clientId=u0f1a0e58-021e-4&from=paste&height=512&id=ue8674424&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=737208&status=done&style=none&taskId=ud853eba4-d921-4735-967e-b03094c973f&title=&width=1282" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18.仿真变换之透视变换</title>
      <link href="/2023/08/21/35-%E4%BB%BF%E7%9C%9F%E5%8F%98%E6%8D%A2%E4%B9%8B%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2/"/>
      <url>/2023/08/21/35-%E4%BB%BF%E7%9C%9F%E5%8F%98%E6%8D%A2%E4%B9%8B%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>透视变换就是将一种坐标系变换成另一种坐标系，<strong>简单来说就是将一张”斜的”图片变正</strong>。<br>M &#x3D; cv2.getPerspectiveTransform(crc,dst)</p><ul><li>获取透视变化的变换矩阵，需要4个点，即图片的4个点</li><li>对于透视变换来说，M是一个3*3的矩阵</li></ul><p>cv2.warpPerspective(img,M,(输出尺寸))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：仿真变换之透视变换.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 19:05 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line">src = np.float32([[<span class="number">200</span>,<span class="number">100</span>],[<span class="number">500</span>,<span class="number">100</span>],[<span class="number">200</span>,<span class="number">300</span>],[<span class="number">500</span>,<span class="number">300</span>]])</span><br><span class="line">des = np.float32([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">500</span>,<span class="number">500</span>],[<span class="number">0</span>,<span class="number">500</span>],[<span class="number">500</span>,<span class="number">500</span>]])</span><br><span class="line">M = cv2.getPerspectiveTransform(src,des)</span><br><span class="line"><span class="comment"># 进行图像变化</span></span><br><span class="line">warp_img = cv2.warpPerspective(image,M,dsize = (<span class="number">500</span>,<span class="number">480</span>)) <span class="comment"># dsize 是输出图像的大小</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;rotate_img&quot;</span>,np.hstack((image,warp_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673608186674-414ca1ae-d5b3-4ce3-ac13-c88bf31c44f2.png#averageHue=%236d675d&clientId=u3b219e21-731a-4&from=paste&height=512&id=uf3f6bb2b&originHeight=768&originWidth=1713&originalType=binary&ratio=1&rotation=0&showTitle=false&size=395055&status=done&style=none&taskId=u1d8b62d1-01d0-480c-9658-252666be39b&title=&width=1142" alt="image.png"><br>效果不好，右边都没显示图片，可能是对应点没有选好，代码能跑出来说明API的调用没有问题</p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17.放射变化之获取变换矩阵</title>
      <link href="/2023/08/21/34-%E6%94%BE%E5%B0%84%E5%8F%98%E5%8C%96%E4%B9%8B%E8%8E%B7%E5%8F%96%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5/"/>
      <url>/2023/08/21/34-%E6%94%BE%E5%B0%84%E5%8F%98%E5%8C%96%E4%B9%8B%E8%8E%B7%E5%8F%96%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>之前在放射变化之图像平移有一个变化矩阵M，之前我们是自定义的，cv2里面也给我们定义了API<br>M &#x3D; cv2.getRotationMatrix2D(center,angle,scale)<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673605833071-925badaf-e757-4a4c-aba9-cbf3487d15d7.png#averageHue=%23f4f6f5&clientId=uf90c963f-5bfc-4&from=paste&height=69&id=u3a32d734&originHeight=104&originWidth=517&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46524&status=done&style=none&taskId=u4edee493-db5e-4780-b154-c191e8b91bb&title=&width=344.6666666666667" alt="image.png"><br>img &#x3D; cv2.warpAffine(img,M,dsize,flags,mode,value)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：放射变化之获取变换矩阵.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 18:33 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 由API计算M</span></span><br><span class="line">M = cv2.getRotationMatrix2D((<span class="number">240</span>,<span class="number">640</span>),<span class="number">30</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 进行图像变化</span></span><br><span class="line">warp_img = cv2.warpAffine(image,M,dsize = (<span class="number">640</span>,<span class="number">480</span>)) <span class="comment"># dsize 是输出图像的大小</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;rotate_img&quot;</span>,np.hstack((image,warp_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673606125187-9303c270-6ffa-47a9-9f68-a73234703790.png#averageHue=%23645e54&clientId=u871fc0e0-d36b-4&from=paste&height=512&id=u35f0fe75&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=688543&status=done&style=none&taskId=u4711e37c-f84f-4b8d-a0dd-2c51b65008f&title=&width=1282" alt="image.png"><br>M &#x3D; cv2.getAffineTransform(src[],des[])</p><ul><li>src原目标的三个点</li><li>dst对应变换后的三个点<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：放射变化之获取变换矩阵.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 18:33 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 由API计算M</span></span><br><span class="line"><span class="comment"># M = cv2.getRotationMatrix2D((240,320),30,1)</span></span><br><span class="line"><span class="comment"># 由三个点计算M</span></span><br><span class="line"><span class="comment"># 必须是32的整数</span></span><br><span class="line">src = np.float32([[<span class="number">200</span>,<span class="number">100</span>],[<span class="number">300</span>,<span class="number">100</span>],[<span class="number">200</span>,<span class="number">300</span>]])</span><br><span class="line">des = np.float32([[<span class="number">100</span>,<span class="number">150</span>],[<span class="number">360</span>,<span class="number">200</span>],[<span class="number">280</span>,<span class="number">120</span>]])</span><br><span class="line">M = cv2.getAffineTransform(src,des)</span><br><span class="line"><span class="comment"># 进行图像变化</span></span><br><span class="line">warp_img = cv2.warpAffine(image,M,dsize = (<span class="number">640</span>,<span class="number">480</span>)) <span class="comment"># dsize 是输出图像的大小</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;rotate_img&quot;</span>,np.hstack((image,warp_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673606783529-2ec0cdab-12ed-46a8-81c3-ba9228ea269e.png#averageHue=%235b564d&clientId=ubd640dbc-458f-4&from=paste&height=512&id=u0d9c6eed&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=559341&status=done&style=none&taskId=u1e648f63-7bfe-4a64-8148-2552e7fc118&title=&width=1282" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17.二分查找法</title>
      <link href="/2023/08/21/60-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/"/>
      <url>/2023/08/21/60-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>二分查找（binary search)又称为折半查找，优点是<strong>比较次数少，查找速度快，平均性能好</strong>；缺点是<strong>要求待查表为有序表，且插入删除困难</strong>。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</p><h1 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h1><ol><li>首先，假设表中的元素是按升序排列的，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前后两个子表。</li><li>如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后移子表。</li><li>重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1671088654366-212b8829-5c33-43b7-b0d5-241fa374174a.png#averageHue=%23f7f7f7&clientId=uf7c1ffd8-76dc-4&from=paste&height=255&id=u77043231&originHeight=317&originWidth=605&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20672&status=done&style=none&taskId=u7db8ba3c-a9a8-452d-96c3-e28496ca3df&title=&width=487.3333435058594" alt="image.png"></p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">alist,target</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    非递归二分查找</span></span><br><span class="line"><span class="string">    :param alist:</span></span><br><span class="line"><span class="string">    :param target:</span></span><br><span class="line"><span class="string">    :return: True/False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = <span class="built_in">len</span>(alist)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> alist[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> alist[mid] &lt;target:  <span class="comment">#在右边找</span></span><br><span class="line">                start = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># 在左边找</span></span><br><span class="line">                end = mid -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search2</span>(<span class="params">alist,target</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param alist:</span></span><br><span class="line"><span class="string">    :param target:</span></span><br><span class="line"><span class="string">    :return: True/False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(alist) ==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mid = <span class="built_in">len</span>(alist)// <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> alist[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> alist[mid] &gt; target:</span><br><span class="line">                <span class="keyword">return</span> binary_search2(alist[:mid],target)</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 在左边找</span></span><br><span class="line">                <span class="keyword">return</span> binary_search2(alist[mid+<span class="number">1</span>:],target)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python读取PDF文件并做词云可视化</title>
      <link href="/2023/08/21/python%E8%AF%BB%E5%8F%96PDF%E6%96%87%E4%BB%B6%E5%B9%B6%E5%81%9A%E8%AF%8D%E4%BA%91%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2023/08/21/python%E8%AF%BB%E5%8F%96PDF%E6%96%87%E4%BB%B6%E5%B9%B6%E5%81%9A%E8%AF%8D%E4%BA%91%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>Hallo，各位小伙伴大家好啊！这个专栏是用来分享<strong>数据处理以及</strong><a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96&spm=1001.2101.3001.7020">数据可视化</a>的一些常见操作，以及自己的一些学习笔记，希望能给大家带来帮助呀！感兴趣的小伙伴也欢迎<strong>私信</strong>或者<strong>评论区</strong>交流呀！<br>Python编程读取至少一篇<strong>pdf文档</strong>。并编程实现以下功能：<br>①实现其中的<strong>热词统计分析</strong>。<br>②绘制热词统计分析的<strong>词云</strong></p><h1 id="一、PDF文档的选择"><a href="#一、PDF文档的选择" class="headerlink" title="一、PDF文档的选择"></a>一、PDF文档的选择</h1><p>我选择的PDF中文字内容如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688440402-68e19c10-1b85-466f-bb08-dd3acc2e23dc.png#averageHue=%23e4e4e4&clientId=ub7d2f3d5-3da7-4&from=paste&id=ub2853bb1&originHeight=827&originWidth=857&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=357576&status=done&style=none&taskId=ue1de1e5d-e53e-4e9e-93b5-79aa2f888d4&title=" alt="image.png">编辑</p><h1 id="二、效果展示"><a href="#二、效果展示" class="headerlink" title="二、效果展示"></a>二、效果展示</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688440247-043ed7ff-be0f-49d1-a159-4975c6211bc8.png#averageHue=%23fbfbfb&clientId=ub7d2f3d5-3da7-4&from=paste&id=u36135572&originHeight=549&originWidth=732&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=43543&status=done&style=none&taskId=u4a89225d-b781-4c69-b3de-39ee5c7e243&title=" alt="image.png">编辑<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688440392-7d5adb0e-6b2a-4a75-a924-d0df19a67cd2.png#averageHue=%23d1e765&clientId=ub7d2f3d5-3da7-4&from=paste&id=u0669b8c4&originHeight=514&originWidth=734&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=389859&status=done&style=none&taskId=u40d4d06d-2e31-4f29-9eb1-51ae669fb1c&title=" alt="image.png">编辑</p><h1 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdfplumber  <span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br><span class="line"><span class="comment"># 用pdf文件解析器读取文件</span></span><br><span class="line"><span class="keyword">with</span> pdfplumber.<span class="built_in">open</span>(<span class="string">&#x27;中华文化.pdf&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 用for循环读取文件中的每一页</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> f.pages:</span><br><span class="line">        text = page.extract_text()</span><br><span class="line">        txt_f = <span class="built_in">open</span>(<span class="string">r&#x27;中华文化.txt&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 创建txt文件</span></span><br><span class="line">        txt_f.write(text)  <span class="comment"># 写入txt文件</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;中华文化.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">file = file.read()  <span class="comment">#读取txt文件</span></span><br><span class="line">txtlist = jieba.lcut(file) </span><br><span class="line">string = <span class="string">&quot; &quot;</span>.join(txtlist) </span><br><span class="line">stop_words = &#123;&#125;  </span><br><span class="line">counts = &#123;&#125;  </span><br><span class="line"><span class="keyword">for</span> txt <span class="keyword">in</span> txtlist:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(txt) == <span class="number">1</span>:  </span><br><span class="line">        stop_words[txt] = stop_words.get(txt, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        counts[txt] = counts.get(txt, <span class="number">0</span>) + <span class="number">1</span> </span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)  </span><br><span class="line">y1 = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    y1.append(items[i][<span class="number">1</span>])</span><br><span class="line">    labels.append(items[i][<span class="number">0</span>])</span><br><span class="line"><span class="comment"># plt.figure(figsize=(8,4))</span></span><br><span class="line">width = <span class="number">0.3</span></span><br><span class="line">x = np.arange(<span class="built_in">len</span>(y1))</span><br><span class="line">a = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">9</span>)]</span><br><span class="line">plt.xticks(a,labels,rotation = <span class="number">30</span>)</span><br><span class="line">plt.bar(x=x,height=y1,width=width)</span><br><span class="line">plt.title(<span class="string">&#x27;PDF文件中热词统计分析&#x27;</span>)</span><br><span class="line">plt.savefig(<span class="string">&quot;热词统计分析.png&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------热词统计分析完成！-------&quot;</span>)</span><br><span class="line">stoplist=[]   </span><br><span class="line">item = <span class="built_in">list</span>(stop_words.items())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(item)): </span><br><span class="line">    txt,count = item[i]</span><br><span class="line">    stoplist.append(txt)  </span><br><span class="line"><span class="comment">#print(stoplist)</span></span><br><span class="line">setlist = <span class="built_in">set</span>(stoplist)  </span><br><span class="line">wcd = WordCloud(width=<span class="number">1000</span>, height=<span class="number">700</span>, background_color=<span class="string">&#x27;white&#x27;</span>, font_path=<span class="string">&#x27;msyh.ttc&#x27;</span>, scale=<span class="number">15</span>, stopwords=setlist)</span><br><span class="line">wcd.generate(string)</span><br><span class="line">wcd.to_image()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------热词词云生成完成！-------&quot;</span>)</span><br><span class="line">wcd.to_file(<span class="string">&#x27;词云.png&#x27;</span>)  <span class="comment"># 导出图片</span></span><br></pre></td></tr></table></figure><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><ol><li><p>题目要求读取至少一篇pdf文档，那么需要用到pdfplumber库，用with pdfplumber.open(‘中华文化.pdf’) as f:这条语句将文件打开，之后用for循环读取文件的每一页，并将读取到的内容存到txt文件中。</p></li><li><p>再利用jieba分词库对文本处理，使用精确模式对文本进行分词，列表转化为字符串,绘制词云要传入的对象是字符串.</p></li><li><p>接着统计词语及其出现的次数，通过键值对的形式存储要排除的词及出现次数，通过键值对的形式存储词语及其出现的次数，注意将当个词语删除，遍历所有词语，每出现一次其对应的值加 1，根据词语出现的次数进行从大到小排序。</p></li><li><p>根据上面的处理结果画热词统计分析图，用for循环向label和y1中添加排名前十的词汇和它对应出现的次数，用plt画出，横坐标为对应词汇，纵坐标为出现次数，可以看出，出现最多的词是“父母”和“我们”、其次是“弟子规”和“朋友”。</p></li><li><p>创建排除单个词的列表，遍历列表中所有的字典，将key添加到要排除的列表，将列表转化为集合，后面WordCloud()方法的stopwords传入的参数要求为集合，将string变量传入generate()方法，给词云输入文字，利用WordCloud生成词云照片。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于opencv的人脸检测</title>
      <link href="/2023/08/21/%E5%9F%BA%E4%BA%8Eopencv%E7%9A%84%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B/"/>
      <url>/2023/08/21/%E5%9F%BA%E4%BA%8Eopencv%E7%9A%84%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><strong>目录</strong><br><a href="#%E5%BC%95%E8%A8%80">引言</a><br><a href="#%E4%B8%80%E3%80%81%E4%BB%A3%E7%A0%81">一、代码</a><br><a href="#%E4%BA%8C%E3%80%81%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C">二、运行效果</a><br><a href="#%E4%BA%8C%E3%80%81%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB">三、代码解读</a><br><a href="#%E4%B8%89%E3%80%81%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83">四、一些思考</a></p><hr><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这篇文章，让你用短短的16行代码基于opencv检测一张图片上的人脸，很有意思，快快学起来吧！</p><h1 id="一、代码"><a href="#一、代码" class="headerlink" title="一、代码"></a>一、代码</h1><p>先将代码直接粘在下面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face_detect_demo</span>(<span class="params">img</span>):</span><br><span class="line">    img = cv.resize(img, dsize=(<span class="number">800</span>, <span class="number">800</span>))</span><br><span class="line">    gary = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line">    face_detect = cv.CascadeClassifier(<span class="string">&quot;D:/opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml&quot;</span>)</span><br><span class="line">    face = face_detect.detectMultiScale(gary, <span class="number">1.004</span>, <span class="number">28</span>, <span class="number">0</span>, (<span class="number">40</span>, <span class="number">40</span>), (<span class="number">50</span>, <span class="number">50</span>))</span><br><span class="line">    <span class="keyword">for</span> x, y, w, h <span class="keyword">in</span> face:</span><br><span class="line">        cv.rectangle(img, (x, y), (x + w, y + h), color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">225</span>), thickness=<span class="number">4</span>)</span><br><span class="line">    cv.imshow(<span class="string">&quot;result&quot;</span>, img)</span><br><span class="line">    <span class="comment"># img.save(&quot;result.jpg&quot;)  # 保存图片</span></span><br><span class="line">    cv.imwrite(<span class="string">r&quot;final_result.jpg&quot;</span>, img)</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;photo.jpg&quot;</span>)</span><br><span class="line">face_detect_demo(img)  <span class="comment"># 检测单个图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>) == cv.waitKey(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h1 id="二、运行效果"><a href="#二、运行效果" class="headerlink" title="二、运行效果"></a>二、运行效果</h1><p>原图片：<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688271799-b6b91d96-3e37-4f08-ba67-b3bc4299f596.png#averageHue=%233e4741&clientId=u576fd20b-bd42-4&from=paste&id=ud59041c1&originHeight=453&originWidth=806&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=673819&status=done&style=none&taskId=u260584ff-04dc-4743-a023-246b46d1308&title=" alt="image.png">编辑<br>识别之后的图片（得自己调参）：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688272054-d631b276-852f-4342-aa14-ea02d3e08681.png#averageHue=%23434b44&clientId=u576fd20b-bd42-4&from=paste&id=ub64a02e5&originHeight=800&originWidth=800&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1209991&status=done&style=none&taskId=u3b94346e-55cf-433e-bc58-b85af2b008c&title=" alt="image.png">编辑</p><h1 id="三、代码解读"><a href="#三、代码解读" class="headerlink" title="三、代码解读"></a>三、代码解读</h1><ul><li><p>首先导入我们所需要的必要包opencv，对应指令为import cv2 as cv，这里的as就相当于给这个模块起了个别名。如果读者opencv还没有安装的话，可以在终端里面pip install opencv，还不行的话可以看看这个教程：<a href="https://blog.csdn.net/qq_42776581/article/details/115209256?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166584204216800182778776%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166584204216800182778776&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-115209256-null-null.142%5Ev56%5Econtrol_1,201%5Ev3%5Econtrol_2&utm_term=opencv%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Opencv安装小白教程</a></p></li><li><p>首先，我们定义一个函数face_detect_demo，这个函数有一个参数img，即我们要检测的图片，这是一个形参。</p></li><li><p>调用cv里面的函数resize，改变图片的大小。resize第一个参数是要处理的图片，第二个参数是你想要改成图片的大小，这里的（800，800）就是改成800*800的这样一张图片。处理的结果再返回给img，当然，如果你喜欢的话也可以另外设一个变量，传进去。</p></li><li><p>接下来更改图片颜色，直接调用cvtColor函数，同样，第一个参数是要处理的图片，第二个参数是要更改的颜色类型，这里的颜色类型有很多种，我这里设置的是COLOR_BGR2GRAY类型。</p></li><li><p>前两步，你可以理解为将图片标准化，即传入不同大小，不同颜色的图片可以转化成同一大小，同一颜色类型的图片。这样的操作好处在于后面调参数更容易。</p></li><li><p>重头戏来了！，这是opencv官方已经训练好的一个人脸检测模型，直接调用就可以，非常方便！文章最后有文件和代码提取链接，也有一些其他训练好的模型，如果感兴趣的话你也可以试一试其他模型。</p></li><li><p>接着，我们检测图片中的人脸，face_detect.detectMultiScale，就是调用模型里面的detectMultiScale。第一个参数gray是要处理的图片，第二个参数是，第三个参数28意思是检测的时候，30次都在同一个位置检测到人脸；这个值高，模型就需要反复验证。第四个参数是。第五个参数是最小矩形框大小，第六个参数是最大矩形框大小。这六个参数需要自己去调，以求最佳匹配。detectMultiScale方法会直接用该模型检测图片，并返回多个x，y，w，h。（x，y）是左顶点的坐标，w是矩形框的宽度，h是矩形框的高度。</p></li><li><p>for循环的功能就是在原来的图片上面绘制矩形框啦，对应的函数是cv.rectangle，这里面的参数很简单就不一一介绍了。</p></li><li><p>cv.imshow进行展示，cv.imwrite进行保存，注意imwrite保存图片时，命名要加上.jpg</p></li><li><p>函数到此结束，接下来是调用函数：</p></li><li><p>首先读取图片，由于我把程序和图片放在一个文件夹，可以直接用名字去读，如果你没有放在一个文件家里面，要用绝对路径去读取。</p></li><li><p>调用上面写好的函数去检验人脸</p></li><li><p>最后做一个键盘的关联事件退出，，按下键盘q键会退出循环，程序结束。别忘了用cv.destroyAllWindows销毁所以窗口哦。</p></li></ul><h1 id="四、一些思考"><a href="#四、一些思考" class="headerlink" title="四、一些思考"></a>四、一些思考</h1><p>我感觉这是一个很有意思的demo，虽然没有什么技术含量，没有数据获取，数据处理，数据训练，模型验证…但是，他能让我们看到cv的强大，如果计算机视觉没有opencv，很多简单的功能将变得复杂，当opencv+openmv，我们能做很多我们感兴趣的事。<br>回到这个人脸检测里面去，为什么叫人脸检测不叫人脸识别呢？因为这个demo只能够知道图片里有几个人，至于他们到底分别是谁就没有办法知道了。<br>如果加上神经网络又会怎么样呢？比如现在我有A这个人的大量图片，用神经网络进行训练，让计算机能够认出他。那么在一张合照里面，计算机能够很快认出哪个是A，并把他框选出来。<br>那么到底有什么用呢？畅想未来：<br>现在有很多重要犯罪嫌疑人逍遥法外，如果能将他的人脸数据训练出来的模型传到全国各地的摄像头中，无论在哪，只要摄像头检测到他的人脸就把地址信息发回警局，这样是不是就能即使抓捕他。<br>儿童拐卖同样是一个社会热点，现在也有很多网站在帮助找被拐卖的儿童。父母主要是通过网站上上传的照片去猜测这到底是不是他的孩子。但是很多照片都是孩子被拐卖两三年甚至五年十年之后的照片了，就连是亲生父母都很难辨认。如果能用深度学习，强化学习，根据小时候的照片训练出来的模型去匹配网站上的照片，将匹配结果高的反馈给父母，这样父母和子女是不是更容易重逢呢？当然这只是我的猜想。<br>人脸作为我们的生物密码给我们带来了不少便利，比如说手机一键解锁，支付宝一键支付，各种门禁刷脸进入。“刷脸”逐渐渗透到我们生活，我们的人脸数据不断传入互联网中，互联网的数据库越来越丰富，对应背后的产业链也越来越发达，面部识别并不是一项全新的技术，但人工智能和机器学习不断使面部识别变得更强大。<br>文件链接：<br><a href="https://pan.baidu.com/s/1FV3NWT3Vayq3eKq2QsB3mg?pwd=tsvd">https://pan.baidu.com/s/1FV3NWT3Vayq3eKq2QsB3mg?pwd=tsvd</a><br>提取码：tsvd</p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Numpy数组的图像分割 基于PIL对图像进行拼接</title>
      <link href="/2023/08/21/%E5%9F%BA%E4%BA%8ENumpy%E6%95%B0%E7%BB%84%E7%9A%84%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2-%E5%9F%BA%E4%BA%8EPIL%E5%AF%B9%E5%9B%BE%E5%83%8F%E8%BF%9B%E8%A1%8C%E6%8B%BC%E6%8E%A5/"/>
      <url>/2023/08/21/%E5%9F%BA%E4%BA%8ENumpy%E6%95%B0%E7%BB%84%E7%9A%84%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2-%E5%9F%BA%E4%BA%8EPIL%E5%AF%B9%E5%9B%BE%E5%83%8F%E8%BF%9B%E8%A1%8C%E6%8B%BC%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h1><p><a href="#%E4%B8%80%E3%80%81%E8%A6%81%E6%B1%82">一、要求</a><br><a href="#%E4%BA%8C%E3%80%81%E4%BB%A3%E7%A0%81">二、代码</a><br><a href="#%E4%B8%89%E3%80%81%E7%A8%8B%E5%BA%8F%E8%A7%A3%E8%AF%BB">三、程序解读</a></p><h1 id="一、要求"><a href="#一、要求" class="headerlink" title="一、要求"></a>一、要求</h1><p>现在有一个多张图片构成的大图，要对图片进行分割和拼接。将下述图像分割成15个大小不同的子图像：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688312073-683f1745-8468-45c0-810f-4f07d69d51f3.png#averageHue=%23b2a26d&clientId=u2d26d80a-c941-4&from=paste&id=u8e679940&originHeight=930&originWidth=691&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1062271&status=done&style=none&taskId=uc5c75d57-7adf-4a45-bad8-6a1867a1e68&title=" alt="image.png">编辑<br>从中选择四个子图像，拼接成一个新得图像。例如：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688310978-b1e9e7a1-8b39-4702-9445-e6bcf9069d59.png#averageHue=%23c7c49b&clientId=u2d26d80a-c941-4&from=paste&id=u19611eb4&originHeight=200&originWidth=200&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=73050&status=done&style=none&taskId=u7f2d38fa-37c0-4c26-b316-ad53556161e&title=" alt="image.png">编辑</p><hr><h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><p>直接上代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">import PIL.Image as Image</span><br><span class="line"></span><br><span class="line">def func(cut_width,cut_length,time,picture):</span><br><span class="line">    (width, length, depth) = picture.shape</span><br><span class="line">    # 预处理生成0矩阵</span><br><span class="line">    pic = np.zeros((cut_width, cut_length, depth))</span><br><span class="line">    # 计算可以划分的横纵的个数</span><br><span class="line">    num_width = int(width / cut_width)</span><br><span class="line">    num_length = int(length / cut_length)</span><br><span class="line">    # for循环迭代生成</span><br><span class="line">    for i in range(0, num_width):</span><br><span class="line">        for j in range(0, num_length):</span><br><span class="line">            pic = picture[i * cut_width: (i + 1) * cut_width, j * cut_length: (j + 1) * cut_length, :]</span><br><span class="line">            result_path =&#x27;&#123;&#125;_&#123;&#125;_&#123;&#125;.jpg&#x27;.format(time,i + 1, j + 1)</span><br><span class="line">            pic = cv2.resize(pic,dsize=(100,100))</span><br><span class="line">            cv2.imwrite(result_path, pic)</span><br><span class="line"></span><br><span class="line"># 读取要分割的图片，以及其尺寸等数据</span><br><span class="line">cut_width_1 = 310</span><br><span class="line">cut_width_2 = 50</span><br><span class="line">cut_length_1 = 345</span><br><span class="line">cut_length_2 = 50</span><br><span class="line">picture_1 = cv2.imread(&quot;photo.jpg&quot;)</span><br><span class="line">picture_2 = cv2.imread(&quot;1_1_1.jpg&quot;)</span><br><span class="line">picture_3 = cv2.imread(&quot;1_2_1.jpg&quot;)</span><br><span class="line">picture_4 = cv2.imread(&quot;1_2_2.jpg&quot;)</span><br><span class="line">func(cut_width_1,cut_length_1,1,picture_1)</span><br><span class="line">func(cut_width_2,cut_length_2,2,picture_2)</span><br><span class="line">func(cut_width_2,cut_length_2,3,picture_3)</span><br><span class="line">func(cut_width_2,cut_length_2,4,picture_4)</span><br><span class="line">to_image = Image.new(&#x27;RGB&#x27;, (200, 200))  # 创建一个新图</span><br><span class="line">from_image_1 = Image.open(&quot;2_1_1.jpg&quot;)</span><br><span class="line">from_image_2 = Image.open(&quot;3_1_1.jpg&quot;)</span><br><span class="line">from_image_3 = Image.open(&quot;3_1_2.jpg&quot;)</span><br><span class="line">from_image_4 = Image.open(&quot;4_2_2.jpg&quot;)</span><br><span class="line">to_image.paste(from_image_1, (0,0))</span><br><span class="line">to_image.paste(from_image_2, (100,0))</span><br><span class="line">to_image.paste(from_image_3, (0,100))</span><br><span class="line">to_image.paste(from_image_4, (100,100))</span><br><span class="line">to_image.save(&quot;result.jpg&quot;)</span><br></pre></td></tr></table></figure><hr><h1 id="三、程序解读"><a href="#三、程序解读" class="headerlink" title="三、程序解读"></a>三、程序解读</h1><p>所用的库为cv2和numpy这两个机器学习经常会用的库，首先导入这两个库：import numpy as np；import cv2。<br>代码核心在于func这个函数，里面有四个形参：cut_width,cut_length,time,picture。分别代表着需要切割的宽度，需要切割的长度，第几次切割以及需要切割的图片。</p><ol><li><p>首先，用picture.shape获得当前图片的大小并返回。由于图片本身是一个个像素组成的，可以看成是像素矩阵，这样我们切割合并就会方便很多。所以，先用np.zero按原图片大小填充0。Num_width和num_length代表着可以划分的纵横个数。</p></li><li><p>之后两个for循环在原图片上进行分割，关键在pic &#x3D; picture[i * cut_width: (i + 1) * cut_width, j * cut_length: (j + 1) * cut_length, :]这句代码，这是在原图片上进行数组分割，并将结果返回到pic中。result_path是指定的保存路径及名称，这是我们的time参数就派上用场了，第几次切割名称前面就加几，这样可以有效避免因多次切割导致图片覆盖的问题。</p></li><li><p>最后将图片保存。</p></li></ol><p>通过多次调用函数并传入不同的尺寸、time和要处理的图片进行分割：<br>切割结果依次为2_1_1，2_1_2，2_2_1，2_2_2，1_1_2，3_1_1，3_1_2，3_2_1，3_2_2，4_1_1，4_1_2，4_2_1，4_2_2，1_3_1，1_3_2这15个图片。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688311300-97933a5e-aaac-4908-bac6-f6c5c59c81bd.png#averageHue=%23f6f4f0&clientId=u2d26d80a-c941-4&from=paste&id=u1299eb3c&originHeight=667&originWidth=1672&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=364009&status=done&style=none&taskId=u74eb82e2-729e-4d92-8245-eeb8cefdfbe&title=" alt="image.png">编辑<br>我选择 1_1_2，2_2_2，3_1_2，4_1_2这四张图片进行组合：<br>拼接的代码主要用到PIL.Image，基本逻辑就是挑选出我所要拼接的四张图片，将它们“粘贴”到固定位置。Paste第一个参数是要粘贴的图片，第二个参数是要粘贴的位置，注意这里是左上角。最后一步，将拼接好的图片保存。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688311048-7618a8a0-0f58-4b93-957d-3737ab8ba7b7.png#averageHue=%23c7c49b&clientId=u2d26d80a-c941-4&from=paste&id=u8d8815a1&originHeight=200&originWidth=200&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=73050&status=done&style=none&taskId=u4512fbd8-ec85-4edd-86ce-f79a9ffdc33&title=" alt="image.png">编辑<br>好啦！关于基于Numpy数组的图像分割和基于PIL对图像进行拼接就分享到这里啦！感兴趣的同学欢迎评论区留言！</p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络对多变量的性别结果预测</title>
      <link href="/2023/08/21/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AF%B9%E5%A4%9A%E5%8F%98%E9%87%8F%E7%9A%84%E6%80%A7%E5%88%AB%E7%BB%93%E6%9E%9C%E9%A2%84%E6%B5%8B/"/>
      <url>/2023/08/21/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AF%B9%E5%A4%9A%E5%8F%98%E9%87%8F%E7%9A%84%E6%80%A7%E5%88%AB%E7%BB%93%E6%9E%9C%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>神经网络这几年可谓是火得一塌糊涂，它是目前最为火热的研究方向——深度学习的基础。在神经网络刚被发明之初，人们欢呼雀跃，认为是创造出来了比人更强的思维怪兽。它类比于人的神经元的工作方式，通过信号传递，不断调整权重，最终输出结果！本文将根据一个多参数预测男女性别的实际案例向大家！</p><h1 id="一、什么是神经网络？"><a href="#一、什么是神经网络？" class="headerlink" title="一、什么是神经网络？"></a>一、什么是神经网络？</h1><p><strong>简而言之，神经网络就是函数：输入数据，输出结果！</strong><br><a href="https://so.csdn.net/so/search?q=%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&spm=1001.2101.3001.7020">神经网络</a>类似人类大脑，由一个个神经元组成，每个神经元和多个其他神元连接，形成网状。单个神经元只会解决最简单的问题，但是组合成一个分层的整体，就可以解决复杂问题。<br>顾名思义，神经网络是类似于人脑神经元的一种东西。学过生物的我们都知道，神经元彼此之间相互联系，传入一个信号后，可以在神经元之间不断传递，最终促使肌体做出反应，比如被针扎了之后会马上缩手。你也可以笼统的认为神经网络就是一个函数，传入一个或多个参数后，经过一系列变换，输出一个或多个参数。最简单的以y&#x3D;x+1为例，传入一个值就能输出一个值，当传入x&#x3D;2的时候输出3，x&#x3D;3的时候输出4。不过，真正的神经网络要复杂的多。想要继续深入学习可以参考：<a href="https://blog.csdn.net/weixin_38958840/article/details/118608293?ops_request_misc=&request_id=&biz_id=102&utm_term=%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-118608293.142%5Ev59%5Econtrol_1,201%5Ev3%5Econtrol_2,213%5Ev1%5Econtrol&spm=1018.2226.3001.4187">什么是神经网络？</a></p><h1 id="二、神经网络的工作原理"><a href="#二、神经网络的工作原理" class="headerlink" title="二、神经网络的工作原理"></a>二、神经网络的工作原理</h1><p>首先让我们来看一个经典的神经网络。这是一个包含三个层次的神经网络：<strong>输入层、中间层</strong>（也叫<strong>隐藏层</strong>）、<strong>输出层。</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688402681-a66d8891-ec55-4596-b69b-22947ab69cd5.png#averageHue=%23f9f9f9&clientId=u88b7eb29-3b55-4&from=paste&id=u77bd883e&originHeight=739&originWidth=526&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&status=done&style=none&taskId=u288b9214-7335-45c8-afac-d54ed7392ea&title=">编辑<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688402697-7e84d873-f841-47ce-8ead-f37812d70460.png#averageHue=%23faf9f9&clientId=u88b7eb29-3b55-4&from=paste&id=uc0597666&originHeight=536&originWidth=833&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&status=done&style=none&taskId=uec76a94a-8272-4245-820a-ccb867158d9&title=">编辑<br>输入层和输出层比较好理解，一个输入一个输出。最难的是中间层，它相当于一个黑匣子，你也可以把他看成一个函数拟合器，它可以拟合任何函数。它的工作原理可以分为以下几个方面：</p><ul><li><p>接受输入的变量，并以此作为信息来源；</p></li><li><p>拥有权重变量，并以此作为知识；</p></li><li><p>融合信息和知识，输出预测结果</p></li></ul><p>目前为止所有的神经网络都是这样工作的，他使用权重中的知识解释输入数据的信息。<br>另一种理解神经网络权重的方法是将权重作为网络的输入和预测之间敏感度的度量：如果权重非常高，即使是最小的输入也可以对预测结果产生非常大的影响；如果权重很小，那就算是很大的输入也只能对预测结果产生很小的扰动。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688402359-03ac4fe1-ab19-47b6-9c74-1265bb6d5ba4.png#averageHue=%23090909&clientId=u88b7eb29-3b55-4&from=paste&id=u8f810d6a&originHeight=718&originWidth=1260&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=77714&status=done&style=none&taskId=u7a197630-3836-484c-a5e1-9a0d5c9ce76&title=" alt="image.png">编辑<br>在这里引入一篇博客：<a href="https://blog.csdn.net/qq_52587975/article/details/119319010?ops_request_misc=&request_id=&biz_id=102&utm_term=%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-119319010.142%5Ev62%5Econtrol_1,201%5Ev3%5Econtrol_2,213%5Ev1%5Econtrol&spm=1018.2226.3001.4187">神经网络工作原理</a>，感兴趣的小伙伴可以去看看！</p><h1 id="三、实际场景描述"><a href="#三、实际场景描述" class="headerlink" title="三、实际场景描述"></a>三、实际场景描述</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688402382-126a0be3-5d8a-4b74-a53f-aaae445fedd9.png#averageHue=%23f8f8f8&clientId=u88b7eb29-3b55-4&from=paste&id=u743f4e37&originHeight=319&originWidth=900&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=172777&status=done&style=none&taskId=ue2332859-7f6c-4094-aa7d-d303a57d777&title=" alt="image.png">编辑<br>用KNN方法，将1-8数据做为训练集，判断第9条数据是男人还是女人？<br>思路：根据1-8给出的身高，体重，脚掌长度作为输入，性别作为输出训练一个神经网络，并将第9条数据传入，判断ta的性别。</p><h1 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：python </span></span><br><span class="line"><span class="string">@File    ：knn.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2022/10/25 10:41 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#预测男女性别</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=([(<span class="number">6</span>,<span class="number">180</span>,<span class="number">12</span>),</span><br><span class="line">(<span class="number">5.92</span>,<span class="number">190</span>,<span class="number">11</span>),</span><br><span class="line">(<span class="number">5.58</span>,<span class="number">170</span>,<span class="number">12</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="number">100</span>,<span class="number">6</span>),</span><br><span class="line">(<span class="number">5.5</span>,<span class="number">150</span>,<span class="number">8</span>),</span><br><span class="line">(<span class="number">5.42</span>,<span class="number">130</span>,<span class="number">7</span>),</span><br><span class="line">(<span class="number">5.92</span>,<span class="number">165</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="number">5.75</span>,<span class="number">150</span>,<span class="number">9</span>)])</span><br><span class="line"><span class="comment"># mx=np.max(a)</span></span><br><span class="line"><span class="comment"># mn=np.min(a)</span></span><br><span class="line"><span class="comment"># b=(a-mn)/(mx-mn)</span></span><br><span class="line"><span class="comment"># print(b)</span></span><br><span class="line"></span><br><span class="line">y=[<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>]</span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">neigh=KNeighborsClassifier(n_neighbors=<span class="number">6</span>)</span><br><span class="line">neigh.fit(a,y)</span><br><span class="line">Z=neigh.predict(np.array([[<span class="number">6</span>,<span class="number">130</span>,<span class="number">8</span>]]))</span><br><span class="line"><span class="built_in">print</span>(Z)</span><br></pre></td></tr></table></figure><p>结果为：female<br>归一化也是神经网络经常要进行的操作，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mx=np.<span class="built_in">max</span>(a)</span><br><span class="line">mn=np.<span class="built_in">min</span>(a)</span><br><span class="line">b=(a-mn)/(mx-mn)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h1 id="五、KNeighborsClassifier算法"><a href="#五、KNeighborsClassifier算法" class="headerlink" title="五、KNeighborsClassifier算法"></a>五、KNeighborsClassifier算法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KNeighborsClassifier(n_neighbors=<span class="number">5</span>,weights=’uniform’,algorithm=’auto’,leaf_size=<span class="number">30</span>,p=<span class="number">2</span>,metric=’minkowski’,metric_params=<span class="literal">None</span>,n_jobs=<span class="number">1</span>,**kwargs)</span><br></pre></td></tr></table></figure><ul><li><p>n_neighbors: int, 可选参数(默认为 5)用于kneighbors查询的默认邻居的数量</p></li><li><pre><code>weights（权重）: str or callable(自定义类型), 可选参数(默认为 ‘uniform’) 用于预测的权重函数。可选参数如下: ‘uniform’ : 统一的权重. 在每一个邻居区域里的点的权重都是一样的。</code></pre><p> ‘distance’ : 权重点等于他们距离的倒数。使用此函数，更近的邻居对于所预测的点的影响更大。<br> [callable] : 一个用户自定义的方法，此方法接收一个距离的数组，然后返回一个相同形状并且包含权重的数组。 </p></li><li><pre><code>algorithm（算法）: &#123;‘auto’, ‘ball_tree’, ‘kd_tree’, ‘brute’&#125;, 可选参数（默认为 ‘auto’） 计算最近邻居用的算法： ‘ball_tree’ 是为了克服kd树高纬失效而发明的，其构造过程是以质心C和半径r分割样本空间，每个节点是一个超球体。</code></pre><p> ‘kd_tree’ 构造kd树存储数据以便对其进行快速检索的树形数据结构，kd树也就是数据结构中的二叉树。以中值切分构造的树，每个结点是一个超矩形，在维数小于20时效率高。<br> ‘brute’ 使用暴力搜索.也就是线性扫描，当训练集很大时，计算非常耗时<br> ‘auto’ 会基于传入fit方法的内容，选择最合适的算法。 </p></li><li><pre><code>leaf_size（叶子数量）: int, 可选参数(默认为 30) 传入BallTree或者KDTree算法的叶子数量。此参数会影响构建、查询BallTree或者KDTree的速度，以及存储BallTree或者KDTree所需要的内存大小。 此可选参数根据是否是问题所需选择性使用。 </code></pre></li><li><pre><code>p: integer, 可选参数(默认为 2)</code></pre></li></ul><p> </p><p>用于Minkowski metric（闵可夫斯基空间）的超参数。p &#x3D; 1, 相当于使用曼哈顿距离 (l1)，p &#x3D;         2, 相当于使用欧几里得距离(l2) 对于任何 p ，使用的是闵可夫斯基空间(l_p)</p><ul><li>metric（矩阵）: string or callable, 默认为 ‘minkowski’</li></ul><p>用于树的距离矩阵。默认为闵可夫斯基空间，如果和p&#x3D;2一块使用相当于使用标准欧几里得矩阵. 所有可用的矩阵列表请查询 DistanceMetric 的文档。</p><ul><li>metric_params（矩阵参数）: dict, 可选参数(默认为 None)</li></ul><p>给矩阵方法使用的其他的关键词参数。</p><ul><li>n_jobs: int, 可选参数(默认为 1)</li></ul><p>用于搜索邻居的，可并行运行的任务数量。如果为-1, 任务数量设置为CPU核的数量。不会影响fit方法。</p><table><thead><tr><th>方法名</th><th>含义</th></tr></thead></table><table><thead><tr><th>fit(X, y)</th><th>使用X作为训练数据，y作为目标值（类似于标签）来拟合模型。</th></tr></thead></table><table><thead><tr><th>get_params([deep])</th><th>获取估值器的参数。</th></tr></thead></table><table><thead><tr><th>kneighbors([X, n_neighbors, return_distance])</th><th>查找一个或几个点的K个邻居。</th></tr></thead></table><table><thead><tr><th>kneighbors_graph([X, n_neighbors, mode])</th><th>计算在X数组中每个点的k邻居的（权重）图。</th></tr></thead></table><table><thead><tr><th>predict(X)</th><th>给提供的数据预测对应的标签。</th></tr></thead></table><table><thead><tr><th>predict_proba(X)</th><th>返回测试数据X的概率估值。</th></tr></thead></table><table><thead><tr><th>score(X, y[, sample_weight])</th><th>返回给定测试数据和标签的平均准确值。</th></tr></thead></table><table><thead><tr><th>set_params(**params)</th><th>设置估值器的参数。</th></tr></thead></table><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>卷积神经网络、BP神经网络，机器学习，深度学习，神经网络功能越来越强大。让人看到未来强人工智能的希望——即机器有自己的思维。当然，这还比较遥远。“人工智能”，先有人工才有智能，正因为人工收集采集成千上万的数据，才能训练好一个比较可靠的模型。真正机器完全有自己的思维可能还遥遥无期。好啦，今天的分享就到这里啦！欢迎感兴趣的小伙伴评论区留言哦！ </p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文解决Opencv四大经典算子——sobel算子、scharr算子、laplacian算子、canny算子</title>
      <link href="/2023/08/21/%E4%B8%80%E6%96%87%E8%A7%A3%E5%86%B3Opencv%E5%9B%9B%E5%A4%A7%E7%BB%8F%E5%85%B8%E7%AE%97%E5%AD%90%E2%80%94%E2%80%94sobel%E7%AE%97%E5%AD%90%E3%80%81scharr%E7%AE%97%E5%AD%90%E3%80%81laplacian%E7%AE%97%E5%AD%90%E3%80%81canny%E7%AE%97%E5%AD%90/"/>
      <url>/2023/08/21/%E4%B8%80%E6%96%87%E8%A7%A3%E5%86%B3Opencv%E5%9B%9B%E5%A4%A7%E7%BB%8F%E5%85%B8%E7%AE%97%E5%AD%90%E2%80%94%E2%80%94sobel%E7%AE%97%E5%AD%90%E3%80%81scharr%E7%AE%97%E5%AD%90%E3%80%81laplacian%E7%AE%97%E5%AD%90%E3%80%81canny%E7%AE%97%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://img-blog.csdnimg.cn/8375dd696fbe48dcb75cd0974920ca27.jpeg#pic_center" alt="在这里插入图片描述"><br>@<a href="Opencv%E5%9B%9B%E5%A4%A7%E7%AE%97%E5%AD%90">toc</a><br><font color=#A2CDsA size=5><strong>边缘是像素值发生跃迁的位置，是图像的显著特征之一，在图像特征提取，对象检测，模式识别等方面都有重要的作用!</strong></font></p><h1 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a>Sobel算子</h1><p>sobel算子对图像求一阶导数。一阶导数越大，说明像素在该方向的变化越大，边缘信号越强。因为图像的灰度值都是离散的数字, <strong>sobel算子采用离散差分算子计算图像像素点亮度值的近似梯度.</strong><br><img src="https://img-blog.csdnimg.cn/66128c26e8e7472595f9ea84cc060262.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d30d215f6e4245c1af1bdaf0fb69aac6.png" alt="在这里插入图片描述"><br>soble x轴和y轴要分别计算,计算完用add添加在一起<br><strong>cv2.soble(image, ddepth,dx,dy，ksize)</strong></p><ul><li>image:需要处理的图片</li><li>ddepth: 输出图像的深度（可以理解为数据类型），-1表示与原图像相同的深度。</li><li>dx：0即为不计算，1即为计算</li><li>dy：同dy，0即为不计算，1即为计算。</li><li>ksize：卷积核的大小，为一个整数</li></ul><p>值得注意的是ddepth在函数使用的时候经常会规定为cv2.CV_64F,与变化为绝对值函数cv2.convertScaleAbs一起配套使用。因为默认为-1的话，如果出现卷积核所在区域，左边为黑，右边为白，则会出现负数，opencv默认会进行截断操作，影响轮廓的显示。所有用cv2.CV_64F保留负数的像素 <strong>(如果此时直接imshow显示仍然会出现截断为0的情况)</strong>  ，再用cv2.convertScaleAbs转化为正数，这样才能够保证算子的准确性。接下来我们比较ddepth为-1和cv2.CV_64F然后转化为绝对值这两种情况。<br><strong>首先是默认-1的情况</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv计算机视觉 </span></span><br><span class="line"><span class="string">@File    ：12.sobel算子中ddepth为-1.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/29 19:04 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;za.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># sobel算子</span></span><br><span class="line"><span class="comment"># 计算x方向，-1表示与输入图像的深度一致</span></span><br><span class="line">dx = cv2.Sobel(image,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,ksize = <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 计算y方向</span></span><br><span class="line">dy = cv2.Sobel(image,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,ksize = <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 将两个方向加在一起，addWeighted方法</span></span><br><span class="line">sobel_img = cv2.addWeighted(dx,<span class="number">0.5</span>,dy,<span class="number">0.5</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;sobel_dx_dy&quot;</span>,np.hstack((dx,dy)))</span><br><span class="line">cv2.imwrite(<span class="string">&quot;sobel_dx_dy.jpg&quot;</span>,np.hstack((dx,dy)))</span><br><span class="line">cv2.imshow(<span class="string">&quot;sobel_img_1&quot;</span>,np.hstack((image,sobel_img)))</span><br><span class="line">cv2.imwrite(<span class="string">&quot;sobel_img_1.jpg&quot;</span>,np.hstack((image,sobel_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0b1da5192a944fdca7cff4b98c37611d.jpeg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9e65f5ffc150457492e3b8eccff88fb9.jpeg#pic_center" alt="在这里插入图片描述"></p><p>上面左上是dx方向计算的结果，基本上都为竖直方向的轮廓。右上为dy方向计算的结果，基本上都为水平方向的轮廓。左下为原图，右下即为ddepth设置为-1时的边缘检测效果，基本的轮廓已经能够看出来了，但是中间有些地方还是没能检测出来。<br><strong>ddepth设置为CV_64F：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv计算机视觉 </span></span><br><span class="line"><span class="string">@File    ：13.sobel算子中ddepth为cv2.CV_64F.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/29 19:39 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;za.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># sobel算子</span></span><br><span class="line"><span class="comment"># 计算x方向，cv2.CV_64F表示保留计算过程中的负数</span></span><br><span class="line">dx = cv2.Sobel(image,cv2.CV_64F,<span class="number">1</span>,<span class="number">0</span>,ksize = <span class="number">3</span>)</span><br><span class="line">dx = cv2.convertScaleAbs(dx)</span><br><span class="line"><span class="comment"># 计算y方向</span></span><br><span class="line">dy = cv2.Sobel(image,cv2.CV_64F,<span class="number">0</span>,<span class="number">1</span>,ksize = <span class="number">3</span>)</span><br><span class="line">dy = cv2.convertScaleAbs(dy)</span><br><span class="line"><span class="comment"># 将两个方向加在一起，add方法</span></span><br><span class="line">sobel_img = cv2.addWeighted(dx,<span class="number">0.5</span>,dy,<span class="number">0.5</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;sobel_img&quot;</span>,np.hstack((image,sobel_img)))</span><br><span class="line">cv2.imshow(<span class="string">&quot;sobel_dx_dy_64&quot;</span>,np.hstack((dx,dy)))</span><br><span class="line"><span class="comment">#保存图片</span></span><br><span class="line">cv2.imwrite(<span class="string">&quot;sobel_img_64.jpg&quot;</span>,np.hstack((image,sobel_img)))</span><br><span class="line">cv2.imwrite(<span class="string">&quot;sobel_dx_dy_64.jpg&quot;</span>,np.hstack((dx,dy)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bd425edbaa754a1882d74edcd5c8b0bf.jpeg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5877e95e60304f4c8f6de9da49a9318e.jpeg#pic_center" alt="在这里插入图片描述"><br>同样，左上为dx方向，右上为dy方向，左下为原图，右下为ddepth设置为CV_64F时的检测效果，可以看到检测效果比上面好很多，所有的边界轮廓都检测出来了，而且很清晰。实践证明CV_64F比-1的检测效果要更好。那么相信会有同学提问了：为什么要分开计算dx，dy，sobel算子计算时直接都设置为1，一起计算不是更省事吗？<br><strong>我们一起看下分开计算dx，dy和一起计算dx，dy的对比效果</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv计算机视觉 </span></span><br><span class="line"><span class="string">@File    ：14.sobel算子合并运算与分开运算对比.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/29 19:50 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;za.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># sobel算子</span></span><br><span class="line"><span class="comment"># 计算x方向，cv2.CV_64F表示保留计算过程中的负数</span></span><br><span class="line">dx = cv2.Sobel(image,cv2.CV_64F,<span class="number">1</span>,<span class="number">0</span>,ksize = <span class="number">3</span>)</span><br><span class="line">dx = cv2.convertScaleAbs(dx)</span><br><span class="line"><span class="comment"># 计算y方向</span></span><br><span class="line">dy = cv2.Sobel(image,cv2.CV_64F,<span class="number">0</span>,<span class="number">1</span>,ksize = <span class="number">3</span>)</span><br><span class="line">dy = cv2.convertScaleAbs(dy)</span><br><span class="line"><span class="comment"># 分别计算dx dy得到的图像</span></span><br><span class="line">apart_sobel = cv2.addWeighted(dx,<span class="number">0.5</span>,dy,<span class="number">0.5</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 一起计算dx dy得到的图像</span></span><br><span class="line">all_sobel= cv2.Sobel(image,cv2.CV_64F,<span class="number">1</span>,<span class="number">1</span>,ksize = <span class="number">3</span>)</span><br><span class="line">all_sobel = cv2.convertScaleAbs(all_sobel)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;contrast_img&quot;</span>,np.hstack((apart_sobel,all_sobel)))</span><br><span class="line"><span class="comment">#保存图片</span></span><br><span class="line">cv2.imwrite(<span class="string">&quot;contrast_img.jpg&quot;</span>,np.hstack((apart_sobel,all_sobel)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5e9dc622d1f845e18f8165de59313c6d.jpeg#pic_center" alt="在这里插入图片描述"><br>左侧为分开计算dxdy时的图片，轮廓非常清楚。右侧是一起计算，不仅会有轮廓的确实，而且有重影的感觉。所以在是用Sobel算子时，建议还是设置ddepth&#x3D;cv2.CV_64F，再使用cv2.convertScaleAbs()取绝对值，这样的检测效果更好。</p><h1 id="Scharr算子"><a href="#Scharr算子" class="headerlink" title="Scharr算子"></a>Scharr算子</h1><p> 在Opencv中直接提供了Scharr调用的API：cv2.Scharr()<br> <strong>cv2.Scharr()</strong> :<img src="https://img-blog.csdnimg.cn/114a86605ec84caba68a14cdfff088c2.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv计算机视觉 </span></span><br><span class="line"><span class="string">@File    ：15.Scharr算子.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/29 20:09 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;za.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># scharr算子</span></span><br><span class="line"><span class="comment"># 计算x方向</span></span><br><span class="line">dx = cv2.Scharr(image,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 计算y方向</span></span><br><span class="line">dy = cv2.Scharr(image,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 将两个方向加在一起，addWeighted方法</span></span><br><span class="line">scharr_img = cv2.addWeighted(dx,<span class="number">0.5</span>,dy,<span class="number">0.5</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;scharr_img&quot;</span>,np.hstack((image,scharr_img)))</span><br><span class="line">cv2.imwrite(<span class="string">&quot;scharr.jpg&quot;</span>,np.hstack((image,scharr_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9e23ef8cd1b9440fb98048daef35e5e9.jpeg#pic_center" alt="在这里插入图片描述"><br>和之前的sobel算子ddepth设置为-1时非常相似，在这里就不过多介绍。</p><h1 id="laplacian算子"><a href="#laplacian算子" class="headerlink" title="laplacian算子"></a>laplacian算子</h1><p>laplacian算子又称为拉普拉斯算子，在opencv中的API为cv2.Laplacian(),注意大小写。<br><strong>cv2.Laplacian()</strong><br><img src="https://img-blog.csdnimg.cn/93a1efeab5ce4c33826fbb5980ff1642.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e7b76b687dfd4a8a8b67c13be6a13e68.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv计算机视觉 </span></span><br><span class="line"><span class="string">@File    ：16.Laplacian算子.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/29 20:14 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;za.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 拉普拉斯算子</span></span><br><span class="line">lap_image = cv2.Laplacian(image,-<span class="number">1</span>,ksize = <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;lap_image&quot;</span>,np.hstack((image,lap_image)))</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">cv2.imwrite(<span class="string">&quot;lap_image.jpg&quot;</span>,np.hstack((image,lap_image)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c90970c49cb647bb836dfd28d3e37d45.jpeg#pic_center" alt="在这里插入图片描述"><br>虽然代码很简单，但是效果确非常好！轮廓非常清晰！</p><h1 id="canny算子"><a href="#canny算子" class="headerlink" title="canny算子"></a>canny算子</h1><p>canny算子称得上是最经典且强大的算子，其主要步骤如下：</p><ol><li><pre><code>   使用高斯滤波器，以平滑图像，滤除噪声。</code></pre></li><li><pre><code>   计算图像中每个像素点的梯度强度和方向。</code></pre></li><li><pre><code>   应用非极大值（Non-Maximum Suppression）抑制，以消除边缘检测带来的杂散响应。</code></pre></li><li><pre><code>   应用双阈值（Double-Threshold）检测来确定真实的和潜在的边缘。</code></pre></li><li><pre><code>   通过抑制孤立的弱边缘最终完成边缘检测。</code></pre></li></ol><p><img src="https://img-blog.csdnimg.cn/70904563b645496aba7ff27ee118fde6.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ad679fee516d4a5b81b61c4f3c8920ba.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/54a557971f114a16a10e7376cb8b895d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7f51a6ad2c6742af9248a5eab91655f1.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cb9d611449c74b999aaa1bde7172ddf8.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv计算机视觉 </span></span><br><span class="line"><span class="string">@File    ：17.canny算子.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/29 20:23 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;za.jpg&quot;</span>,cv2.IMREAD_GRAYSCALE)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># canny</span></span><br><span class="line">v1=cv2.Canny(image,<span class="number">50</span>,<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;canny_image&quot;</span>,np.hstack((image,v1)))</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">cv2.imwrite(<span class="string">&quot;canny_image.jpg&quot;</span>,np.hstack((image,v1)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/507ad256873d49258b62cc73cdfac1b9.jpeg#pic_center" alt="在这里插入图片描述"><br>从上图可以看出来，canny算子而是非常的清楚，能够很好的完成任务！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>本篇博客详细介绍了Opencv四大经典算子——sobel算子、scharr算子、laplacian算子、canny算子，通过实际的图片轮廓检测对不同算子的检测效果进行评估。</strong>虽然各算子名称不同，但是实际上是<strong>卷积核</strong>的使用不同，不同的卷积核会对图片产生不同的印象。卷积的存在也为计算机视觉提供了多种多样的可能性和无穷的创造性，人工智能依旧很广阔，计算机视觉的学习依旧在路上！继续加油，感兴趣的小伙伴欢迎私信博主！</p><blockquote><p>✨$\textcolor{blue}{原创不易，还希望各位大佬支持一下}$ <br/><br>👍 $\textcolor{green}{点赞，你的认可是我创作的动力！}$ <br/><br>⭐️ $\textcolor{green}{收藏，你的青睐是我努力的方向！}$ <br/><br>✏️ $\textcolor{green}{评论，你的意见是我进步的财富！}$ <br/></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年度总结——一切都在慢慢变好</title>
      <link href="/2023/08/21/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E4%B8%80%E5%88%87%E9%83%BD%E5%9C%A8%E6%85%A2%E6%85%A2%E5%8F%98%E5%A5%BD/"/>
      <url>/2023/08/21/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E4%B8%80%E5%88%87%E9%83%BD%E5%9C%A8%E6%85%A2%E6%85%A2%E5%8F%98%E5%A5%BD/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>人生天地之间，若白驹过隙，忽然而已，每个人都希望留下自己的足迹。——题记</p><h1 id="日月两盏灯，春秋一场梦。"><a href="#日月两盏灯，春秋一场梦。" class="headerlink" title="日月两盏灯，春秋一场梦。"></a><strong>日月两盏灯，春秋一场梦。</strong></h1><p>回想一年前的现在我在干什么呢？去年的寒假我刚步入大学一个学期，<strong>迷茫彷徨，怅然若失</strong>，为自己没有考上一个好学校而感到自责。大一上也很努力，每天早上都起的很早，六点不到就起床了，晚上十点图书馆关门才回宿舍，感觉和高中没什么两样，只不过高中是在教室里等老师来上课，大学是自己去不同的教室找老师上课。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688506558-470fcff9-1c2e-4649-a717-436d4b1d24a7.png#averageHue=%23896d48&clientId=ueb8950e8-f476-4&from=paste&id=ucafa102a&originHeight=1065&originWidth=1080&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1449447&status=done&style=none&taskId=u398948c4-038a-494c-86d2-9840608e650&title=" alt="image.png">编辑<br>大一上转了一次专业，进入了<strong>人工智能、机器人工程和智能制造联合培养的实验班</strong>，每天的课都很满，项目制课程也让刚步入大学的我很难适应，之前都是学习理论知识然后去考试，现在是先动手去做东西，遇到什么问题再去查资料。怎么说呢？这是学校第一年的创新吧，每天都沉浸在CAD画图，SW建模，优化方案，各种答辩的路上，学的基本上都是<strong>机械的知识</strong>，不感兴趣也学不明白。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688506253-aa795ae0-33ee-4ae6-9915-29e3d27bd8d0.png#averageHue=%23f5f3e8&clientId=ueb8950e8-f476-4&from=paste&id=u983ea8a9&originHeight=1010&originWidth=1650&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=413629&status=done&style=none&taskId=uf8c80cf2-acc0-4900-8c74-797e8d88ffc&title=" alt="image.png">编辑<br>唯一一门和编程相关的课就是<strong>C++<strong>，老师讲的很慢，难度也很大，讲到</strong>指针</strong>那里就听不懂了，然后稀里糊涂就结课了，但是那个老师给分真的很高，最后给了99分。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688506646-f11e3a7b-8301-45f4-ba78-9e681853f5b6.png#averageHue=%23948977&clientId=ueb8950e8-f476-4&from=paste&id=u06468f4a&originHeight=636&originWidth=1126&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=858094&status=done&style=none&taskId=uace31761-50a7-44f9-98b1-6f5a0282a61&title=" alt="image.png">编辑</p><h1 id="舍一朝风月，得万古长空。"><a href="#舍一朝风月，得万古长空。" class="headerlink" title="舍一朝风月，得万古长空。"></a>舍一朝风月，得万古长空。</h1><p><strong>想要学一门编程语言也是从大一上开始的</strong>，当时挑战杯开始报名，很多队伍在挑战杯群里面招募队员，很多都招募前端后端的队友，当时我都不知道说明是<strong>前后端</strong>。去年寒假，最大的事情就是学习了一门编程语言——<strong>python</strong>。因为我之后想走人工智能的方向，当时听别人说Python是人工智能的第一语言，而且比较友好，容易上手，所以学习了Python。当时是在B站上找的尚学堂的课，那个老师讲的蛮好的，我是学到了坦克大战那里，<strong>对python的基础语法也算是有所了解了</strong>。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688506466-06232117-9375-4c62-a6ca-20f0446af7fc.png#averageHue=%2311100f&clientId=ueb8950e8-f476-4&from=paste&id=ueacba9b2&originHeight=798&originWidth=1203&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=126269&status=done&style=none&taskId=u6f3ea107-a6fd-435f-b616-8ef682eb674&title=" alt="image.png">编辑<br>大一下开学也就是正式进入了2022年，开学就把寒假学的Python丢到一边了，还是在搞绩点。因为当时我的成绩是在专业的第9，当时我们专业是有60个人，保研率是25%，自己算是处在边缘，还想再往前冲一冲。每天的课真的很多，几乎没有空课，有空课也是在讨论项目制的方案。<strong>早上还是六点起床，背书看笔记，早读（我们专业真的要早读），八点上课，十二点下课，吃饭十二点半在图书馆睡一个小时，两点上课，五点四十下课，吃饭，七点上自习到十点，回寝室睡觉，第二天六点起床…<strong>参加各种比赛，社团，偶尔也会打球，忙的不亦乐乎。每天都是这样度过的。不光是我这样度过的，我们专业的每个人都是这样度过的，哈哈，真的很苦b。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688507038-f551e23f-a5c3-4213-81dd-11f4dca51931.png#averageHue=%235a625e&clientId=ueb8950e8-f476-4&from=paste&id=uc8090d21&originHeight=1706&originWidth=1280&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1925941&status=done&style=none&taskId=u95ff7a8b-c263-4117-81ca-7bcfdc793cd&title=" alt="image.png">编辑<br>在一次偶然的打球中，认识了一个大四的吴学长。我印象最资深的他当时说的“</strong>你一定要硬核</strong>”，把我内推到了创新实验室，当时的面试提问的问题答的都还可以，就是让我用Python写一个<strong>9*9乘法表</strong>我没写出来，好在还是顺利进入了实验室，成为<strong>实验室</strong>中的一员。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688507817-c5004380-851d-42f6-9e06-28b4b8480a4e.png#averageHue=%2344c8f7&clientId=ueb8950e8-f476-4&from=paste&id=u24aa349f&originHeight=1410&originWidth=1065&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=501548&status=done&style=none&taskId=uf46bbea9-9616-4016-b296-095297bcdf1&title=" alt="image.png">编辑<br>我也觉得是加入实验室改变了我的大学生活，从原来的只会追逐绩点，盲目参加各种比赛社团，慢慢的向着<strong>“硬核</strong>”的方向转变。在实验室，我遇到了一群<strong>志同道合，温馨</strong>的好朋友，每天都可以一起学习，一起开玩笑，实验室的氛围真的很好。可惜我加入实验室的时候已经快要放暑假了，没呆多久就回家了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688508218-9e889643-d51b-481c-bd7d-370eaf95eafb.png#averageHue=%23736b5d&clientId=ueb8950e8-f476-4&from=paste&id=uf5713f50&originHeight=1280&originWidth=1706&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=888583&status=done&style=none&taskId=ud2835966-24f0-418e-8024-afef5493aea&title=" alt="image.png">编辑</p><h1 id="当时明月在，曾照彩云归。"><a href="#当时明月在，曾照彩云归。" class="headerlink" title="当时明月在，曾照彩云归。"></a>当时明月在，曾照彩云归。</h1><p>7-9月，是我的暑假时期，我参加了互联网+的比赛，顺利拿到一个省金奖，还和好朋友合伙办了一个托管班，<strong>一个月的时间我们认识了很多小朋友，也算是一段很美好的回忆！</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688510109-14bfa918-e1c5-4db7-8424-070cd74395b7.png#averageHue=%23c0c4c1&clientId=ueb8950e8-f476-4&from=paste&id=ue34d9836&originHeight=1280&originWidth=2276&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=2369248&status=done&style=none&taskId=u8ae89fda-b36e-446b-8140-3b46950893b&title=" alt="image.png">编辑<br>9月回学校，我又拾起来Python，每天狂<strong>刷题</strong>，往实验室一座，戴个耳机就开始刷题，一天至少要刷50题，当然是那种很简单的，一眼就有思路的那种，目的就是<strong>巩固我的语法知识</strong>，开学初学习任务不重，<strong>刷题就是我最大的乐趣了。</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688510408-df3a95c1-50d4-49bd-afe1-4567231e44c1.png#averageHue=%2394a4a5&clientId=ueb8950e8-f476-4&from=paste&id=u977ce3d7&originHeight=1280&originWidth=1706&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1767822&status=done&style=none&taskId=uf7743199-06f7-4faf-ad22-94d123ad886&title=" alt="image.png">编辑<br>10月算是我的黄金月了，10月我参加了<strong>全国大学生数学建模获得国家二等奖</strong>，与此同时，大一学年的综测成绩也下来了，经过大一下一学期的努力，<strong>绩点已经达到了专业的第二，综测总成绩更是学院第一</strong>。在导员的鼓励下我参评了很多奖学金和荣誉称号，有评上的也有没评上的，尽力就好了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688510483-1c2de946-b60d-41bf-aa10-9a180511b9a5.png#averageHue=%23555756&clientId=ueb8950e8-f476-4&from=paste&id=u1793a588&originHeight=1466&originWidth=2839&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1617543&status=done&style=none&taskId=u868b25f2-7399-4e7a-a801-316207abf2b&title=" alt="image.png">编辑<br>也是在那时候我开始萌生了在CSDN上更文的想法，在这里要感谢一位学长——<strong>是Dream呀</strong>。他是我的引路人，帮助我解决了很多问题，无论是技术上的还是学习上的，真的很感谢他给我带来的帮助。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688509786-455df80d-b196-496d-9f5f-c50bfff6f6bb.png#averageHue=%23eabea2&clientId=ueb8950e8-f476-4&from=paste&id=u5d68f445&originHeight=919&originWidth=1915&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=288967&status=done&style=none&taskId=u85b429f1-d0eb-42e9-a2f7-81b55e6c8a3&title=" alt="image.png">编辑<br><strong>10月3日，我的第一篇博客诞生了——《基于卷积神经网络CNN的猫狗识别》</strong>，这是我第一次接触机器学习，当时是跟着B站上的教学视频一行一行代码敲出来的。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688510583-82ceb191-3383-4cc7-a3ea-f901a34c1c7e.png#averageHue=%23fefdfd&clientId=ueb8950e8-f476-4&from=paste&id=ue7ebc94c&originHeight=1018&originWidth=1807&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=273497&status=done&style=none&taskId=ua7383b2f-3309-4661-b793-dd99ac2c616&title=" alt="image.png">编辑<br>第一次知道什么是模型训练，第一次知道什么是损失等等，写完这篇博客紧接着就是<strong>项目制的答辩。</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688512051-e4a44707-604c-40e5-8c59-bafb1ed627c8.png#averageHue=%23747d81&clientId=ueb8950e8-f476-4&from=paste&id=ub1123d3a&originHeight=1080&originWidth=1439&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1057552&status=done&style=none&taskId=ud279fff3-8545-4bdb-92df-5fe58063ae1&title=" alt="image.png">编辑<br>当时我们老师教的是opencv的知识，完成的也不错，在答辩的最后我也展示了卷积神经网络的猫狗识别，想用机器学习进行项目值得任务，得到了老师的认可。从那之后，<strong>我开始我的博客之旅，也是机器学习之旅。</strong>10月一整月，<strong>也开始零零散散的接单写代码，一个月存了1300，全款买下人生中的第一台显示器，成就感满满！</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688512994-c8af7b7d-7392-4349-8826-a26cab133e87.png#averageHue=%23768280&clientId=ueb8950e8-f476-4&from=paste&id=uf066607a&originHeight=1280&originWidth=1706&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1464055&status=done&style=none&taskId=u579b9d7b-607d-4526-ad63-b15558a9f3d&title=" alt="image.png">编辑</p><h1 id="背对山河，踏清风明月。"><a href="#背对山河，踏清风明月。" class="headerlink" title="背对山河，踏清风明月。"></a>背对山河，踏清风明月。</h1><p>11月初，写了一篇<strong>Yolov5的口罩检测的项目</strong>，反响强烈，登上了热榜，给自己带来了不少粉丝，也接到了自己的第一次广告，收获一个键盘，还蛮好用的。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688513734-d7cf4c30-064d-4e7b-bf64-76629a136da7.png#averageHue=%23849780&clientId=ueb8950e8-f476-4&from=paste&id=u08ce16a4&originHeight=1600&originWidth=2133&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=2612791&status=done&style=none&taskId=u282c850e-893c-4415-9849-0e43424bef6&title=" alt="image.png">编辑<br>后来对<strong>Yolov5的兴趣更加强烈，又做了Yolov5的车牌检测，通过图像分割将车牌分割出来，并且调用百度AI对车牌进行识别。</strong>这个项目一下把我所学的基本上都串在一起了，感觉收获了很多。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688513129-6f090792-46ab-4747-994a-8a4edee7c843.png#averageHue=%238f684c&clientId=ueb8950e8-f476-4&from=paste&id=u7777be41&originHeight=865&originWidth=1223&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1310353&status=done&style=none&taskId=u3acc03da-29a7-408e-a0dc-a3f2414c9c6&title=" alt="image.png">编辑<br>11月参加了<strong>电赛</strong>，感受了通宵的快乐，但是我硬件属实是太差了，只能帮队友打打杂，最终成绩还不错，获得了市三。参加了<strong>全国大学生数学竞赛</strong>，获得了市二，应该是进不了决赛了，不过自己已经很满意了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688513512-3efe1daa-5cc1-4cdb-8a3f-e818d2c36d08.png#averageHue=%238a9089&clientId=ueb8950e8-f476-4&from=paste&id=u506af614&originHeight=1280&originWidth=1706&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1932762&status=done&style=none&taskId=uf52b8e06-36ce-4618-a417-a632a93fe97&title=" alt="image.png">编辑<br>11月13日开始学习<strong>机器学习中的数学</strong>，开始啃教材，<strong>不断更新机器学习的专栏</strong>，在分享的过程中，自己也收获了很多对一些概念掌握的更加熟练，这个专栏我也会继续做下去，希望大家能够喜欢。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688513850-4b50024e-aad3-4f29-ae55-77360011a5b0.png#averageHue=%23dfe0bc&clientId=ueb8950e8-f476-4&from=paste&id=ue04a90b7&originHeight=1072&originWidth=1944&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=406872&status=done&style=none&taskId=u19ff78f1-79c1-46a6-8ffb-9f0b0b4ae7a&title=" alt="image.png">编辑<br>12月就开始放假了，回来先是学习了<strong>算法和数据结构</strong>，对基本的查找算法，排序算法，对链表、栈、队列等数据结构有了基本的了解，也为我后面的刷题打下了基础。虽然这学期的课程也上了数据结构，但是老师是要求用C&#x2F;C++语言来编写的，搞得自己半知半懂，所以还是有必要再系统的学习一下<strong>。现在学完了，感觉还是不是很会用，后面仍然需要花时间进行专栏的学习，特别是图、树、动态规划、回溯等难点。</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688515583-1fffdf79-2d00-4e43-b51d-ea23fae4dfc0.png#averageHue=%23838677&clientId=ueb8950e8-f476-4&from=paste&id=u1cf0cd89&originHeight=1280&originWidth=1706&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1763224&status=done&style=none&taskId=u1b54574b-7967-4ed9-a277-89d2f99d071&title=" alt="image.png">编辑<br>12月的下半旬我开始搞<strong>树莓派</strong>，没错，还是为了项目制。从开始的一窍不通到能够点亮一个二极管，再到搭建环境，将整个Yolo模型跑下来，这中间遇到数不清的问题，这个探索的过程我也把它记录下来，分享在我的博客里面，希望能够给大家带来帮助。<strong>现在这学期的项目制的课程终于结束，答辩也结束了。</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688516431-0c692329-aa26-4041-9d8b-3f411edefc8e.png#averageHue=%237f8077&clientId=ueb8950e8-f476-4&from=paste&id=u80c7ccc8&originHeight=1280&originWidth=2276&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=3449274&status=done&style=none&taskId=uc8ce3601-3779-452e-b414-13e87a5c6e9&title=" alt="image.png">编辑<br>可以安心学习了，<strong>现在更新的博客主要还是机器学习的笔记，然后每天早上会日更力扣的刷题笔记。</strong>因为自己报了蓝桥杯，在年前打算一直刷力扣的题目，争取能刷到70-80道简单题，然后之后就开始刷蓝桥杯的真题和力扣的中等难度的题目，争取蓝桥杯拿个市一吧！其实拿不拿奖都是其次，<strong>算法需要一直学习</strong>，以后面试也是一个考察的重点。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688515754-7f69ac5b-1532-4920-90f9-8465670554f0.png#averageHue=%23fcfbfa&clientId=ueb8950e8-f476-4&from=paste&id=ucf0c6035&originHeight=1172&originWidth=2021&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=389903&status=done&style=none&taskId=ubd70abfd-c021-4832-ad56-8e37af97011&title=" alt="image.png">编辑</p><h1 id="若你决定灿烂，山无遮，海无拦。"><a href="#若你决定灿烂，山无遮，海无拦。" class="headerlink" title="若你决定灿烂，山无遮，海无拦。"></a>若你决定灿烂，山无遮，海无拦。</h1><p>到现在<strong>我已经更新了55篇原创的博客啦！有四千多个粉丝，人工智能领域新星创作者，这些都是对我莫大的鼓励!<strong>但我知道道阻且长，自己只是一个普通的大学生，和一些行业大佬还是没法比的。特别喜欢CSDN年度报告里面的一段话：</strong>写博客是一场厚积薄发的沉淀</strong>。真的很沉淀自己，很多东西只有写下来才不会那么轻易的遗忘，在这个过程中，你得思考怎么和别人讲清楚，我觉得这是一件很难的事情。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688516381-c72fd4f8-582d-424f-8b58-c56bd39a9cfe.png#averageHue=%23fbfaf6&clientId=ueb8950e8-f476-4&from=paste&id=ud3083b69&originHeight=984&originWidth=2005&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=496741&status=done&style=none&taskId=u87c6be70-f43d-4b5e-8be5-0957cfd6a26&title=" alt="image.png">编辑<br><strong>说说2023年的展望吧！2023年立下几个小目标：</strong></p><ul><li><pre><code>**CSDN粉丝数量达到1w** </code></pre></li><li><pre><code>**发布200+原创博客** </code></pre></li><li><pre><code>**找到一份满意的实习工作** </code></pre></li><li><pre><code>**获得国家奖学金** </code></pre></li><li><pre><code>**过六级！！！**</code></pre></li></ul><p> </p><p><strong>如果到先辈的智慧中寻找答案，他们或许会这样告诫，我们短暂的一生，广厦千间，夜眠仅需六尺；家财万贯，日食不过三餐。凛冬散尽，星河长明。这一年的口罩，365天的遇见，获得，失去，成长，释怀，完结。我与旧事归于尽，来年依旧迎花开！新的一年，继续加油！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 年度总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Opencv实战案例——模板匹配实现银行卡号识别（附详细介绍及完整代码下载地址）</title>
      <link href="/2023/08/21/Opencv%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%A8%A1%E6%9D%BF%E5%8C%B9%E9%85%8D%E5%AE%9E%E7%8E%B0%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7%E8%AF%86%E5%88%AB%EF%BC%88%E9%99%84%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/"/>
      <url>/2023/08/21/Opencv%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%A8%A1%E6%9D%BF%E5%8C%B9%E9%85%8D%E5%AE%9E%E7%8E%B0%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7%E8%AF%86%E5%88%AB%EF%BC%88%E9%99%84%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://img-blog.csdnimg.cn/e1b4bb1d8f4b4759b810f5e534492837.png" alt="在这里插入图片描述"><br>@<a href="Opencv%E7%9B%AE%E5%BD%95">toc</a></p><h1 id="1-项目意义"><a href="#1-项目意义" class="headerlink" title="1.项目意义"></a>1.项目意义</h1><p>在日常生活中，常常需要输入自己的银行卡号。银行为保证卡号的唯一性和账号的安全性，会将卡号设计偏长，<strong>对于视力不好的人群以及老人不是很友好</strong>。传统银行卡服务时的人工识别银行卡号码太过费时费力。所以银行卡号的自动识别变得越来越重要。银行卡卡号的自动识别对实现银行卡的有效管理和进行银行卡的相关服务具有重要的理论意义和实际应用价值。<font color=Crimson><strong>本项目设计了一个银行卡卡号自动识别程序，传入银行卡照片即可获取银行卡号，为生活提供了遍历。</strong></font>。程序效果如下：</p><h1 id="2-模板匹配"><a href="#2-模板匹配" class="headerlink" title="2.模板匹配"></a>2.模板匹配</h1><p>本项目中主要使用的方法为模板匹配，在opencv中也提供了API，为cv2.matchTemplate函数，现在我们一起来看一下这个函数的用法。<br><strong>cv2.matchTemplate(img,img_Temp,method)</strong></p><ul><li><p>img:传入的需要匹配的图片</p></li><li><p>img_Temp:匹配的模板</p></li><li><p>method：模板匹配的算法，主要有：</p><ul><li>平方差匹配（cv.TM_SQDIFF）：利用模板与图像之间的平方差进行匹配，最好的匹配是0，匹配越差，匹配的值越大。</li><li>相关匹配(cv.TM_CCORR):利用模板与图像间的乘法进行匹配，数值越大表示匹配程度较高，越小表示匹配效果差。</li><li>利用相关系数匹配(cv.TM_CCOEFF):利用模板与图像间的相关系数匹配，1表示完美的匹配，-1表示最差的匹配。</li><li>cv.TM_SQDIFF_NORMED</li><li>cv.TM_CCORR_NORMED</li><li>cv.TM_CCOEFF_NORMED</li></ul></li></ul><p><font color=Crimson><strong>在这里详细介绍一下我这个项目所使用的cv.TM_SQDIFF算法，这也是在模板匹配中最常用的算法，算法的公式为：</strong></font><br>$$ \sum_{x, y}[\operatorname{Img}(x, y)-\text { imgTemp }(x, y)]^2$$<br><strong>这与我们在机器学习中所提到的最小二乘法非常相似，都是先求对应位置的差，再平方变成正数，最后求和</strong>。从这个算法我们不能发现模板匹配也有一定的局限性：<font color=Crimson><strong>只能对特定的图片进行模板匹配，如果匹配目标发生旋转或大小变化那么算法失效！</strong></font><br><strong><h1>本次项目所用的模板如下：</h2></strong><img src="https://img-blog.csdnimg.cn/c591799154ce4b289d5186c55115cb88.jpeg" alt="[Alt]"></p><h1 id="3-图像二值化"><a href="#3-图像二值化" class="headerlink" title="3.图像二值化"></a>3.图像二值化</h1><blockquote><p>二值化是图像分割的一种最简单的方法。二值化可以把灰度图像转换成二值图像。把大于某个临界灰度值(阈值)的像素灰度设为灰度极大值(255)，把小于这个值的像素灰度设为灰度极小值（0），从而实现二值化，简单来说：设定一个阈值valve，对于视频信号矩阵中的每一行，从左至右比较各像素值和阈值的大小，若图像灰度值大于或等于阈值，则判定该像素对应的255；反之，小于阈值的灰度值则为0。就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果。</p></blockquote><h4><font color = #B22222>作用：去除干扰信息，方便后期的处理</font></h4>图像的二值化分为全局阈值以及自适应阈值，下面我们分别来进行讲解。<h2 id="3-1全局阈值"><a href="#3-1全局阈值" class="headerlink" title="3.1全局阈值"></a>3.1全局阈值</h2><p>全局阈值即规定一个数字，将大于这个数字的像素全部变为指定的一个数，小于这个值的变为另一个数。我们首先看API函数，然后以具体以的例子来做讲解。对应全局阈值，opencv提供的API为：<br><strong>cv2.threshold(src,thresh,maxVal,tpye)</strong></p><ul><li><p>src：输入的图片对象</p></li><li><p>thresh：阈值</p></li><li><p>maxVal：归成的最大值，归成的最小值为0，也就是黑色</p></li><li><p>tpye：cv2.THRESH_BINARY和cv2.THRESH_BINARY_INV</p><ul><li>cv2.THRESH_BINARY:<br> <img src="https://img-blog.csdnimg.cn/780677e360a44a5d8008832fc6689925.png" alt="在这里插入图片描述"></li><li>cv2.THRESH_BINARY_INV<br> <img src="https://img-blog.csdnimg.cn/3bfeb11dfe2544f69bebd0121071f727.png" alt="在这里插入图片描述"></li></ul></li></ul><h2 id="3-2全局阈值代码即效果展示"><a href="#3-2全局阈值代码即效果展示" class="headerlink" title="3.2全局阈值代码即效果展示"></a>3.2全局阈值代码即效果展示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：OpenCV识别银行卡数字 </span></span><br><span class="line"><span class="string">@File    ：test.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/14 17:17 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 转化为灰度图</span></span><br><span class="line">image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 调整图片大小</span></span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 全局阈值处理</span></span><br><span class="line">thresh,threshold_img = cv2.threshold(image,<span class="number">120</span>,<span class="number">255</span>,cv2.THRESH_BINARY)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,np.hstack((image,threshold_img)))</span><br><span class="line"><span class="comment"># cv2.imshow(&quot;image&quot;,image)</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 销毁窗口</span></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0b72013545d54636b4d9bf2eef0638e1.png" alt="在这里插入图片描述"></p><h2 id="3-3-自适应阈值"><a href="#3-3-自适应阈值" class="headerlink" title="3.3 自适应阈值"></a>3.3 自适应阈值</h2><p>自适应阈值是根据周围的像素来确定当前的像素，同样我们结合AIP来讲解其中的原理。在opencv中为我们提供了自适应阈值的函数，为<strong>cv2.adaptiveThreshold()</strong><br><strong>cv2.adapptiveThreshold(src,maxVal,adaptiveMethod,type,blockSize,C)</strong></p><ul><li><p>src:输入的图片对象</p></li><li><p>maxVal:与全局阈值一样，指规定的最大值</p></li><li><p>adaptiveMethod：着重讲解一下我们项目中所用到的cv2.ADAPTIVE_THRESH_MEAN_C<br><img src="https://img-blog.csdnimg.cn/32c6032cc27742229886d70b516e47d2.png" alt="在这里插入图片描述"></p><ul><li>cv2.ADAPTIVE_THRESH_MEAN_C取周围的像素作为判断当前像素值的依据，当blockSize为3时，即取3*3的卷积核，thresh &#x3D; 9个像素平均灰度-C，那么图上的就等于90-10&#x3D;80。这里的C即为一个常数，可以理解为偏置。此次项目中选择的tpye就是cv2.THRESH_BINARY，它的函数我们之前也提到过：<br>  <img src="https://img-blog.csdnimg.cn/4fc21b935fe64688984ff60e732cd4ef.png" alt="在这里插入图片描述"></li></ul></li><li><p>tpye：即为：cv2.THRESH_BINARY和cv2.THRESH_BINARY_INV</p></li><li><p>blockSize:领域的大小，和卷积核非常相似，对此不熟悉的可以看我之前的CNN卷积神经网络的猫狗识别这篇文章：<a href="https://blog.csdn.net/weixin_63866037/article/details/127150062">CNN卷积神经网络的猫狗识别</a></p></li></ul><h2 id="3-4自适应阈值代码即效果展示"><a href="#3-4自适应阈值代码即效果展示" class="headerlink" title="3.4自适应阈值代码即效果展示"></a>3.4自适应阈值代码即效果展示</h2><p><img src="https://img-blog.csdnimg.cn/04546fc2b7bd44cea5adc0208e9aafae.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：OpenCV识别银行卡数字 </span></span><br><span class="line"><span class="string">@File    ：全局阈值.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/14 17:17 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;cat_dog.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 转化为灰度图</span></span><br><span class="line">image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 调整图片大小</span></span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 全局阈值处理，注意有两个返回值，所以需要两个变量来接受</span></span><br><span class="line">thresh,threshold_img = cv2.threshold(image,<span class="number">120</span>,<span class="number">255</span>,cv2.THRESH_BINARY)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,np.hstack((image,threshold_img)))</span><br><span class="line"><span class="comment"># cv2.imshow(&quot;image&quot;,image)</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 销毁窗口</span></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-轮廓筛选"><a href="#4-轮廓筛选" class="headerlink" title="4.轮廓筛选"></a>4.轮廓筛选</h1><h2 id="4-1轮廓检测"><a href="#4-1轮廓检测" class="headerlink" title="4.1轮廓检测"></a>4.1轮廓检测</h2><p>我直接来看API，在opencv中也给我们提供了轮廓检测的函数，在这里多说一句，由于opencv底层是C++写的，所以很多代码命名规范与Python不同，所以在python中调用API的时候，一定要分清楚大小写。轮廓检测的函数是<strong>cv2.findContours()</strong><br><strong>cv2.findContours(image,mode,method)</strong></p><ul><li>image:传入的需要进行处理的图片</li><li>mode:轮廓检索的方式：</li></ul><p><img src="https://img-blog.csdnimg.cn/91d697c752aa4fc68d58bb64b20d1a7d.png" alt="在这里插入图片描述"></p><ul><li>method:轮廓近似方法：<br><img src="https://img-blog.csdnimg.cn/7f0ced503418421dbd4629e8c9f0b8fd.png" alt="在这里插入图片描述"></li></ul><p>在此次项目中，我们轮廓检索模式为cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE。值得注意的是，返回值有两个，我们需要的是第一个contours，第二个hierarchy对我们没什么价值，我们用一个参数接收就可以了，重要的是contours，我们后面的很多操作都要用到检测出来的轮廓列表。</p><h2 id="4-2绘制轮廓"><a href="#4-2绘制轮廓" class="headerlink" title="4.2绘制轮廓"></a>4.2绘制轮廓</h2><p>在上面检测完轮廓之后返回了一个轮廓列表，在opencv中也给我们提供了绘制轮廓的API：<strong>cv2.drawContours(image,contours,i,color,thickness)</strong></p><ul><li>image:需要绘制的图片</li><li>contours：上述检测出来的轮廓列表</li><li>i：列表中第i个轮廓，如果选-1的话即所有轮廓</li><li>color：绘制的颜色</li><li>thickness：线宽，-1即填充</li></ul><h2 id="4-3轮廓筛选代码及效果展示"><a href="#4-3轮廓筛选代码及效果展示" class="headerlink" title="4.3轮廓筛选代码及效果展示"></a>4.3轮廓筛选代码及效果展示</h2><p><img src="https://img-blog.csdnimg.cn/d7beef08e8cb46e69ab006086b4e5291.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：OpenCV识别银行卡数字 </span></span><br><span class="line"><span class="string">@File    ：轮廓检测.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/14 18:30 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;img.png&quot;</span>)</span><br><span class="line"><span class="comment"># 转化为灰度图</span></span><br><span class="line">image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 调整图片大小</span></span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line">true_img = image.copy()</span><br><span class="line"><span class="comment"># 自适应阈值处理</span></span><br><span class="line">threshold_img = cv2.adaptiveThreshold(image,<span class="number">255</span>,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,<span class="number">21</span>,-<span class="number">10</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;threshold_img&quot;</span>,threshold_img)</span><br><span class="line"><span class="comment"># 轮廓检测</span></span><br><span class="line">contours,hierarchy = cv2.findContours(threshold_img,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="built_in">print</span>(contours)</span><br><span class="line">image_draw = cv2.drawContours(image,contours,-<span class="number">1</span>,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,np.hstack((true_img,image_draw)))</span><br><span class="line"><span class="comment"># cv2.imshow(&quot;image&quot;,image_draw)</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 销毁窗口</span></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-形态学变化"><a href="#5-形态学变化" class="headerlink" title="5.形态学变化"></a>5.形态学变化</h1><h2 id="5-1腐蚀"><a href="#5-1腐蚀" class="headerlink" title="5.1腐蚀"></a>5.1腐蚀</h2><p><strong>cv2.erode(image,kernel,iterations)</strong></p><ul><li>image：需要进行操作的图片对象</li><li>kernel:领域的大小</li><li>iterations:迭代的次数</li></ul><p>腐蚀的原理很简单，就是用规定领域内像素的最小值代替当前的像素值，迭代次数就是腐蚀一边之后，是否还要腐蚀多次，腐蚀越多，图片的像素越小，图片也会越黑。</p><h2 id="5-2膨胀"><a href="#5-2膨胀" class="headerlink" title="5.2膨胀"></a>5.2膨胀</h2><p><strong>cv2.dilate(img,kernel,iterations)</strong></p><ul><li>image：需要进行操作的图片对象</li><li>kernel:领域的大小</li><li>iterations:迭代的次数</li></ul><p>膨胀的原理和腐蚀非常相似，只不过膨胀是用邻域内像素的最大值代替当前的像素值，其他的参数意义一样。</p><h2 id="5-3开运算和闭运算、礼帽和黑帽"><a href="#5-3开运算和闭运算、礼帽和黑帽" class="headerlink" title="5.3开运算和闭运算、礼帽和黑帽"></a>5.3开运算和闭运算、礼帽和黑帽</h2><p>开运算与闭运算以及下面所要介绍的礼帽黑帽所用的API的是一样的，只不是是op参数不同。<br><strong>cv2.morghologyEx(image,op,kernel)</strong></p><ul><li>cv2.MORPH_OPEN:开运算，腐蚀—&gt;膨胀</li><li>cv2.MORPH_CLOSE:闭运算，膨胀—&gt;腐蚀</li><li>cv2.MORPH_TOPHAT:礼帽，开运算减原图 得到噪声图像</li><li>cv2.MORPH_BLACKHAT:黑帽 闭运算减原图 得到图像内的孔洞<br><strong>开运算</strong>：<br>含义：先腐蚀后膨胀，去除背景（黑）中的噪声<br><strong>闭运算</strong>：<br>含义：先膨胀后腐蚀，去除背景（白）中的黑色孔洞<br><img src="https://img-blog.csdnimg.cn/6c05af865afa4c5c8c8a5d3b9339f8cd.png" alt="在这里插入图片描述"><br><strong>礼帽</strong>：<br>cv2.<br>含义：开运算与原图做差<br><strong>黑帽</strong>：<br>cv2.<br>含义：闭运算与原图做差<br><img src="https://img-blog.csdnimg.cn/632e6eed397048138bab156ceed68f4b.png" alt="在这里插入图片描述"></li></ul><h1 id="6-项目实战"><a href="#6-项目实战" class="headerlink" title="6.项目实战"></a>6.项目实战</h1><h2 id="6-1读取图片转化为灰度图"><a href="#6-1读取图片转化为灰度图" class="headerlink" title="6.1读取图片转化为灰度图"></a>6.1读取图片转化为灰度图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：OpenCV识别银行卡数字 </span></span><br><span class="line"><span class="string">@File    ：6.1导入包读取图片.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/14 19:54 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;bank_card41.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 转化为灰度图</span></span><br><span class="line">image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 调整图片大小</span></span><br><span class="line">image = cv2.resize(image,(<span class="number">4</span>*image.shape[<span class="number">1</span>],<span class="number">4</span>*image.shape[<span class="number">0</span>]))</span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 销毁窗口</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/41a9e7ce7c6b493782b7a501a41a62cd.png" alt="在这里插入图片描述"></p><h2 id="6-2自适应阈值处理"><a href="#6-2自适应阈值处理" class="headerlink" title="6.2自适应阈值处理"></a>6.2自适应阈值处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：OpenCV识别银行卡数字 </span></span><br><span class="line"><span class="string">@File    ：6.2自适应阈值处理.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/14 19:57 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;bank_card4.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 转化为灰度图</span></span><br><span class="line">image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 调整图片大小</span></span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 自适应阈值处理</span></span><br><span class="line">threshold_img = cv2.adaptiveThreshold(image,<span class="number">255</span>,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,<span class="number">21</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 取反操作</span></span><br><span class="line">thresh = cv2.bitwise_not(threshold_img)</span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,np.hstack((image,thresh)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 销毁窗口</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f4e20f63db6c4a5c8af7c05b5b2c7b5c.png" alt="在这里插入图片描述"></p><h1 id="6-3第一次寻找合适的轮廓"><a href="#6-3第一次寻找合适的轮廓" class="headerlink" title="6.3第一次寻找合适的轮廓"></a>6.3第一次寻找合适的轮廓</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：OpenCV识别银行卡数字 </span></span><br><span class="line"><span class="string">@File    ：6.3寻找合适的轮廓.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/14 19:59 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;bank_card41.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 转化为灰度图</span></span><br><span class="line">image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 调整图片大小</span></span><br><span class="line">image = cv2.resize(image,(<span class="number">4</span>*image.shape[<span class="number">1</span>],<span class="number">4</span>*image.shape[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># 自适应阈值处理</span></span><br><span class="line">threshold_img = cv2.adaptiveThreshold(image,<span class="number">255</span>,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,<span class="number">21</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 取反操作</span></span><br><span class="line">thresh = cv2.bitwise_not(threshold_img)</span><br><span class="line"><span class="comment"># 寻找合适的轮廓</span></span><br><span class="line">contours,hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="built_in">print</span>(contours)</span><br><span class="line"><span class="comment"># 判断合适的轮廓</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(contours)):</span><br><span class="line">    <span class="comment"># 根据轮廓的面积</span></span><br><span class="line">    <span class="keyword">if</span> cv2.contourArea(contours[i]) &lt; <span class="number">60</span>:</span><br><span class="line">        thresh = cv2.drawContours(thresh, contours, i, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,np.vstack((image,thresh)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 销毁窗口</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2af930092cfc49008a2bb3289a8109b6.png"></p><h2 id="6-4黑帽-腐蚀操作"><a href="#6-4黑帽-腐蚀操作" class="headerlink" title="6.4黑帽+腐蚀操作"></a>6.4黑帽+腐蚀操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：OpenCV识别银行卡数字 </span></span><br><span class="line"><span class="string">@File    ：6.4黑帽+腐蚀py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/14 20:12 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;bank_card41.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 转化为灰度图</span></span><br><span class="line">image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 调整图片大小</span></span><br><span class="line">image = cv2.resize(image,(<span class="number">4</span>*image.shape[<span class="number">1</span>],<span class="number">4</span>*image.shape[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># 自适应阈值处理</span></span><br><span class="line">threshold_img = cv2.adaptiveThreshold(image,<span class="number">255</span>,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,<span class="number">21</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 取反操作</span></span><br><span class="line">thresh = cv2.bitwise_not(threshold_img)</span><br><span class="line"><span class="comment"># 寻找合适的轮廓</span></span><br><span class="line">contours,hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="built_in">print</span>(contours)</span><br><span class="line"><span class="comment"># 判断合适的轮廓</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(contours)):</span><br><span class="line">    <span class="comment"># 根据轮廓的面积</span></span><br><span class="line">    <span class="keyword">if</span> cv2.contourArea(contours[i]) &lt; <span class="number">60</span>:</span><br><span class="line">        thresh = cv2.drawContours(thresh, contours, i, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 黑帽操作</span></span><br><span class="line">kernel = np.ones((<span class="number">15</span>,<span class="number">15</span>),dtype=np.uint8)</span><br><span class="line">blackhat = cv2.morphologyEx(thresh, cv2.MORPH_BLACKHAT, kernel)</span><br><span class="line"><span class="comment"># 腐蚀操作</span></span><br><span class="line">kernel = np.ones((<span class="number">3</span>,<span class="number">3</span>),dtype=np.uint8)</span><br><span class="line">erosion = cv2.erode(blackhat,kernel,iterations = <span class="number">1</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,np.vstack((image,erosion)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 销毁窗口</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b5397feaa1ca4b92a7ff4e8a50bb1151.png" alt="在这里插入图片描述"></p><h2 id="6-5再次寻找轮廓-膨胀操作"><a href="#6-5再次寻找轮廓-膨胀操作" class="headerlink" title="6.5再次寻找轮廓+膨胀操作"></a>6.5再次寻找轮廓+膨胀操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：OpenCV识别银行卡数字 </span></span><br><span class="line"><span class="string">@File    ：再次寻找轮廓+膨胀操作.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/14 20:21 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;bank_card41.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 转化为灰度图</span></span><br><span class="line">image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 调整图片大小</span></span><br><span class="line">image = cv2.resize(image,(<span class="number">4</span>*image.shape[<span class="number">1</span>],<span class="number">4</span>*image.shape[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># 自适应阈值处理</span></span><br><span class="line">threshold_img = cv2.adaptiveThreshold(image,<span class="number">255</span>,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,<span class="number">9</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 取反操作</span></span><br><span class="line">thresh = cv2.bitwise_not(threshold_img)</span><br><span class="line"><span class="comment"># 寻找合适的轮廓</span></span><br><span class="line">contours,hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="built_in">print</span>(contours)</span><br><span class="line"><span class="comment"># 判断合适的轮廓</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(contours)):</span><br><span class="line">    <span class="comment"># 根据轮廓的面积</span></span><br><span class="line">    <span class="keyword">if</span> cv2.contourArea(contours[i]) &lt; <span class="number">60</span>:</span><br><span class="line">        thresh = cv2.drawContours(thresh, contours, i, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 黑帽操作</span></span><br><span class="line">kernel = np.ones((<span class="number">15</span>,<span class="number">15</span>),dtype=np.uint8)</span><br><span class="line">blackhat = cv2.morphologyEx(thresh, cv2.MORPH_BLACKHAT, kernel)</span><br><span class="line"><span class="comment"># 腐蚀操作</span></span><br><span class="line">kernel = np.ones((<span class="number">3</span>,<span class="number">3</span>),dtype=np.uint8)</span><br><span class="line">erosion = cv2.erode(blackhat,kernel,iterations = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">contours, hierarchy = cv2.findContours(erosion,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(contours)):</span><br><span class="line">    x,y,w,h = cv2.boundingRect(contours[i])</span><br><span class="line">    aspect_ratio = <span class="built_in">float</span>(w)/h</span><br><span class="line">    A = <span class="built_in">float</span>(w)*h</span><br><span class="line">    <span class="keyword">if</span> A &lt; <span class="number">1800</span>:</span><br><span class="line">        erosion = cv2.drawContours(erosion, contours, i, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> aspect_ratio &gt; <span class="number">0.6</span> <span class="keyword">or</span> aspect_ratio &lt; <span class="number">0.57</span>:</span><br><span class="line">            erosion = cv2.drawContours(erosion, contours, i, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;erosion2&#x27;</span>,erosion)</span><br><span class="line"></span><br><span class="line">kernel = np.ones((<span class="number">7</span>,<span class="number">7</span>),dtype=np.uint8)</span><br><span class="line">dilation = cv2.dilate(erosion,kernel,iterations = <span class="number">1</span>)</span><br><span class="line"><span class="comment"># cv2.imshow(&#x27;dilation&#x27;,)</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,np.vstack((image,dilation)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 销毁窗口</span></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/677eda727f5a4b588c1da01f6050d766.png" alt="在这里插入图片描述"></p><h2 id="6-6-模板匹配"><a href="#6-6-模板匹配" class="headerlink" title="6.6 模板匹配"></a>6.6 模板匹配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">numTemplate = cv2.imread(<span class="string">&#x27;bankCardNumTemplate.jpg&#x27;</span>)</span><br><span class="line">numTemplate_GRAY = cv2.cvtColor(numTemplate, cv2.COLOR_BGR2GRAY)</span><br><span class="line">ret, numTemplate_GRAY = cv2.threshold(numTemplate_GRAY, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line"><span class="comment"># cv2.imshow(&#x27;thresh&#x27;,thresh)</span></span><br><span class="line"><span class="comment"># cv2.imshow(&#x27;numTemplate_GRAY&#x27;, numTemplate_GRAY)</span></span><br><span class="line">contours, hierarchy = cv2.findContours(numTemplate_GRAY, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="comment"># print(np.size(contours))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sequence_contours</span>(<span class="params">dst_Binary, method, Rect_width, Rect_height</span>):</span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;Left_to_Right&quot;</span> <span class="keyword">or</span> method == <span class="number">2</span>:</span><br><span class="line">        contours, hierarchy = cv2.findContours(dst_Binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">        n = np.size(contours)</span><br><span class="line">        RectBoxes0 = np.ones((n, <span class="number">4</span>), dtype=<span class="built_in">int</span>)</span><br><span class="line">        <span class="comment"># print(n)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            RectBoxes0[i] = cv2.boundingRect(contours[i])</span><br><span class="line">            <span class="comment"># print(RectBoxes0)</span></span><br><span class="line"></span><br><span class="line">        RectBoxes = np.ones((n, <span class="number">4</span>), dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            sequence = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">                <span class="keyword">if</span> RectBoxes0[i][<span class="number">0</span>] &gt; RectBoxes0[j][<span class="number">0</span>]:</span><br><span class="line">                    sequence = sequence + <span class="number">1</span></span><br><span class="line">            RectBoxes[sequence] = RectBoxes0[i]</span><br><span class="line"></span><br><span class="line">        RectImgBoxes = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            img = dst_Binary[RectBoxes[i, <span class="number">1</span>]:(RectBoxes[i, <span class="number">1</span>] + RectBoxes[i, <span class="number">3</span>]),</span><br><span class="line">                  RectBoxes[i, <span class="number">0</span>]:(RectBoxes[i, <span class="number">0</span>] + RectBoxes[i, <span class="number">2</span>])]</span><br><span class="line">            <span class="comment"># cv2.imshow(&#x27;number&#x27;+ str(i), img)</span></span><br><span class="line">            img = cv2.resize(img, (Rect_width, Rect_height))</span><br><span class="line">            ret, img = cv2.threshold(img, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">            RectImgBoxes[i] = img</span><br><span class="line">        <span class="comment"># print(RectBoxes)</span></span><br><span class="line">        <span class="comment"># print(np.size(RectImgBoxes))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RectBoxes, RectImgBoxes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RectBoxes_Temp, RectImgBoxes_Temp = sequence_contours(numTemplate_GRAY, method=<span class="string">&quot;Left_to_Right&quot;</span>, Rect_width=<span class="number">50</span>,</span><br><span class="line">                                                      Rect_height=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># print(RectBoxes)</span></span><br><span class="line"><span class="comment"># cv2.imshow(&#x27;numberTemp&#x27;, RectImgBoxes_Temp[3])</span></span><br><span class="line"></span><br><span class="line">RectBoxes, RectImgBoxes = sequence_contours(dilation, method=<span class="string">&quot;Left_to_Right&quot;</span>, Rect_width=<span class="number">50</span>, Rect_height=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># cv2.imshow(&#x27;numberfin&#x27;, RectImgBoxes[3])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(len(RectImgBoxes))</span></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(RectImgBoxes)):</span><br><span class="line">    score = np.zeros(<span class="built_in">len</span>(RectImgBoxes_Temp), dtype=<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(RectImgBoxes_Temp)):</span><br><span class="line">        score[j] = cv2.matchTemplate(RectImgBoxes[i], RectImgBoxes_Temp[j], cv2.TM_CCOEFF)</span><br><span class="line">    <span class="comment"># print(score)</span></span><br><span class="line">    min_val, max_val, min_indx, max_indx = cv2.minMaxLoc(score)</span><br><span class="line">    result.append(max_indx[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义添加数字到图片的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_num</span>(<span class="params">image,num_list</span>):</span><br><span class="line">    text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> num_list:</span><br><span class="line">        text += <span class="built_in">str</span>(i)</span><br><span class="line">    font = ImageFont.truetype(<span class="string">&quot;msyh.ttc&quot;</span>,<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 创建一个pillow的图片</span></span><br><span class="line">    pil_img = Image.fromarray(image)</span><br><span class="line">    <span class="comment"># 绘制图片</span></span><br><span class="line">    draw = ImageDraw.Draw(pil_img)</span><br><span class="line">    <span class="comment"># 利用draw去绘制中文</span></span><br><span class="line">    draw.text((<span class="number">0</span>, <span class="number">0</span>), text , font=font, fill=<span class="number">0</span>)  <span class="comment"># 后面的fill即颜色，RGBA</span></span><br><span class="line">    <span class="comment"># 重新变为ndarray</span></span><br><span class="line">    image = np.array(pil_img)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">image = add_num(image,result)</span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,image)</span><br><span class="line"><span class="comment"># cv2.imshow(&quot;image&quot;,np.vstack((image,dilation)))</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cc18394e72cb461f9943b839135ee55c.png" alt="在这里插入图片描述"></p><h1 id="7-完整代码"><a href="#7-完整代码" class="headerlink" title="7.完整代码"></a>7.完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：OpenCV识别银行卡数字 </span></span><br><span class="line"><span class="string">@File    ：模板匹配.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm</span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/14 20:29</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont,ImageDraw,Image</span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;bank_card41.jpg&quot;</span>)</span><br><span class="line">true_img = cv2.imread(<span class="string">&quot;bank_card4.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 转化为灰度图</span></span><br><span class="line">image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 调整图片大小</span></span><br><span class="line">image = cv2.resize(image,(<span class="number">4</span>*image.shape[<span class="number">1</span>],<span class="number">4</span>*image.shape[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># 自适应阈值处理</span></span><br><span class="line">threshold_img = cv2.adaptiveThreshold(image,<span class="number">255</span>,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,<span class="number">9</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 取反操作</span></span><br><span class="line">thresh = cv2.bitwise_not(threshold_img)</span><br><span class="line"><span class="comment"># 寻找合适的轮廓</span></span><br><span class="line">contours,hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="comment"># print(contours)</span></span><br><span class="line"><span class="comment"># 判断合适的轮廓</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(contours)):</span><br><span class="line">    <span class="comment"># 根据轮廓的面积</span></span><br><span class="line">    <span class="keyword">if</span> cv2.contourArea(contours[i]) &lt; <span class="number">60</span>:</span><br><span class="line">        thresh = cv2.drawContours(thresh, contours, i, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 黑帽操作</span></span><br><span class="line">kernel = np.ones((<span class="number">15</span>,<span class="number">15</span>),dtype=np.uint8)</span><br><span class="line">blackhat = cv2.morphologyEx(thresh, cv2.MORPH_BLACKHAT, kernel)</span><br><span class="line"><span class="comment"># 腐蚀操作</span></span><br><span class="line">kernel = np.ones((<span class="number">3</span>,<span class="number">3</span>),dtype=np.uint8)</span><br><span class="line">erosion = cv2.erode(blackhat,kernel,iterations = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">contours, hierarchy = cv2.findContours(erosion,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(contours)):</span><br><span class="line">    x,y,w,h = cv2.boundingRect(contours[i])</span><br><span class="line">    aspect_ratio = <span class="built_in">float</span>(w)/h</span><br><span class="line">    A = <span class="built_in">float</span>(w)*h</span><br><span class="line">    <span class="keyword">if</span> A &lt; <span class="number">1800</span>:</span><br><span class="line">        erosion = cv2.drawContours(erosion, contours, i, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> aspect_ratio &gt; <span class="number">0.6</span> <span class="keyword">or</span> aspect_ratio &lt; <span class="number">0.57</span>:</span><br><span class="line">            erosion = cv2.drawContours(erosion, contours, i, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="comment"># cv2.imshow(&#x27;erosion2&#x27;,erosion)</span></span><br><span class="line"></span><br><span class="line">kernel = np.ones((<span class="number">7</span>,<span class="number">7</span>),dtype=np.uint8)</span><br><span class="line">dilation = cv2.dilate(erosion,kernel,iterations = <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 模板匹配</span></span><br><span class="line">numTemplate = cv2.imread(<span class="string">&#x27;bankCardNumTemplate.jpg&#x27;</span>)</span><br><span class="line">numTemplate_GRAY = cv2.cvtColor(numTemplate, cv2.COLOR_BGR2GRAY)</span><br><span class="line">ret, numTemplate_GRAY = cv2.threshold(numTemplate_GRAY, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line"><span class="comment"># cv2.imshow(&#x27;thresh&#x27;,thresh)</span></span><br><span class="line"><span class="comment"># cv2.imshow(&#x27;numTemplate_GRAY&#x27;, numTemplate_GRAY)</span></span><br><span class="line">contours, hierarchy = cv2.findContours(numTemplate_GRAY, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="comment"># print(np.size(contours))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sequence_contours</span>(<span class="params">dst_Binary, method, Rect_width, Rect_height</span>):</span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;Left_to_Right&quot;</span> <span class="keyword">or</span> method == <span class="number">2</span>:</span><br><span class="line">        contours, hierarchy = cv2.findContours(dst_Binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">        n = np.size(contours)</span><br><span class="line">        RectBoxes0 = np.ones((n, <span class="number">4</span>), dtype=<span class="built_in">int</span>)</span><br><span class="line">        <span class="comment"># print(n)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            RectBoxes0[i] = cv2.boundingRect(contours[i])</span><br><span class="line">            <span class="comment"># print(RectBoxes0)</span></span><br><span class="line"></span><br><span class="line">        RectBoxes = np.ones((n, <span class="number">4</span>), dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            sequence = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">                <span class="keyword">if</span> RectBoxes0[i][<span class="number">0</span>] &gt; RectBoxes0[j][<span class="number">0</span>]:</span><br><span class="line">                    sequence = sequence + <span class="number">1</span></span><br><span class="line">            RectBoxes[sequence] = RectBoxes0[i]</span><br><span class="line"></span><br><span class="line">        RectImgBoxes = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            img = dst_Binary[RectBoxes[i, <span class="number">1</span>]:(RectBoxes[i, <span class="number">1</span>] + RectBoxes[i, <span class="number">3</span>]),</span><br><span class="line">                  RectBoxes[i, <span class="number">0</span>]:(RectBoxes[i, <span class="number">0</span>] + RectBoxes[i, <span class="number">2</span>])]</span><br><span class="line">            <span class="comment"># cv2.imshow(&#x27;number&#x27;+ str(i), img)</span></span><br><span class="line">            img = cv2.resize(img, (Rect_width, Rect_height))</span><br><span class="line">            ret, img = cv2.threshold(img, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">            RectImgBoxes[i] = img</span><br><span class="line">        <span class="comment"># print(RectBoxes)</span></span><br><span class="line">        <span class="comment"># print(np.size(RectImgBoxes))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RectBoxes, RectImgBoxes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RectBoxes_Temp, RectImgBoxes_Temp = sequence_contours(numTemplate_GRAY, method=<span class="string">&quot;Left_to_Right&quot;</span>, Rect_width=<span class="number">50</span>,</span><br><span class="line">                                                      Rect_height=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># print(RectBoxes)</span></span><br><span class="line"><span class="comment"># cv2.imshow(&#x27;numberTemp&#x27;, RectImgBoxes_Temp[3])</span></span><br><span class="line"></span><br><span class="line">RectBoxes, RectImgBoxes = sequence_contours(dilation, method=<span class="string">&quot;Left_to_Right&quot;</span>, Rect_width=<span class="number">50</span>, Rect_height=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># cv2.imshow(&#x27;numberfin&#x27;, RectImgBoxes[3])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(len(RectImgBoxes))</span></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(RectImgBoxes)):</span><br><span class="line">    score = np.zeros(<span class="built_in">len</span>(RectImgBoxes_Temp), dtype=<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(RectImgBoxes_Temp)):</span><br><span class="line">        score[j] = cv2.matchTemplate(RectImgBoxes[i], RectImgBoxes_Temp[j], cv2.TM_CCOEFF)</span><br><span class="line">    <span class="comment"># print(score)</span></span><br><span class="line">    min_val, max_val, min_indx, max_indx = cv2.minMaxLoc(score)</span><br><span class="line">    result.append(max_indx[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义添加数字到图片的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_num</span>(<span class="params">image,num_list</span>):</span><br><span class="line">    text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> num_list:</span><br><span class="line">        text += <span class="built_in">str</span>(i)</span><br><span class="line">    font = ImageFont.truetype(<span class="string">&quot;msyh.ttc&quot;</span>,<span class="number">40</span>)</span><br><span class="line">    <span class="comment"># 创建一个pillow的图片</span></span><br><span class="line">    pil_img = Image.fromarray(image)</span><br><span class="line">    <span class="comment"># 绘制图片</span></span><br><span class="line">    draw = ImageDraw.Draw(pil_img)</span><br><span class="line">    <span class="comment"># 利用draw去绘制中文</span></span><br><span class="line">    draw.text((<span class="number">15</span>, <span class="number">80</span>), text , font=font, fill=<span class="number">0</span>)  <span class="comment"># 后面的fill即颜色，RGBA</span></span><br><span class="line">    <span class="comment"># 重新变为ndarray</span></span><br><span class="line">    image = np.array(pil_img)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">true_img = add_num(true_img,result)</span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,true_img)</span><br><span class="line"><span class="comment"># cv2.imshow(&quot;image&quot;,np.vstack((image,dilation)))</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>附上图片和代码链接：欢迎需要的小伙伴自取链接</strong><a href="https://pan.baidu.com/s/1UeXrFjLXn3LWiDoUudW13w?pwd=3hye">https://pan.baidu.com/s/1UeXrFjLXn3LWiDoUudW13w?pwd=3hye</a><br>提取码：3hye</p><h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h1><p>识别银行卡可算是Opencv的经典项目了，尤其是模板匹配，算得上是计算机视觉的精髓所在了。通过这个案例对<strong>二值化、轮廓检测、形态学变化腐蚀膨胀、开运算闭运算、礼帽黑帽</strong>有所了解，并能够组合在一起运算，算得上有所进步。<br><strong>以此类推，模板匹配可以应用在很多项目中，关键的难点就在于怎么把图片和模板调整好，通过上述的方法以及参数的调整，可以达到这样的效果，还是需要多练习，才能真正掌握Opencv’的精髓。</strong></p><blockquote><p>✨$\textcolor{blue}{原创不易，还希望各位大佬支持一下}$ <br/><br>👍 $\textcolor{green}{点赞，你的认可是我创作的动力！}$ <br/><br>⭐️ $\textcolor{green}{收藏，你的青睐是我努力的方向！}$ <br/><br>✏️ $\textcolor{green}{评论，你的意见是我进步的财富！}$ <br/></p></blockquote><p><img src="https://img-blog.csdnimg.cn/60d94cf7d80341759c35e2248513c59c.jpeg" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloud Studio实战——热门视频Top100爬虫应用开发</title>
      <link href="/2023/08/21/Cloud-Studio%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E7%83%AD%E9%97%A8%E8%A7%86%E9%A2%91Top100%E7%88%AC%E8%99%AB%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
      <url>/2023/08/21/Cloud-Studio%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E7%83%AD%E9%97%A8%E8%A7%86%E9%A2%91Top100%E7%88%AC%E8%99%AB%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><blockquote><blockquote><p>最近<strong>Cloud Studio</strong>非常火，我也去试了一下，感觉真的非常方便！我就以Python爬取B站各区排名前一百的视频，并作可视化来给大家分享一下<strong>Cloud Studio</strong>！应用链接：<a href="https://club.cloudstudio.net/a/12018094577500160">Cloud Studio实战——B站热门视频Top100爬虫应用开发</a></p></blockquote></blockquote><p>@[TOC]</p><h1 id="一、腾讯云Cloud介绍"><a href="#一、腾讯云Cloud介绍" class="headerlink" title="一、腾讯云Cloud介绍"></a>一、腾讯云Cloud介绍</h1><p><img src="https://img-blog.csdnimg.cn/07fabc92ccee461d850004b992493a62.png" alt="在这里插入图片描述"><br>点开一个工作台，选择一个环节，即可在里面编辑代码，不用再担心本地环境不兼容的问题。腾讯云Cloud Studio是一种基于云的开发环境，可以帮助开发人员更高效地进行软件开发和协作。它提供了一个集成开发环境（IDE），可以在任何地方通过互联网访问，无需在本地安装任何软件。</p><p>腾讯云Cloud Studio的优势我总结为：</p><ol><li><p>灵活性：Cloud Studio可以在任何设备上使用，只需一个支持Web浏览器的设备即可。这使开发人员可以随时随地访问他们的开发环境，无论是在办公室、家中还是旅途中。</p></li><li><p>资源可扩展性：Cloud Studio在云端运行，可以根据需要动态调整计算和存储资源。这意味着开发人员可以根据项目需求灵活地扩展或缩减资源，而无需关注硬件设备的限制。</p></li><li><p>协作能力：Cloud Studio支持多人协作开发，多个开发人员可以在同一个开发环境中同时工作。这样可以提高团队的协作效率，减少代码冲突和合并的问题。</p></li><li><p>安全性：腾讯云提供了严格的安全措施来保护用户的数据和开发环境。Cloud Studio使用安全的传输协议，并提供数据加密和访问控制等功能，确保用户的代码和数据得到保护。</p></li><li><p>生态系统整合：Cloud Studio与腾讯云的其他服务紧密集成，如云服务器、对象存储、数据库等。这使得开发人员可以方便地使用这些服务来构建和部署应用程序。</p></li></ol><p>在我看来，腾讯云Cloud Studio提供了一个灵活、可扩展、安全和协作的开发环境，使开发人员能够更加高效地进行软件开发和协作。</p><h1 id="二、B站爬虫"><a href="#二、B站爬虫" class="headerlink" title="二、B站爬虫"></a>二、B站爬虫</h1><p><img src="https://img-blog.csdnimg.cn/d0161dfd39564080ad968b565352965e.png" alt="在这里插入图片描述"><br>B站，全称哔哩哔哩动画，是中国知名的在线视频分享平台，也是全球最大的二次元文化社区之一。B站以动画、漫画、游戏（ACG）为主题，为用户提供高质量的原创动画、弹幕评论、直播互动和社区交流等服务。作为一个年轻人喜爱的文化社区，B站汇集了大量的ACG内容创作者和粉丝，形成了独特的二次元文化氛围。通过B站，用户可以畅享各种精彩的动画作品、参与互动的直播活动，并与志同道合的人分享兴趣爱好、交流心得。</p><h2 id="2-1爬虫代码"><a href="#2-1爬虫代码" class="headerlink" title="2.1爬虫代码"></a>2.1爬虫代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import pandas as pd</span><br><span class="line">url_dict = &#123;</span><br><span class="line">&#x27;全站&#x27;: &#x27;https://api.bilibili.com/x/web-interface/ranking/v2?rid=0&amp;type=all&#x27;,</span><br><span class="line">&#x27;动画&#x27;: &#x27;https://api.bilibili.com/x/web-interface/ranking/v2?rid=1&amp;type=all&#x27;,</span><br><span class="line">&#x27;生活&#x27;: &#x27;https://api.bilibili.com/x/web-interface/ranking/v2?rid=160&amp;type=all&#x27;,</span><br><span class="line">&#x27;动物圈&#x27;: &#x27;https://api.bilibili.com/x/web-interface/ranking/v2?rid=217&amp;type=all&#x27;,</span><br><span class="line">&#x27;娱乐&#x27;: &#x27;https://api.bilibili.com/x/web-interface/ranking/v2?rid=5&amp;type=all&#x27;,</span><br><span class="line">&#x27;影视&#x27;: &#x27;https://api.bilibili.com/x/web-interface/ranking/v2?rid=181&amp;type=all&#x27;,</span><br><span class="line">&#x27;原创&#x27;: &#x27;https://api.bilibili.com/x/web-interface/ranking/v2?rid=0&amp;type=origin&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">&#x27;Accept&#x27;: &#x27;application/json, text/plain, */*&#x27;,</span><br><span class="line">&#x27;Origin&#x27;: &#x27;https://www.bilibili.com&#x27;,</span><br><span class="line">&#x27;Host&#x27;: &#x27;api.bilibili.com&#x27;,</span><br><span class="line">&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Safari/605.1.15&#x27;,</span><br><span class="line">&#x27;Accept-Language&#x27;: &#x27;zh-cn&#x27;,</span><br><span class="line">&#x27;Connection&#x27;: &#x27;keep-alive&#x27;,</span><br><span class="line">&#x27;Referer&#x27;: &#x27;https://www.bilibili.com/v/popular/rank/all&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for i in url_dict.items():</span><br><span class="line">url = i[1]  # url地址</span><br><span class="line">tab_name = i[0]  # tab页名称</span><br><span class="line">title_list = []</span><br><span class="line">play_cnt_list = []  # 播放数</span><br><span class="line">danmu_cnt_list = []  # 播放数</span><br><span class="line">coin_cnt_list = []  # 投币数</span><br><span class="line">like_cnt_list = []  # 点赞数</span><br><span class="line">dislike_cnt_list = []  # 点踩数</span><br><span class="line">share_cnt_list = []  # 分享数</span><br><span class="line">favorite_cnt_list = []  # 收藏数</span><br><span class="line">author_list = []</span><br><span class="line">score_list = []</span><br><span class="line">video_url = []</span><br><span class="line">try:</span><br><span class="line">r = requests.get(url, headers=headers)</span><br><span class="line">print(r.status_code)</span><br><span class="line"># pprint(r.content.decode(&#x27;utf-8&#x27;))</span><br><span class="line"># r.encoding = &#x27;utf-8&#x27;</span><br><span class="line"># pprint(r.json())</span><br><span class="line">json_data = r.json()</span><br><span class="line">list_data = json_data[&#x27;data&#x27;][&#x27;list&#x27;]</span><br><span class="line">for data in list_data:</span><br><span class="line">title_list.append(data[&#x27;title&#x27;])</span><br><span class="line">play_cnt_list.append(data[&#x27;stat&#x27;][&#x27;view&#x27;])</span><br><span class="line">danmu_cnt_list.append(data[&#x27;stat&#x27;][&#x27;danmaku&#x27;])</span><br><span class="line">coin_cnt_list.append(data[&#x27;stat&#x27;][&#x27;coin&#x27;])</span><br><span class="line">like_cnt_list.append(data[&#x27;stat&#x27;][&#x27;like&#x27;])</span><br><span class="line">dislike_cnt_list.append(data[&#x27;stat&#x27;][&#x27;dislike&#x27;])</span><br><span class="line">share_cnt_list.append(data[&#x27;stat&#x27;][&#x27;share&#x27;])</span><br><span class="line">favorite_cnt_list.append(data[&#x27;stat&#x27;][&#x27;favorite&#x27;])</span><br><span class="line">author_list.append(data[&#x27;owner&#x27;][&#x27;name&#x27;])</span><br><span class="line">score_list.append(data[&#x27;score&#x27;])</span><br><span class="line">video_url.append(&#x27;https://www.bilibili.com/video/&#x27; + data[&#x27;bvid&#x27;])</span><br><span class="line">print(&#x27;*&#x27; * 30)</span><br><span class="line">except Exception as e:</span><br><span class="line">print(&quot;爬取失败:&#123;&#125;&quot;.format(str(e)))</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(</span><br><span class="line">&#123;&#x27;视频标题&#x27;: title_list,</span><br><span class="line"> &#x27;视频地址&#x27;: video_url,</span><br><span class="line"> &#x27;作者&#x27;: author_list,</span><br><span class="line"> &#x27;综合得分&#x27;: score_list,</span><br><span class="line"> &#x27;播放数&#x27;: play_cnt_list,</span><br><span class="line"> &#x27;弹幕数&#x27;: danmu_cnt_list,</span><br><span class="line"> &#x27;投币数&#x27;: coin_cnt_list,</span><br><span class="line"> &#x27;点赞数&#x27;: like_cnt_list,</span><br><span class="line"> &#x27;点踩数&#x27;: dislike_cnt_list,</span><br><span class="line"> &#x27;分享数&#x27;: share_cnt_list,</span><br><span class="line"> &#x27;收藏数&#x27;: favorite_cnt_list,</span><br><span class="line"> &#125;)</span><br><span class="line">df.to_csv(&#x27;B站TOP100-&#123;&#125;.csv&#x27;.format(tab_name), encoding=&#x27;utf_8_sig&#x27;)  # utf_8_sig修复乱码问题</span><br><span class="line">print(&#x27;写入成功: &#x27; + &#x27;B站TOP100-&#123;&#125;.csv&#x27;.format(tab_name))</span><br></pre></td></tr></table></figure><h2 id="2-2爬虫结果"><a href="#2-2爬虫结果" class="headerlink" title="2.2爬虫结果"></a>2.2爬虫结果</h2><p> <img src="https://img-blog.csdnimg.cn/e46e70c82db84f638062628a005b5b45.png" alt="在这里插入图片描述"></p><p>得到的是一个总站、六个分区的热门视频内容，存储在csv文件中。一共七个csv文件。打开全站文件可以看到：<br> <img src="https://img-blog.csdnimg.cn/ceb6224bf604403e8ffed52df2fa0970.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-gPoIuupZ-1691499948735)(image-1.png)]"></p><p>csv文件中存储这当前区的视频标题，地址、作者、播放数、弹幕数、投币数等信息，可以利用这些数据进行数据处理操作。</p><h1 id="三、数据可视化部分"><a href="#三、数据可视化部分" class="headerlink" title="三、数据可视化部分"></a>三、数据可视化部分</h1><h2 id="3-1主站分析饼状图"><a href="#3-1主站分析饼状图" class="headerlink" title="3.1主站分析饼状图"></a>3.1主站分析饼状图</h2><h3 id="3-1-1主站分析饼状图代码"><a href="#3-1-1主站分析饼状图代码" class="headerlink" title="3.1.1主站分析饼状图代码"></a>3.1.1主站分析饼状图代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;]=[&#x27;SimHei&#x27;]</span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;]=False</span><br><span class="line"># 全站饼状图</span><br><span class="line">Total_station = pd.read_csv(&quot;B站TOP100-全站.csv&quot;)</span><br><span class="line">num_dic = &#123;&#125;</span><br><span class="line"># play_num = Total_station[&quot;播放数&quot;]</span><br><span class="line">barrage_num = Total_station[&quot;弹幕数&quot;]</span><br><span class="line">coin_num = Total_station[&quot;投币数&quot;]</span><br><span class="line">like_num = Total_station[&quot;点赞数&quot;]</span><br><span class="line">share_num = Total_station[&quot;分享数&quot;]</span><br><span class="line">collection_num = Total_station[&quot;收藏数&quot;]</span><br><span class="line"># num_dic[&quot;播放数&quot;] = sum(play_num)</span><br><span class="line">num_dic[&quot;弹幕数&quot;] = sum(barrage_num)</span><br><span class="line">num_dic[&quot;投币数&quot;] = sum(coin_num)</span><br><span class="line">num_dic[&quot;点赞数&quot;] = sum(like_num)</span><br><span class="line">num_dic[&quot;分享数&quot;] = sum(share_num)</span><br><span class="line">num_dic[&quot;收藏数&quot;] = sum(collection_num)</span><br><span class="line">Num = sum(num_dic.values())</span><br><span class="line"># 单个数据</span><br><span class="line">data = list(num_dic.values())</span><br><span class="line"># 数据标签</span><br><span class="line">labels = list(num_dic.keys())</span><br><span class="line"># 各区域颜色</span><br><span class="line">colors = [&#x27;green&#x27;, &#x27;orange&#x27;, &#x27;red&#x27;, &#x27;purple&#x27;, &#x27;blue&#x27;]</span><br><span class="line"># 数据计算处理</span><br><span class="line">sizes = [data[0] / Num * 100, data[1] / Num * 100, data[2] / Num * 100, data[3] / Num * 100, data[4] / Num * 100]</span><br><span class="line"># 设置突出模块偏移值</span><br><span class="line">expodes = (0, 0, 0, 0.1, 0)</span><br><span class="line"># 设置绘图属性并绘图</span><br><span class="line">plt.pie(sizes, explode=expodes, labels=labels,shadow=True,autopct=&quot;%3.1f%%&quot;, colors=colors)</span><br><span class="line">## 用于显示为一个长宽相等的饼图</span><br><span class="line">plt.axis(&#x27;equal&#x27;)</span><br><span class="line">plt.title(&quot;主站分析饼状图&quot;,fontsize=20)</span><br><span class="line"># 保存并显示</span><br><span class="line">plt.savefig(&#x27;主站分析饼状图.png&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="3-1-2主站分析饼状图结果"><a href="#3-1-2主站分析饼状图结果" class="headerlink" title="3.1.2主站分析饼状图结果"></a>3.1.2主站分析饼状图结果</h3><p> <img src="https://img-blog.csdnimg.cn/f0c80f9b81a340deb2108ea20c5bd82b.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-AoRWrJxg-1691499948737)(image-2.png)]"></p><h2 id="3-2各站对比垂直图"><a href="#3-2各站对比垂直图" class="headerlink" title="3.2各站对比垂直图"></a>3.2各站对比垂直图</h2><h3 id="3-2-1各站对比垂直图代码"><a href="#3-2-1各站对比垂直图代码" class="headerlink" title="3.2.1各站对比垂直图代码"></a>3.2.1各站对比垂直图代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;]=[&#x27;SimHei&#x27;]</span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;]=False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">all_list =[&#x27;视频标题&#x27;,&#x27;视频地址&#x27;,&#x27;作者&#x27;,&#x27;综合得分&#x27;,&#x27;播放数&#x27;,&#x27;弹幕数&#x27;,&#x27;投币数&#x27;,&#x27;点赞数&#x27;,&#x27;点踩数&#x27;,&#x27;分享数&#x27;,&#x27;收藏数&#x27;]</span><br><span class="line">all_dic = &#123;&#125;</span><br><span class="line">Total_station = pd.read_csv(&quot;B站TOP100-全站.csv&quot;)</span><br><span class="line">animal = pd.read_csv(&quot;B站TOP100-动物圈.csv&quot;)</span><br><span class="line">animation = pd.read_csv(&quot;B站TOP100-动画.csv&quot;)</span><br><span class="line">original = pd.read_csv(&quot;B站TOP100-原创.csv&quot;)</span><br><span class="line">entertainment = pd.read_csv(&quot;B站TOP100-娱乐.csv&quot;)</span><br><span class="line">film_television = pd.read_csv(&quot;B站TOP100-影视.csv&quot;)</span><br><span class="line">life = pd.read_csv(&quot;B站TOP100-生活.csv&quot;)</span><br><span class="line"># all_dic[&quot;全站&quot;] = sum(Total_station[&quot;播放数&quot;])</span><br><span class="line"># 垂直各站对比图</span><br><span class="line">all_dic[&quot;动物圈&quot;] = sum(animal[&quot;播放数&quot;])</span><br><span class="line">all_dic[&quot;动画&quot;] = sum(animation[&quot;播放数&quot;])</span><br><span class="line">all_dic[&quot;原创&quot;] = sum(original[&quot;播放数&quot;])</span><br><span class="line">all_dic[&quot;娱乐&quot;] = sum(entertainment[&quot;播放数&quot;])</span><br><span class="line">all_dic[&quot;影视&quot;] = sum(film_television[&quot;播放数&quot;])</span><br><span class="line">all_dic[&quot;生活&quot;] = sum(life[&quot;播放数&quot;])</span><br><span class="line">y1 = list(all_dic.values())</span><br><span class="line">x = np.arange(len(y1))</span><br><span class="line">plt.bar(x=x,height=y1,width=0.4)</span><br><span class="line">a = [0,1,2,3,4,5]</span><br><span class="line">labels = [&#x27;动物圈&#x27;, &#x27;动画&#x27;, &#x27;原创&#x27;, &#x27;娱乐&#x27;,&#x27;影视&#x27;,&#x27;生活&#x27;]</span><br><span class="line">plt.xticks(a,labels,rotation = 10)</span><br><span class="line">plt.xlabel(&#x27;不同区名称&#x27;,fontsize=10)</span><br><span class="line">plt.ylabel(&#x27;播放总数&#x27;,fontsize=10)</span><br><span class="line">plt.title(&quot;不同区前一百播放总数对比&quot;,fontsize=20)</span><br><span class="line">plt.savefig(&quot;垂直各站对比图.jpg&quot;, dpi=300)</span><br><span class="line"># plt.show()</span><br></pre></td></tr></table></figure><h3 id="3-2-2各站对比垂直图结果"><a href="#3-2-2各站对比垂直图结果" class="headerlink" title="3.2.2各站对比垂直图结果"></a>3.2.2各站对比垂直图结果</h3><p> <img src="https://img-blog.csdnimg.cn/112891d37be14815bd1f2fe12a435853.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Wtx4NZ8P-1691499948739)(image-3.png)]"></p><h2 id="3-3词云分析"><a href="#3-3词云分析" class="headerlink" title="3.3词云分析"></a>3.3词云分析</h2><h3 id="3-3-1词云分析代码"><a href="#3-3-1词云分析代码" class="headerlink" title="3.3.1词云分析代码"></a>3.3.1词云分析代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import wordcloud as wc</span><br><span class="line">import jieba</span><br><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import pandas as pd</span><br><span class="line">Total_station = pd.read_csv(&quot;B站TOP100-全站.csv&quot;)</span><br><span class="line">f = open(&#x27;temp.txt&#x27;,mode=&#x27;w&#x27;)</span><br><span class="line">title = Total_station[&quot;视频标题&quot;][:5:]</span><br><span class="line">author = Total_station[&quot;作者&quot;]</span><br><span class="line">for i in title:</span><br><span class="line">    f.write(i)  # write 写入</span><br><span class="line">            #关闭文件</span><br><span class="line">for i in author:</span><br><span class="line">    f.write(i)  # write 写入</span><br><span class="line">f.close()</span><br><span class="line">with open(&quot;temp.txt&quot;, mode=&quot;r&quot;, encoding=&quot;GBK&quot;) as fp:</span><br><span class="line">    content = fp.read()  # 读取文件内容</span><br><span class="line">res = jieba.lcut(content)  # 中文分词</span><br><span class="line">text = &quot; &quot;.join(res)  # 用空格连接所有的词</span><br><span class="line">mask = np.array(Image.open(&quot;背景.jpg&quot;))  # 指定词云图效果</span><br><span class="line">word_cloud = wc.WordCloud(font_path=&quot;msyh.ttc&quot;, mask=mask)  # 创建词云对象</span><br><span class="line">word_cloud.generate(text)  # 生成词语</span><br><span class="line">plt.imshow(word_cloud)  # 显示词云图</span><br><span class="line">word_cloud.to_file(&quot;词云分析.png&quot;)  # 保存成图片</span><br><span class="line">plt.show()  # 显示图片2.4.2词云分析结果</span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/21c0709eae7d4c60bf62ebe6e53e9f36.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-5R9VhJmD-1691499948741)(image-4.png)]"></p><h1 id="四、代码讲解"><a href="#四、代码讲解" class="headerlink" title="四、代码讲解"></a>四、代码讲解</h1><h2 id="4-1爬虫"><a href="#4-1爬虫" class="headerlink" title="4.1爬虫"></a>4.1爬虫</h2><ul><li>首先那么需要在那么自己电脑上安装request和pandas库，如果你们是anaconda环境的话，它应该自己自带这两个库，不用再另外安装，没有这两个库的话，要自行安装，对应教程可以上ＣＳＤＮ或者Ｂ站里面找一找，教程很多，跟着他后面做就能安装上。</li><li>ｕrl_dict &#x3D;{}是定义了一个字典，这个字典的键就是分区的名字，值就是对应的url，你也可以理解为它的网址。</li><li>Headers就是起到一个隐藏自己的作用，你在本地pycharm去爬浏览器，如果不加这个headers的话，浏览器很容易就能判断出你是一个爬虫，就把你拒之门外了。这个headers就相当于穿了一个外套，或者你也可以理解为拿到了一个浏览器认可的身份证。有了这个包装，你才可以顺利的去爬取指定的浏览器。</li><li>接下来一个for循环，ur l_dict就是我们上面定义的字典，ur l_dict.items()就是获取它的所有键和值。url即为i[1]，tab_name &#x3D; i[0]。</li><li>try – except:用于捕获异常，防止爬虫过程中出现异常，这段指令可以让程序更加健壮。</li><li>try里面的内容是整个爬虫的核心：r &#x3D; requests.get(url, headers&#x3D;headers)+ json_data &#x3D; r.json()是获取目标网站的信息，返回的是一个键和值关联的嵌套字典<img src="https://img-blog.csdnimg.cn/32d094b80aef47418d5f6388879f5c4b.png" alt="（如下图） [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-i8aZYYWG-1691499948742)(image-5.png)]"></li></ul><p> list_data &#x3D; json_data[‘data’][‘list’]是获取键为data的字典里面键为list的值，返回的是一个列表。<br> 用for循环遍历list_data，将对应数据加到对应列表中，这里涉及到的知识点是列表、字典的索引，以及嵌套字典嵌套列表的索引。<br> df &#x3D; pd.DataFrame将对应字典转化为DataFrame格式，方便之后写入csv文件中。<br> 最后利用df.to_csv将数据写入csv文件中，utf_8_sig修复乱码问题。再给个提示语句，提示写入完成。</p><h2 id="4-2主站分析饼状图"><a href="#4-2主站分析饼状图" class="headerlink" title="4.2主站分析饼状图"></a>4.2主站分析饼状图</h2><ul><li>首先通过pandas读取文件，将弹幕数、投币数、点赞数、分享数、收藏数依次用变量存储起来。</li><li>利用字典将变量与对应变量和一一对应，总和即为data &#x3D; list(num_dic.values())，数据标签为labels &#x3D; list(num_dic.keys())。在设置一个颜色列表colors &#x3D; [‘green’, ‘orange’, ‘red’, ‘purple’, ‘blue’]。</li><li>数据计算处理，即求出每一部分占总体的多少，expodes设置模块偏移量。</li><li>plt.pie是用来绘制饼图，在这个函数里面添加数据、标签、颜色等信息。</li><li>再整个图片上添加标题，最后将图片保存后显示出来。</li></ul><h2 id="4-3各站对比垂直图"><a href="#4-3各站对比垂直图" class="headerlink" title="4.3各站对比垂直图"></a>4.3各站对比垂直图</h2><ul><li>首先读取各分区的数据，提取不同分区的播放数据，求总和作为该分区的热度。</li><li>垂直对比图用plt.bar来绘制，需要两个基本参数，x和y。x即为不同分区的名称，y即为上面求的热度值。</li><li>利用plt.xlabel、plt.ylabel、plt.title分别添加x，y轴的标题和整张图片标题，最后将图片保存后显示出来。</li></ul><h2 id="4-4词云分析"><a href="#4-4词云分析" class="headerlink" title="4.4词云分析"></a>4.4词云分析</h2><ul><li><p>首先你要安装这些依赖库：<br> <img src="https://img-blog.csdnimg.cn/49778db4f54542b08bb549a8fcde26ec.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-mC3C2HfQ-1691499948743)(image-6.png)]"></p></li><li><p>同样，我们读取全站的数据，title &#x3D; Total_station[“视频标题”][:5:]读取热度排名前五的标题，author &#x3D; Total_station[“作者”]读取所有热门作者。</p></li><li><p>with open(“temp.txt”, mode&#x3D;”r”, encoding&#x3D;”GBK”) as fp:打开temp文件，如果不存在的话就新建，利用for循环将标题和作者信息输入到temp文件中，并最后关闭文件。</p></li><li><p>res &#x3D; jieba.lcut(content)利用jieba分词器进行中文分词，并用空格连接所有词。</p></li><li><p>mask &#x3D; np.array(Image.open(“背景.jpg”))指定词云图效果，之后创建词云对象，生成词语并显示词云图。</p></li><li><p>最后保存片并显示。</p></li></ul><h1 id="五、Cloud-Studio总结"><a href="#五、Cloud-Studio总结" class="headerlink" title="五、Cloud Studio总结"></a>五、Cloud Studio总结</h1><p>通过使用腾讯云Cloud Studio，我成功地开发了一个应用程序，用于爬取B站视频数据并进行可视化分析。这个应用程序具有以下几个关键特点：</p><ol><li><p>灵活性和便利性：使用Cloud Studio，我可以随时随地访问我的开发环境，无需担心设备和软件的限制。这使得开发过程更加灵活和便利。</p></li><li><p>数据爬取：通过调用B站的API接口，我能够获取到所需的视频数据，包括视频标题、播放量、点赞数等。这为后续的可视化分析提供了数据基础。</p></li><li><p>可视化分析：我使用Python的数据分析和可视化库，对爬取到的B站视频数据进行处理和分析。通过绘制图表和图形，我能够更直观地展示视频数据的趋势、热门内容和用户喜好等。</p></li><li><p>实时更新：借助Cloud Studio的云端环境，我可以定期运行我的应用程序，实时获取最新的B站视频数据并更新可视化结果。这使得我的应用程序始终保持最新和准确的数据。</p></li></ol><p>总的来说，腾讯云Cloud Studio为我提供了一个高效、灵活和安全的开发环境，使我能够成功地开发了一个爬取B站视频并可视化的应用程序。这个应用程序不仅可以帮助我更好地了解B站视频的趋势和热门内容，还可以为其他用户提供有价值的数据分析和参考。</p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yolov5+图像分割+百度AI接口——车牌实时检测识别系统</title>
      <link href="/2023/08/21/Yolov5-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2-%E7%99%BE%E5%BA%A6AI%E6%8E%A5%E5%8F%A3%E2%80%94%E2%80%94%E8%BD%A6%E7%89%8C%E5%AE%9E%E6%97%B6%E6%A3%80%E6%B5%8B%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/08/21/Yolov5-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2-%E7%99%BE%E5%BA%A6AI%E6%8E%A5%E5%8F%A3%E2%80%94%E2%80%94%E8%BD%A6%E7%89%8C%E5%AE%9E%E6%97%B6%E6%A3%80%E6%B5%8B%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>Hallo，各位小伙伴大家好呀！这两天一直在肝项目，都是关于<strong>计算机视觉</strong>方面的，所以这两天一直也没有更新（<strong>真的不是我懒</strong>）！在这个过程中我对<strong>Yolov5</strong>有了更深刻的理解，在原有的<strong>Yolov5框架</strong>上增加了<strong>图像分割</strong>功能，这样在原有的识别基础上可以将<strong>目标切割</strong>出来，再进行更为精确的识别，调用百度AI的接口，将图片上传再接受返回值，这难道不香吗？所以本篇文章以<strong>Yolov5+图像分割</strong>+<strong>调用百度AI的接口</strong>实现<strong>车牌实时监测识别</strong>的效果，识别效果非常优秀。接下来就一起来看看这篇文章吧，如果小伙伴们感兴趣也欢迎评论区或者私信交流！<br><strong>目录</strong><br><a href="#%E4%B8%80%E3%80%81Yolov5%E4%BB%8B%E7%BB%8D">一、Yolov5介绍</a><br><a href="#%E4%BA%8C%E3%80%81%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2">二、图像分割</a><br><a href="#%C2%A0%E4%B8%89%E3%80%81%E7%99%BE%E5%BA%A6AI">三、百度AI</a><br><a href="#%E5%9B%9B%E3%80%81Yolov5+%E5%9B%BE%E7%89%87%E5%88%86%E5%89%B2+%E7%99%BE%E5%BA%A6AI%E8%BD%A6%E7%89%8C%E5%AE%9E%E6%97%B6%E6%A3%80%E6%B5%8B%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F">四、Yolov5+图片分割+百度AI车牌实时检测识别系统</a><br><a href="#4.1%E6%B5%81%E7%A8%8B%E5%9B%BE">4.1流程图</a><br><a href="#4.2%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8B%E8%BD%BD">4.2数据集下载</a><br><a href="#4.3Yolov5%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83">4.3Yolov5模型训练</a><br><a href="#4.3PyQt5%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2">4.3PyQt5可视化界面</a><br><a href="#4.4opencv%E5%88%87%E5%89%B2%E5%9B%BE%E7%89%87">4.4opencv切割图片</a><br><a href="#%C2%A04.5%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6AI%E8%BF%9B%E8%A1%8C%E5%9B%BE%E7%89%87%E6%A3%80%E6%B5%8B">4.5调用百度AI进行图片检测</a><br><a href="#%E4%BA%94%E3%80%81%E6%80%BB%E7%BB%93">五、总结</a></p><hr><h1 id="一、Yolov5介绍"><a href="#一、Yolov5介绍" class="headerlink" title="一、Yolov5介绍"></a>一、Yolov5介绍</h1><p>之前有些一篇文章——《Yolov5：强大到你难以想象──新冠疫情下的口罩检测》，详细链接为 ：<a href="https://blog.csdn.net/weixin_63866037/article/details/127629146">Yolov5：强大到你难以想象──新冠疫情下的口罩检测</a>，里面有对Yolov5的简介，这两天的学习我对Yolov5的了解更加深入，在知网上查阅了不少资料，总结一下：<br><strong>YOLOv5</strong> 算法整体主要有 3 部分组成: Backbone、 Neck 和 Prediction, 以 YOLOv5s 模型为例整体算法结 构如下所示. Backbone 主要有 Conv, C3 和 SPPF 基 本网络模块组成, 其主要功能就是提取图像特征信息,** C3 模块<strong>使用残差网络结构, 可以学习到更多的特征信 息, SPPF 模块是空间金字塔池化, 也是 Backbone 网络 的输出端, 主要功能是将提取到的</strong>任意大小<strong>的特征信 息转换成固定大小的特征向量. Neck 网络采用 FPN+ PAN 的特征金字塔结构网络, 可以实现不同尺寸目标 特征信息的传递, 可以有效解决多尺度问题. Prediction 采用 3 种</strong>损失函数<strong>分别计算目标分类损失, 目标定位损失和置信度损失, 并通过</strong> NMS <strong>提高网络检测的准确 度. 模型默认输入图像尺寸大小为 640×640的 3 通道图像, 最终输出格式是 3×(5+ncls), ncls 表示目标检测分类 数量。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687916139-8423eeca-2d9d-492a-a552-2ba6a760cf90.png#averageHue=%23f3ebde&clientId=uda56138e-185e-4&from=paste&id=u83548576&originHeight=956&originWidth=1189&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=931367&status=done&style=none&taskId=u4b09e269-29c2-47fa-ad98-876d378a758&title=" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/gif/34335114/1692687914636-74b7ca44-822e-42cf-9a6d-c17915c4ad8d.gif#averageHue=%23ffffff&clientId=uda56138e-185e-4&from=paste&id=u6b0c986e&originHeight=1&originWidth=1&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=43&status=done&style=none&taskId=u0d51e7ce-ed52-4d8f-9b75-a976eba3460&title=" alt="image.png">编辑<br><strong>YOLO 算法</strong>从总体上看, 是单阶段端到端的基于 <strong>anchor-free</strong> 的检测算法. 将图片输入网络进行特征提 取与融合后, 得到检测目标的预测框位置以及类概率. 而 YOLOv5 相较前几代 YOLO 算法, 模型更小、部署 灵活且拥有更好的检测精度和速度, 适合实时目标检 测. YOLOv5 根据模型不同深度和不同特征图宽度划 分为 YOLOv5s、YOLOv5m、YOLOv5l、YOLOv5x 四个模型. 其中 YOLOv5s 是最小的模型，本文</strong>车牌检测<strong>既是用</strong>YOLOv5s**模型。</p><h1 id="二、图像分割"><a href="#二、图像分割" class="headerlink" title="二、图像分割"></a>二、图像分割</h1><p><strong>图像分割</strong>就是把<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%83%8F/773234?fromModule=lemma_inlink">图像</a>分成若干个特定的、具有独特性质的区域并提出感兴趣目标的技术和过程。它是由图像处理到图像<a href="https://baike.baidu.com/item/%E5%88%86%E6%9E%90/4327108?fromModule=lemma_inlink">分析</a>的关键步骤。现有的图像分割方法主要分以下几类：基于<a href="https://baike.baidu.com/item/%E9%98%88%E5%80%BC/7442398?fromModule=lemma_inlink">阈值</a><strong>的分割方法</strong>、<strong>基于区域的分割方法</strong>、<strong>基于边缘的分割方法</strong>以及基于特定理论的分割方法等。从数学角度来看，图像分割是将<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/5199238?fromModule=lemma_inlink">数字图像</a>划分成互不相交的区域的过程。图像分割的过程也是一个标记过程，即把属于同一区域的<a href="https://baike.baidu.com/item/%E5%83%8F%E7%B4%A0/95084?fromModule=lemma_inlink">像素</a>赋予相同的编号。<br>主要是用<strong>opencv</strong>进行矩阵切割，<br>img &#x3D; cv2.imread(‘图片.jpg’) dst &#x3D; img[num1:num2,num3:num4]  #裁剪坐标为[y0:y1, x0:x1]<br>我们看一个<strong>demo</strong>，还记得我们之前写的<strong>人脸识别算法</strong>吗？我们进行一下改进，之前的效果是：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687916278-434171d5-7817-4e52-b909-6f73f4831264.png#averageHue=%23434b44&clientId=uda56138e-185e-4&from=paste&id=u750b60f0&originHeight=800&originWidth=800&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1209991&status=done&style=none&taskId=ucf5f229d-1421-449a-b60e-e5e1fcd49e7&title=" alt="image.png">编辑 我们将代码优化一下，不仅要在原图上用红框标记出来，而且要<strong>切割</strong>出来。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face_detect_demo</span>(<span class="params">img</span>):</span><br><span class="line">    img = cv.resize(img, dsize=(<span class="number">800</span>, <span class="number">800</span>))</span><br><span class="line">    gary = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line">    face_detect = cv.CascadeClassifier(<span class="string">&quot;D:/opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml&quot;</span>)</span><br><span class="line">    face = face_detect.detectMultiScale(gary, <span class="number">1.004</span>, <span class="number">28</span>, <span class="number">0</span>, (<span class="number">40</span>, <span class="number">40</span>), (<span class="number">50</span>, <span class="number">50</span>))</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x, y, w, h <span class="keyword">in</span> face:</span><br><span class="line">        cv.rectangle(img, (x, y), (x + w, y + h), color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">225</span>), thickness=<span class="number">4</span>)</span><br><span class="line">        dst = img[y:y + h, x:x + w]</span><br><span class="line">        <span class="comment"># cv.imshow(&quot;demo&quot;,dst)</span></span><br><span class="line">        cv.imwrite(<span class="string">&quot;temp/face_&#123;0&#125;.jpg&quot;</span>.<span class="built_in">format</span>(count), dst)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    cv.imshow(<span class="string">&quot;result&quot;</span>, img)</span><br><span class="line">    <span class="comment"># img.save(&quot;result.jpg&quot;)  # 保存图片</span></span><br><span class="line">    cv.imwrite(<span class="string">r&quot;final_result.jpg&quot;</span>, img)</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;photo.jpg&quot;</span>)</span><br><span class="line">face_detect_demo(img)  <span class="comment"># 检测单个图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>) == cv.waitKey(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>检测结果如下，我们就将所有人脸分割出来啦！<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687915639-e41430b2-1f7d-422d-96da-99ff09461247.png#averageHue=%23faf7f6&clientId=uda56138e-185e-4&from=paste&id=ueae11a45&originHeight=686&originWidth=1334&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=145391&status=done&style=none&taskId=ue7670b1d-d69d-437a-8883-f34faa6cb76&title=" alt="image.png">编辑</p><h1 id="三、百度AI"><a href="#三、百度AI" class="headerlink" title="三、百度AI"></a>三、百度AI</h1><p><strong>百度智能云AR</strong>开放平台提供领先的AR技术能力与一站式平台工具，开放感知跟踪、人机交互等40+技术能力。它提供了很多技术的接口，比如说<strong>人脸识别</strong>，<strong>文字识别</strong>，<strong>语言识别</strong>等等。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687915852-141a6c92-5102-4ccc-8f41-f2238c19be01.png#averageHue=%23f6f6f6&clientId=uda56138e-185e-4&from=paste&id=u08e12628&originHeight=1207&originWidth=2082&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=407210&status=done&style=none&taskId=u45299fca-7244-47e1-857e-95e420b60c2&title=" alt="image.png">编辑 这次我们通过调用文字识别的接口，用来识别我们本地图片上的文字，详细教程可以看这位博主的：<a href="https://blog.csdn.net/Yansky58685/article/details/103680964?ops_request_misc=&request_id=&biz_id=102&utm_term=python%20%E7%99%BE%E5%BA%A6%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB%E6%8E%A5%E5%8F%A3&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-103680964.142%5Ev65%5Ejs_top,201%5Ev3%5Econtrol_2,213%5Ev2%5Et3_esquery_v3&spm=1018.2226.3001.4187">百度AI调接口教程</a>。对了，大家记得领一下<strong>百度免费送的优惠</strong>，要不然程序运行会报错，别问我怎么知道的，问就是搞了<strong>两个半小时</strong>总结出来的。这个过程可以理解为调用百度文字识别这个函数，<strong>传入本地的一张图片，它可以返回本地图片上的文字</strong>。只不过这个函数不是内置的，需要你去配置才能够使用。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试百度在线图片文本识别包</span></span><br><span class="line"><span class="comment"># 导入百度的OCR包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipOcr</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 此处填入在百度云控制台处获得的appId, apiKey, secretKey的实际值</span></span><br><span class="line">    appId, apiKey, secretKey = [<span class="string">&#x27;28509942&#x27;</span>, <span class="string">&#x27;HbB3GChFwWENkXEI7uCuNG5V&#x27;</span>, <span class="string">&#x27;IRnFhizLzlXnYFiNoq3VcyLxRHaj2dZU&#x27;</span>]</span><br><span class="line">    <span class="comment"># 创建ocr对象</span></span><br><span class="line">    ocr = AipOcr(appId, apiKey, secretKey)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/cartarget/result_1.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        img = fin.read()</span><br><span class="line">        res = ocr.basicGeneral(img)</span><br><span class="line">        <span class="built_in">print</span>(res[<span class="string">&#x27;words_result&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;words&#x27;</span>])</span><br></pre></td></tr></table></figure><p>这里的<strong>appId</strong>, <strong>apiKey</strong>, <strong>secretKey</strong>需要更换成自己的，图片检测的位置也要换成自己的。我是要下载<strong>SDK</strong>运行的，你们也可以试试别的方法。</p><h1 id="四、Yolov5-图片分割-百度AI车牌实时检测识别系统"><a href="#四、Yolov5-图片分割-百度AI车牌实时检测识别系统" class="headerlink" title="四、Yolov5+图片分割+百度AI车牌实时检测识别系统"></a>四、Yolov5+图片分割+百度AI车牌实时检测识别系统</h1><h2 id="4-1流程图"><a href="#4-1流程图" class="headerlink" title="4.1流程图"></a>4.1流程图</h2><p><strong>Visio</strong>浅浅画了一个<strong>流程图，</strong>用来表达整个项目的<strong>逻辑</strong>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687915942-9a547667-16fc-4163-8efd-5551767aaf62.png#averageHue=%23f7c9c1&clientId=uda56138e-185e-4&from=paste&id=uaf31177f&originHeight=1126&originWidth=1126&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=305625&status=done&style=none&taskId=ubbe88dbf-8c90-415c-befc-3162ea7a405&title=" alt="image.png">编辑</p><h2 id="4-2数据集下载"><a href="#4-2数据集下载" class="headerlink" title="4.2数据集下载"></a>4.2数据集下载</h2><p>首先是数据集下载，我用的是<strong>CCPD2020</strong>的数据集，CCPD2020数据集采集方法应该CCPD2019数据集类似。CCPD2020仅仅有新能源车牌图片，包含<strong>不同亮度</strong>，<strong>不同倾斜角度</strong>，<strong>不同天气环境</strong>下的车牌。CCPD2020中的图像被拆分为train&#x2F;val&#x2F;test数据集，<strong>train&#x2F;val&#x2F;test</strong>数据集中图片数分别为<strong>5769&#x2F;1001&#x2F;5006</strong>。我用的时候取了<strong>100张train</strong>，<strong>80张val</strong>和<strong>20张test</strong>。CCPD2020数据集(数据大小865.7MB)下载链接我也分享给大家，不用谢！链接：<a href="https://pan.baidu.com/s/11IgwwsCjsTRuLOnewx51lw?pwd=5rvf">https://pan.baidu.com/s/11IgwwsCjsTRuLOnewx51lw?pwd=5rvf</a> 提取码：5rvf</p><h2 id="4-3Yolov5模型训练"><a href="#4-3Yolov5模型训练" class="headerlink" title="4.3Yolov5模型训练"></a>4.3Yolov5模型训练</h2><p>然后是Yolov5模型的训练，详细代码还是看之前那篇<strong>口罩检测</strong>的文章吧，配置文件只要改这几个。</p><ol><li><p><strong>数据集的配置文件</strong>：mask_data.yaml：  </p><ol><li>修改train的路径 注意是 &#x2F;（反斜杠）</li></ol></li><li></li><li><p>修改val的路径</p></li><li></li><li><p>修改类别 nc ：1、2  names [“标签名称1”、“标签名称2”]  具体几个看你的类别有几个</p></li><li><pre><code> </code></pre></li><li><p><strong>模型配置文件</strong>： yolov5s.yaml  </p><ol><li>修改类别个数 nc：1、2</li></ol></li><li></li></ol><p>   </p><p>这里贴上检测数据，由于是用CPU跑的，考虑到时间问题，我这里仅训练了20次，用时在40min左右。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687918680-e94797bb-5653-4d25-9fb5-2fa9afbe6428.png#averageHue=%23cbd6e4&clientId=uda56138e-185e-4&from=paste&id=uc655caee&originHeight=2250&originWidth=3000&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=220295&status=done&style=none&taskId=u45c81d8b-fc3c-410e-ba81-dd10b054926&title=" alt="image.png">编辑<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687918975-43782082-64d8-4993-b616-d509a9808a47.png#averageHue=%23fcfcfc&clientId=uda56138e-185e-4&from=paste&id=ud9a5741b&originHeight=1500&originWidth=2250&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=165131&status=done&style=none&taskId=u511fc138-111c-4355-8b5f-aa7385bd179&title=" alt="image.png">编辑<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687918993-337b40a5-2b54-48cf-860d-829e4b561109.png#averageHue=%23edeef4&clientId=uda56138e-185e-4&from=paste&id=u1f9ec836&originHeight=1200&originWidth=2400&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=421158&status=done&style=none&taskId=ub37eb9ed-d8dd-4d32-9c08-118b22b06d0&title=" alt="image.png">编辑 <img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687918964-4b01c54b-fb82-4aae-a67a-f1560f3b05ef.png#averageHue=%23fcfcfc&clientId=uda56138e-185e-4&from=paste&id=u6a4bfaaa&originHeight=1500&originWidth=2250&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=148142&status=done&style=none&taskId=u4e89ce58-06e1-4bad-9537-e714834490d&title=" alt="image.png">编辑<br>可以看到，识别的精度为<strong>80%<strong>左右，还是比较可观的，通过增大</strong>epoch</strong>的值，可以调整成<strong>100</strong>，识别率达到95%是没有问题的。</p><h2 id="4-3PyQt5可视化界面"><a href="#4-3PyQt5可视化界面" class="headerlink" title="4.3PyQt5可视化界面"></a>4.3PyQt5可视化界面</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687920184-2cd72721-0373-468e-a756-3c1d70fdb97e.png#averageHue=%238f5b3e&clientId=uda56138e-185e-4&from=paste&id=uae9f6555&originHeight=854&originWidth=1204&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1127711&status=done&style=none&taskId=u1318dddd-81f6-467e-be69-c6c321bb45f&title=" alt="image.png">编辑<br>点击上传图片按钮上传图片，从本地选择一张图片。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687920751-09fe288e-df1f-42e4-81b2-29287fbd3a83.png#averageHue=%238f684c&clientId=uda56138e-185e-4&from=paste&id=u9773e6e8&originHeight=865&originWidth=1223&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1310117&status=done&style=none&taskId=u2e56c065-47d2-4145-ad5e-5f08da09f6a&title=" alt="image.png">编辑 再点击开始检测 ，调用训练好的pt模型进行识别。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687920541-a6ef02ff-6b32-405d-8d59-8f844af96709.png#averageHue=%23898975&clientId=uda56138e-185e-4&from=paste&id=u9ffc3b61&originHeight=854&originWidth=1204&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=353253&status=done&style=none&taskId=u3f0f6354-4973-4e7f-9020-e50a3b3b66e&title=" alt="image.png">编辑<br>左边为原图，右边为检测之后的图， 可以看到这辆车的车牌已经被框选出来，做了标记。</p><h2 id="4-4opencv切割图片"><a href="#4-4opencv切割图片" class="headerlink" title="4.4opencv切割图片"></a>4.4opencv切割图片</h2><p>我自定义了一个<strong>split.py</strong>，里面只有一个<strong>split</strong>函数，目的就是为了切割图片，这里是运用了封装思想。在<strong>windows.py</strong>文件中通过<strong>import</strong>导入，就可以直接运用这个函数了。以下为<strong>split.py</strong>文件内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split</span>(<span class="params">list_1,img,i</span>):</span><br><span class="line">    dst = img[<span class="built_in">int</span>(list_1[<span class="number">1</span>]):<span class="built_in">int</span>(list_1[<span class="number">3</span>]),<span class="built_in">int</span>(list_1[<span class="number">0</span>]):<span class="built_in">int</span>(list_1[<span class="number">2</span>])]  <span class="comment"># 裁剪坐标为[y0:y1, x0:x1] xyxy</span></span><br><span class="line">    cv.imwrite(<span class="string">&quot;D:/cartarget/result_&#123;0&#125;.png&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>), dst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># list_1 =[231,1391,586,1518]</span></span><br><span class="line"><span class="comment"># img = cv.imread(&#x27;train_25.jpg&#x27;)</span></span><br><span class="line"><span class="comment"># split(list_1,img,0)</span></span><br></pre></td></tr></table></figure><p>接着需要对<strong>windows.py</strong>进行修改，在检测图片<strong>detect_img</strong>函数中，添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tem_list = []</span><br><span class="line">                            tem_list.append(<span class="built_in">int</span>(xyxy[<span class="number">0</span>]))</span><br><span class="line">                            tem_list.append(<span class="built_in">int</span>(xyxy[<span class="number">1</span>]))</span><br><span class="line">                            tem_list.append(<span class="built_in">int</span>(xyxy[<span class="number">2</span>]))</span><br><span class="line">                            tem_list.append(<span class="built_in">int</span>(xyxy[<span class="number">3</span>]))</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;准备切割！&quot;</span>)</span><br><span class="line">                            split.split(tem_list, im0,count_1)</span><br><span class="line">                            count_1 += <span class="number">1</span></span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;切割完成！&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样，Yolov5检测出几个目标，就会调用几次<strong>split</strong>方法从而切割出来几张子图片，由于这里图片只有一辆车，所有只有一个检测目标，所以只会得到一个车牌。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687920523-6275e4b9-d9e6-4075-a5b4-f02bc76c4d5c.png#averageHue=%238cba8c&clientId=uda56138e-185e-4&from=paste&id=udb5a2128&originHeight=77&originWidth=214&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=38179&status=done&style=none&taskId=u043a8d3e-ff67-4479-a09c-edfcaf7dca4&title=" alt="image.png">编辑</p><h2 id="4-5调用百度AI进行图片检测"><a href="#4-5调用百度AI进行图片检测" class="headerlink" title="4.5调用百度AI进行图片检测"></a>4.5调用百度AI进行图片检测</h2><p>这个逻辑就很好理解啦！只要把上面这个图片丢给<strong>百度文字识别</strong>去识别内容就好啦！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 此处填入在百度云控制台处获得的appId, apiKey, secretKey的实际值</span></span><br><span class="line">    appId, apiKey, secretKey = [<span class="string">&#x27;28509942&#x27;</span>, <span class="string">&#x27;HbB3GChFwWENkXEI7uCuNG5V&#x27;</span>, <span class="string">&#x27;IRnFhizLzlXnYFiNoq3VcyLxRHaj2dZU&#x27;</span>]</span><br><span class="line">    <span class="comment"># 创建ocr对象</span></span><br><span class="line">    ocr = AipOcr(appId, apiKey, secretKey)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;name.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        img = fin.read()</span><br><span class="line">        res = ocr.basicGeneral(img)</span><br><span class="line">        <span class="built_in">print</span>(res[<span class="string">&#x27;words_result&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;words&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692687920650-f71e0641-d0fb-4563-8c66-f3aa86d6aaf3.png#averageHue=%23212435&clientId=uda56138e-185e-4&from=paste&id=uf7b06ec6&originHeight=183&originWidth=729&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=24301&status=done&style=none&taskId=u19da84a7-c766-4d14-9c06-a71fe6e07ca&title=" alt="image.png">编辑<br>可以看到识别完全正确！<strong>大功告成！</strong></p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>这个车牌识别系统到这里就算正式结束啦！感觉收获还是蛮多的，对<strong>Yolov5</strong>的理解更加深刻，<strong>Opencv</strong>的运用更加熟练，<strong>PyQt5</strong>也算是熟悉了。目标检测、图片分割、图像搜索、增强和特效、动作识别等等，慢慢觉得这些功能更像是一个个<strong>拼图</strong>，想要完成一个较大的工程，需要将一个个小功能拼在一起。<br>机器学习的路程还很漫长，很多知识我都未曾了解，其中的数学原理更是知之甚少。未来的学习还很漫长，人工智能的领域依然辽阔而精彩。车牌检测这个项目只是一个载体，项目本身并不重要，重要的是项目背后学到的知识，定期总结才能更好的接受知识吧！好啦，今天的分享就到这里啦！</p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python项目之学生管理系统</title>
      <link href="/2023/08/21/Python%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/08/21/Python%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><strong>目录</strong><br><a href="#%E5%BC%95%E8%A8%80">引言</a><br><a href="#%E4%B8%80%20%E3%80%81%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87">一 、学习目标</a><br><a href="#%E4%BA%8C%E3%80%81%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82">二、系统需求</a><br><a href="#%E4%B8%89%E3%80%81%E5%87%86%E5%A4%87%E7%A8%8B%E5%BA%8F%E6%96%87%E4%BB%B6">三、准备程序文件</a><br><a href="#%C2%A03.1%E5%88%86%E6%9E%90">3.1分析</a><br><a href="#3.2%E5%88%9B%E5%BB%BA%E7%A8%8B%E5%BA%8F%E6%96%87%E4%BB%B6">3.2创建程序文件</a><br><a href="#%E5%9B%9B%E3%80%81%E5%AE%9A%E4%B9%89%E5%AD%A6%E5%91%98%E7%B1%BB(student.py)">四、定义学员类(student.py)</a><br><a href="#4.1%E9%9C%80%E6%B1%82%C2%A0">4.1需求</a><br><a href="#4.2%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81">4.2程序代码</a><br><a href="#%E4%BA%94%E3%80%81%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F(managerSystem.py)">五、管理系统(managerSystem.py)</a><br><a href="#5.1%E9%9C%80%E6%B1%82">5.1需求</a><br><a href="#5.2%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6">5.2管理系统框架</a><br><a href="#5.2.1%E9%9C%80%E6%B1%82%EF%BC%9A">5.2.1需求</a><br><a href="#5.2.2%E6%AD%A5%E9%AA%A4">5.2.2步骤</a><br><a href="#5.3%E5%90%84%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0">5.3各功能的实现</a><br><a href="#5.3.1%E6%B7%BB%E5%8A%A0%E5%AD%A6%E5%91%98%E5%8A%9F%E8%83%BD">5.3.1添加学员功能</a><br><a href="#5.3.2%E5%88%A0%E9%99%A4%E5%AD%A6%E5%91%98%E5%8A%9F%E8%83%BD">5.3.2删除学员功能</a><br><a href="#5.3.3%E4%BF%AE%E6%94%B9%E5%AD%A6%E5%91%98%E5%8A%9F%E8%83%BD">5.3.3修改学员功能</a><br><a href="#5.3.4%E6%9F%A5%E8%AF%A2%E5%AD%A6%E5%91%98%E5%8A%9F%E8%83%BD">5.3.4查询学员功能</a><br><a href="#5.3.5%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E5%AD%A6%E5%91%98%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD">5.3.5显示所有学员信息功能</a><br><a href="#5.3.6%E4%BF%9D%E5%AD%98%E5%AD%A6%E5%91%98%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD">5.3.6保存学员信息功能</a><br><a href="#5.3.7%C2%A0%E5%8A%A0%E8%BD%BD%E5%AD%A6%E5%91%98%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD">5.3.7 加载学员信息功能</a><br><a href="#%E5%85%AD%E3%80%81%E7%A8%8B%E5%BA%8F%E4%B8%BB%E5%87%BD%E6%95%B0(main.py)">六、程序主函数(main.py)</a><br><a href="#%E4%B8%83%E3%80%81%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81">七、完整代码</a><br><a href="#%E5%85%AB%E3%80%81%E6%80%BB%E7%BB%93">八、总结</a></p><hr><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Hallo，大家好！首先今天是1024，程序员节快乐！看到这个标题，是不是狂喜一阵？《学生管理系统》、《图书馆管理系统》等等一系列管理系统一直是各高校大作业的热门，好消息是这篇文章可以很大程度地帮助你哦！这篇文章很早就想写了，一直因为各种事情拖拖拖（主要是因为自己懒），正好今天程序员节，用这篇文章纪念2022年10月24日，自己的第一个程序员节吧！ </p><h1 id="一-、学习目标"><a href="#一-、学习目标" class="headerlink" title="一 、学习目标"></a>一 、学习目标</h1><ul><li><p>了解面向对象开发过程中类内部功能的分析方法</p></li><li><p>了解常用的系统功能  </p><ul><li>添加</li></ul></li><li><ul><li>删除</li></ul></li><li><ul><li>修改</li></ul></li><li><ul><li>查询</li></ul></li><li></li></ul><p>   </p><hr><h1 id="二、系统需求"><a href="#二、系统需求" class="headerlink" title="二、系统需求"></a>二、系统需求</h1><p>使用面向对象编程思想完成学员管理系统的开发，具体如下：</p><ul><li><p>系统要求：学员数据存储在文件中</p></li><li><p>系统功能：添加学员、删除学员、修改学员信息、显示所有学员信息、保存学员信息及退出系统等功能</p></li></ul><h1 id="三、准备程序文件"><a href="#三、准备程序文件" class="headerlink" title="三、准备程序文件"></a>三、准备程序文件</h1><h2 id="3-1分析"><a href="#3-1分析" class="headerlink" title="3.1分析"></a>3.1分析</h2><ul><li><p>角色分析  </p><ul><li>学员</li></ul></li><li><ul><li>管理系统</li></ul></li><li><pre><code> </code></pre></li><li><p>工作中一些注意事项  </p><ul><li>为了方便维护代码，一般一个角色一个程序文件</li></ul></li><li><ul><li>项目要有主程序入口，习惯为<strong>main.py</strong></li></ul></li><li></li></ul><p>   </p><h2 id="3-2创建程序文件"><a href="#3-2创建程序文件" class="headerlink" title="3.2创建程序文件"></a>3.2创建程序文件</h2><p>创建项目目录，例如：StudentManagerSystem<br>程序文件如下：</p><ul><li><p>程序入口文件：main.py</p></li><li><p>学员文件：student.py</p></li><li><p>管理系统文件：managerSystem.py</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688357689-42180caf-0cd5-4abd-8e7f-b6b8247297e2.png#averageHue=%23272b3f&clientId=u07f38247-78d3-4&from=paste&id=u563619c0&originHeight=307&originWidth=670&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=25433&status=done&style=none&taskId=uba34aaae-ab4a-40d3-b6e1-509e05e521d&title=" alt="image.png">编辑</p><h1 id="四、定义学员类-student-py"><a href="#四、定义学员类-student-py" class="headerlink" title="四、定义学员类(student.py)"></a>四、定义学员类(student.py)</h1><h2 id="4-1需求"><a href="#4-1需求" class="headerlink" title="4.1需求"></a>4.1需求</h2><ul><li><p>学员信息包含：姓名、性别、手机号；</p></li><li><p>添加__str__魔法方法，方便查看学员对象信息</p></li></ul><h2 id="4-2程序代码"><a href="#4-2程序代码" class="headerlink" title="4.2程序代码"></a>4.2程序代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@Project ：StudentManagerSystem </span><br><span class="line">@File    ：stuednt.py</span><br><span class="line">@IDE     ：PyCharm </span><br><span class="line">@Author  ：咋</span><br><span class="line">@Date    ：2022/10/22 9:31 </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class Stuednt(object):</span><br><span class="line">    def __init__(self,name,gender,tel):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.tel = tel</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return f&quot;&#123;self.name&#125;,&#123;self.gender&#125;&quot;</span><br></pre></td></tr></table></figure><h1 id="五、管理系统-managerSystem-py"><a href="#五、管理系统-managerSystem-py" class="headerlink" title="五、管理系统(managerSystem.py)"></a>五、管理系统(managerSystem.py)</h1><h2 id="5-1需求"><a href="#5-1需求" class="headerlink" title="5.1需求"></a>5.1需求</h2><ul><li><p>存储数据的位置：文件(student.data)  </p><ul><li>加载文件数据</li></ul></li><li><ul><li>修改数据后保存到文件</li></ul></li><li><pre><code> </code></pre></li><li><p>存储数据的形式：列表存储学院对象</p></li><li><p>系统功能  </p><ul><li>添加学员</li></ul></li><li><ul><li>删除学员</li></ul></li><li><ul><li>修改学员</li></ul></li><li><ul><li>查询学员信息</li></ul></li><li><ul><li>显示所有学员信息</li></ul></li><li><ul><li>保存学员信息</li></ul></li><li><ul><li>退出系统</li></ul></li><li></li></ul><p>   </p><h2 id="5-2管理系统框架"><a href="#5-2管理系统框架" class="headerlink" title="5.2管理系统框架"></a>5.2管理系统框架</h2><h3 id="5-2-1需求"><a href="#5-2-1需求" class="headerlink" title="5.2.1需求"></a>5.2.1需求</h3><p>系统功能循环使用，用户输入不同的功能序号执行不同的功能。</p><h3 id="5-2-2步骤"><a href="#5-2-2步骤" class="headerlink" title="5.2.2步骤"></a>5.2.2步骤</h3><ul><li><pre><code>定义程序入口函数  </code></pre><ul><li>加载数据</li></ul></li><li><ul><li>显示功能菜单</li></ul></li><li><ul><li>用户输入功能序号</li></ul></li><li><ul><li>根据用户输入的功能序号执行不同的功能</li></ul></li><li><pre><code> </code></pre></li><li><p>定义系统功能函数，添加、删除学员等</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">class StudentManager(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 存储数据所用的列表</span><br><span class="line">        self.student_list = []</span><br><span class="line"></span><br><span class="line">    # 一. 程序入口函数，启动程序后执行的函数</span><br><span class="line">    def run(self):</span><br><span class="line">        # 1. 加载学员信息</span><br><span class="line">        self.load_student()</span><br><span class="line"></span><br><span class="line">        while True:</span><br><span class="line">            # 2. 显示功能菜单</span><br><span class="line">            self.show_menu()</span><br><span class="line"></span><br><span class="line">            # 3. 用户输入功能序号</span><br><span class="line">            menu_num = int(input(&#x27;请输入您需要的功能序号：&#x27;))</span><br><span class="line"></span><br><span class="line">            # 4 根据用户输入的功能序号执行不同的功能</span><br><span class="line">            if menu_num == 1:</span><br><span class="line">                # 添加学员</span><br><span class="line">                self.add_student()</span><br><span class="line">            elif menu_num == 2:</span><br><span class="line">                # 删除学员</span><br><span class="line">                self.del_student()</span><br><span class="line">            elif menu_num == 3:</span><br><span class="line">                # 修改学员信息</span><br><span class="line">                self.modify_student()</span><br><span class="line">            elif menu_num == 4:</span><br><span class="line">                # 查询学员信息</span><br><span class="line">                self.search_student()</span><br><span class="line">            elif menu_num == 5:</span><br><span class="line">                # 显示所有学员信息</span><br><span class="line">                self.show_student()</span><br><span class="line">            elif menu_num == 6:</span><br><span class="line">                # 保存学员信息</span><br><span class="line">                self.save_student()</span><br><span class="line">            elif menu_num == 7:</span><br><span class="line">                # 退出系统</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">    # 二. 定义功能函数</span><br><span class="line">    # 2.1 显示功能菜单</span><br><span class="line">    @staticmethod</span><br><span class="line">    def show_menu():</span><br><span class="line">        print(&#x27;请选择如下功能-----------------&#x27;)</span><br><span class="line">        print(&#x27;1:添加学员&#x27;)</span><br><span class="line">        print(&#x27;2:删除学员&#x27;)</span><br><span class="line">        print(&#x27;3:修改学员信息&#x27;)</span><br><span class="line">        print(&#x27;4:查询学员信息&#x27;)</span><br><span class="line">        print(&#x27;5:显示所有学员信息&#x27;)</span><br><span class="line">        print(&#x27;6:保存学员信息&#x27;)</span><br><span class="line">        print(&#x27;7:退出系统&#x27;)</span><br><span class="line"></span><br><span class="line">    # 2.2 添加学员</span><br><span class="line">    def add_student(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # 2.3 删除学员</span><br><span class="line">    def del_student(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # 2.4 修改学员信息</span><br><span class="line">    def modify_student(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # 2.5 查询学员信息</span><br><span class="line">    def search_student(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # 2.6 显示所有学员信息</span><br><span class="line">    def show_student(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # 2.7 保存学员信息</span><br><span class="line">    def save_student(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # 2.8 加载学员信息</span><br><span class="line">    def load_student(self):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><h2 id="5-3各功能的实现"><a href="#5-3各功能的实现" class="headerlink" title="5.3各功能的实现"></a>5.3各功能的实现</h2><h3 id="5-3-1添加学员功能"><a href="#5-3-1添加学员功能" class="headerlink" title="5.3.1添加学员功能"></a>5.3.1添加学员功能</h3><ul><li><p>需求：用户输入学员姓名、性别、手机号，将学员添加到系统</p></li><li><pre><code>步骤  </code></pre><ul><li>用户输入姓名、性别、手机号</li></ul></li><li><ul><li>创建该学员对象</li></ul></li><li><ul><li>将该学员对象添加到列表</li></ul></li><li><pre><code> </code></pre></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加学员函数内部需要创建学员对象，故先导入student模块</span></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentManager</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.2 添加学员</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_student</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 用户输入姓名、性别、手机号</span></span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的姓名：&#x27;</span>)</span><br><span class="line">        gender = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的性别：&#x27;</span>)</span><br><span class="line">        tel = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的手机号：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 创建学员对象：先导入学员模块，再创建对象</span></span><br><span class="line">        student = Student(name, gender, tel)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 将该学员对象添加到列表</span></span><br><span class="line">        self.student_list.append(student)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印信息</span></span><br><span class="line">        <span class="built_in">print</span>(self.student_list)</span><br><span class="line">        <span class="built_in">print</span>(student)</span><br></pre></td></tr></table></figure><h3 id="5-3-2删除学员功能"><a href="#5-3-2删除学员功能" class="headerlink" title="5.3.2删除学员功能"></a>5.3.2删除学员功能</h3><ul><li><p>需求：用户输入目标学员姓名，如果学员存在则删除该学员。</p></li><li><pre><code>步骤  </code></pre><ul><li>用户输入目标学员姓名</li></ul></li><li><ul><li>遍历学员数据列表，如果用户输入的学员姓名存在则删除，否则则提示该学员不存在。</li></ul></li><li><pre><code> </code></pre></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.3 删除学员：删除指定姓名的学员</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del_student</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 1. 用户输入目标学员姓名</span></span><br><span class="line">    del_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要删除的学员姓名：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 如果用户输入的目标学员存在则删除，否则提示学员不存在</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">        <span class="keyword">if</span> i.name == del_name:</span><br><span class="line">            self.student_list.remove(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查无此人！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印学员列表，验证删除功能</span></span><br><span class="line">    <span class="built_in">print</span>(self.student_list)</span><br></pre></td></tr></table></figure><h3 id="5-3-3修改学员功能"><a href="#5-3-3修改学员功能" class="headerlink" title="5.3.3修改学员功能"></a>5.3.3修改学员功能</h3><ul><li><p>需求：用户输入目标学员姓名，如果学员存在则修改该学员信息。</p></li><li><pre><code>步骤  </code></pre><ul><li>用户输入目标学员姓名；</li></ul></li><li><ul><li>遍历学员数据列表，如果用户输入的学员姓名存在则修改学员的姓名、性别、手机号数据，否则则提示该学员不存在。</li></ul></li><li><pre><code> </code></pre></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.4 修改学员信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modify_student</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 1. 用户输入目标学员姓名</span></span><br><span class="line">    modify_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要修改的学员的姓名：&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2. 如果用户输入的目标学员存在则修改姓名、性别、手机号等数据，否则提示学员不存在</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">        <span class="keyword">if</span> i.name == modify_name:</span><br><span class="line">            i.name = <span class="built_in">input</span>(<span class="string">&#x27;请输入学员姓名：&#x27;</span>)</span><br><span class="line">            i.gender = <span class="built_in">input</span>(<span class="string">&#x27;请输入学员性别：&#x27;</span>)</span><br><span class="line">            i.tel = <span class="built_in">input</span>(<span class="string">&#x27;请输入学员手机号：&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;修改该学员信息成功，姓名<span class="subst">&#123;i.name&#125;</span>,性别<span class="subst">&#123;i.gender&#125;</span>, 手机号<span class="subst">&#123;i.tel&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查无此人！&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-3-4查询学员功能"><a href="#5-3-4查询学员功能" class="headerlink" title="5.3.4查询学员功能"></a>5.3.4查询学员功能</h3><ul><li><p>需求：用户输入目标学员姓名，如果学员存在则打印该学员信息</p></li><li><pre><code>步骤  </code></pre><ul><li>用户输入目标学员姓名</li></ul></li><li><ul><li>遍历学员数据列表，如果用户输入的学员姓名存在则打印学员信息，否则提示该学员不存在。</li></ul></li><li><pre><code> </code></pre></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.5 查询学员信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_student</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 1. 用户输入目标学员姓名</span></span><br><span class="line">    search_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查询的学员的姓名：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 如果用户输入的目标学员存在，则打印学员信息，否则提示学员不存在</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">        <span class="keyword">if</span> i.name == search_name:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;姓名<span class="subst">&#123;i.name&#125;</span>,性别<span class="subst">&#123;i.gender&#125;</span>, 手机号<span class="subst">&#123;i.tel&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查无此人!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-3-5显示所有学员信息功能"><a href="#5-3-5显示所有学员信息功能" class="headerlink" title="5.3.5显示所有学员信息功能"></a>5.3.5显示所有学员信息功能</h3><ul><li><p>打印所有学员信息</p></li><li><pre><code>步骤  </code></pre><ul><li>遍历学员数据列表，打印所有学员信息</li></ul></li><li><pre><code> </code></pre></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.6 显示所有学员信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_student</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;姓名\t性别\t手机号&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i.name&#125;</span>\t<span class="subst">&#123;i.gender&#125;</span>\t<span class="subst">&#123;i.tel&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-3-6保存学员信息功能"><a href="#5-3-6保存学员信息功能" class="headerlink" title="5.3.6保存学员信息功能"></a>5.3.6保存学员信息功能</h3><ul><li><p>需求：将修改后的学员数据保存到存储数据的文件。</p></li><li><pre><code>步骤  </code></pre><ul><li>打开文件</li></ul></li><li><ul><li>文件写入数据</li></ul></li><li><ul><li>关闭文件</li></ul></li><li><pre><code> </code></pre></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.7 保存学员信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_student</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 1. 打开文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;student.data&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 文件写入学员数据</span></span><br><span class="line">    <span class="comment"># 注意1：文件写入的数据不能是学员对象的内存地址，需要把学员数据转换成列表字典数据再做存储</span></span><br><span class="line">    new_list = [i.__dict__ <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list]</span><br><span class="line">    <span class="comment"># [&#123;&#x27;name&#x27;: &#x27;aa&#x27;, &#x27;gender&#x27;: &#x27;nv&#x27;, &#x27;tel&#x27;: &#x27;111&#x27;&#125;]</span></span><br><span class="line">    <span class="built_in">print</span>(new_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意2：文件内数据要求为字符串类型，故需要先转换数据类型为字符串才能文件写入数据</span></span><br><span class="line">    f.write(<span class="built_in">str</span>(new_list))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 关闭文件</span></span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h3 id="5-3-7-加载学员信息功能"><a href="#5-3-7-加载学员信息功能" class="headerlink" title="5.3.7 加载学员信息功能"></a>5.3.7 加载学员信息功能</h3><ul><li><p>需求：每次进入系统后，修改的数据是文件里面的数据</p></li><li><pre><code>步骤  </code></pre><ul><li>尝试以”r”模式打开学员数据文件，如果文件不存在则以”w”模式打开文件</li></ul></li><li><ul><li><pre><code>    如果文件存在则读取数据并存储数据  </code></pre><ul><li>读取数据</li></ul></li><li><ul><li>转换数据类型为列表并转换列表内的字典为对象</li></ul></li><li><ul><li>存储学员数据到学员列表</li></ul></li><li></li></ul><p>   </p></li><li><ul><li>关闭文件</li></ul></li><li><pre><code> </code></pre></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.8 加载学员信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_student</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 尝试以&quot;r&quot;模式打开数据文件，文件不存在则提示用户；文件存在（没有异常）则读取数据</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;student.data&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;student.data&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 1. 读取数据</span></span><br><span class="line">        data = f.read()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 文件中读取的数据都是字符串且字符串内部为字典数据，故需要转换数据类型再转换字典为对象后存储到学员列表</span></span><br><span class="line">        new_list = <span class="built_in">eval</span>(data)</span><br><span class="line">        self.student_list = [Student(i[<span class="string">&#x27;name&#x27;</span>], i[<span class="string">&#x27;gender&#x27;</span>], i[<span class="string">&#x27;tel&#x27;</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> new_list]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 3. 关闭文件</span></span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><h1 id="六、程序主函数-main-py"><a href="#六、程序主函数-main-py" class="headerlink" title="六、程序主函数(main.py)"></a>六、程序主函数(main.py)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导入managerSystem模块</span></span><br><span class="line"><span class="keyword">from</span> managerSystem <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 启动学员管理系统</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    student_manager = StudentManager()</span><br><span class="line"></span><br><span class="line">    student_manager.run()</span><br></pre></td></tr></table></figure><h1 id="七、完整代码"><a href="#七、完整代码" class="headerlink" title="七、完整代码"></a>七、完整代码</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688357675-bf4d8233-0d92-49c7-acad-de6edcafce5a.png#averageHue=%23272b3f&clientId=u07f38247-78d3-4&from=paste&id=u14ab49e8&originHeight=307&originWidth=670&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=25433&status=done&style=none&taskId=u10334ceb-b819-4e27-97d0-e929fef39dc&title=" alt="image.png">编辑<br>main.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> managerSystem <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    student_manager = StudentManager()</span><br><span class="line">    student_manager.run()</span><br></pre></td></tr></table></figure><p>student.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：StudentManagerSystem </span></span><br><span class="line"><span class="string">@File    ：student.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2022/10/22 9:31 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,gender,tel</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.tel = tel</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>,<span class="subst">&#123;self.gender&#125;</span>,<span class="subst">&#123;self.tel&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>managerSystem.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：StudentManagerSystem </span></span><br><span class="line"><span class="string">@File    ：managerSystem.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2022/10/22 9:32 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentManager</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.student_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.load_student()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.show_menu()</span><br><span class="line">            menu_num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入您需要的功能序号：&quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> menu_num == <span class="number">1</span>:</span><br><span class="line">                self.add_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">2</span>:</span><br><span class="line">                self.del_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">3</span>:</span><br><span class="line">                self.modify_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">4</span>:</span><br><span class="line">                self.search_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">5</span>:</span><br><span class="line">                self.show_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">6</span>:</span><br><span class="line">                self.save_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;您输入的序号有误，请重新输入！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_menu</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请选择如下功能：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1.添加学员&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;2.删除学员&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;3.修改学员信息&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;4.查询学员信息&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;5.显示所有学员信息&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;6.保存学员信息&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;7.退出系统&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_student</span>(<span class="params">self</span>):</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&quot;请输入学员的姓名：&quot;</span>)</span><br><span class="line">        gender = <span class="built_in">input</span>(<span class="string">&quot;请输入学员的性别：&quot;</span>)</span><br><span class="line">        tel = <span class="built_in">input</span>(<span class="string">&quot;请输入学员的手机号&quot;</span>)</span><br><span class="line">        student = Student(name, gender, tel)</span><br><span class="line">        self.student_list.append(student)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_student</span>(<span class="params">self</span>):</span><br><span class="line">        del_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要删除的学员姓名：&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> i.name == del_name:</span><br><span class="line">                self.student_list.remove(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;查无此人！&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(self.student_list)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify_student</span>(<span class="params">self</span>):</span><br><span class="line">        modify_name = <span class="built_in">input</span>(<span class="string">&quot;请输入学员姓名：&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> i.name == modify_name:</span><br><span class="line">                i.name = <span class="built_in">input</span>(<span class="string">&quot;请输入更改之后的学员姓名：&quot;</span>)</span><br><span class="line">                i.gender = <span class="built_in">input</span>(<span class="string">&quot;请输入更改之后的学员性别：&quot;</span>)</span><br><span class="line">                i.tel = <span class="built_in">input</span>(<span class="string">&quot;请输入更改之后的学员手机号：&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;修改该学员信息成功，姓名：<span class="subst">&#123;i.name&#125;</span>,性别：<span class="subst">&#123;i.gender&#125;</span>,手机号：<span class="subst">&#123;i.tel&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;查无此人！&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search_student</span>(<span class="params">self</span>):</span><br><span class="line">        search_name = <span class="built_in">input</span>(<span class="string">&quot;请输入您要查找的学员的姓名：&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> i.name == search_name:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;姓名：<span class="subst">&#123;i.name&#125;</span>,性别：<span class="subst">&#123;i.gender&#125;</span>,手机号：<span class="subst">&#123;i.tel&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;查无此人！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_student</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;姓名\t性别\t手机号&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i.name&#125;</span>\t<span class="subst">&#123;i.gender&#125;</span>\t<span class="subst">&#123;i.tel&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_student</span>(<span class="params">self</span>):</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;student.data&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">        new_list = [i.__dict__ <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list]</span><br><span class="line">        <span class="built_in">print</span>(new_list)</span><br><span class="line">        f.write(<span class="built_in">str</span>(new_list))</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_student</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&quot;student.data&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&quot;student.data&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data = f.read()</span><br><span class="line">            new_list = <span class="built_in">eval</span>(data)</span><br><span class="line">            self.student_list = [Student(i[<span class="string">&quot;name&quot;</span>], i[<span class="string">&quot;gender&quot;</span>], i[<span class="string">&quot;tel&quot;</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> new_list]</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure><h1 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h1><ul><li><pre><code>函数  </code></pre><ul><li>定义和调用</li></ul></li><li><ul><li>参数的使用</li></ul></li><li><pre><code> </code></pre></li><li><pre><code>面向对象  </code></pre><ul><li>定义类</li></ul></li><li><ul><li>创建对象</li></ul></li><li><ul><li>定义和调用实例属性</li></ul></li><li><ul><li>定义和调用实例方法</li></ul></li><li><pre><code> </code></pre></li><li><pre><code>数据类型  </code></pre><ul><li><pre><code>    列表  </code></pre><ul><li>增加删除数据</li></ul></li><li><ul><li>列表推导式</li></ul></li><li></li></ul><p>   </p></li><li><ul><li>字典</li></ul></li><li><ul><li>字符串</li></ul></li><li><pre><code> </code></pre></li><li><pre><code>文件操作  </code></pre><ul><li>打开文件</li></ul></li><li><ul><li>读取或写入</li></ul></li><li><ul><li>关闭文件</li></ul></li><li></li></ul><p>   </p><p>虽说这样的简单学生管理系统技术含量并不是很高，但自己做出来还是很有成就感的！如果之后在和Mysql数据关联，用GUI可视化，那么效果会更好哦！那都是后话了，现在我们已经能够自己去编写一个简易版本的学生管理系统，学会了底层代码逻辑及一些细节处理，收获还是很多的！<br>好啦，今天的分享就到这里啦！感兴趣的小伙伴欢迎评论区交流！<br>最后附上视频教程：<a href="https://www.bilibili.com/video/BV1zL4y1e7Mp?p=7&vd_source=d01f7c6230ed1510e94986cbe310da1a">python小项目之学生管理系统</a>；<br>以及一篇优秀markdown笔记：<a href="https://blog.manyacan.com/archives/1836/">python小项目之学生管理系统笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于卷积神经网络(CNN)的猫狗识别</title>
      <link href="/2023/08/21/%E5%9F%BA%E4%BA%8E%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-CNN-%E7%9A%84%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB/"/>
      <url>/2023/08/21/%E5%9F%BA%E4%BA%8E%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-CNN-%E7%9A%84%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><strong>目录</strong><br><a href="#%E5%BC%95%E8%A8%80">引言</a><br><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9F">1.什么是卷积神经网络？</a><br><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%B7%E7%A7%AF%EF%BC%9F">1.1什么是神经网络？</a><br><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%B7%E7%A7%AF%EF%BC%9F">1.2什么是卷积？</a><br><a href="#%E5%9F%BA%E4%BA%8E%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB">2.准备工作</a><br><a href="#2.1%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%EF%BC%9A">2.1一些知识：</a><br><a href="#2.2keras">2.2keras</a><br><a href="#2.3Conv2D">2.3Conv2D</a><br><a href="#2.4%20MaxPooling2D">2.4 MaxPooling2D</a><br><a href="#3.%E5%9F%BA%E4%BA%8E%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB">3.基于卷积神经网络的猫狗识别</a><br><a href="#3.1%E5%AF%BC%E5%85%A5%E5%BF%85%E8%A6%81%E5%BA%93">3.1导入必要库</a><br><a href="#3.2%E6%A8%A1%E5%9E%8B%E5%AE%9A%E4%B9%89">3.2模型定义</a><br><a href="#3.3%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%A8%A1%E5%9E%8B%E5%B9%B6%E8%AE%AD%E7%BB%83">3.3实例化模型并训练</a><br><a href="#3.4%E8%8E%B7%E5%8F%96%E9%AA%8C%E8%AF%81%E7%9A%84%E5%9B%BE%E7%89%87">3.4获取验证的图片</a><br><a href="#3.5%E8%BF%9B%E8%A1%8C%E9%AA%8C%E8%AF%81">3.5进行验证</a><br><a href="#3.6%E6%98%BE%E7%A4%BA%E9%A2%84%E6%B5%8B%E7%BB%93%E6%9E%9C">3.6显示预测结果</a><br><a href="#%C2%A04.%E6%80%BB%E7%BB%93">4.总结</a><br><a href="#5.%E4%BB%A3%E7%A0%81%E5%8F%8A%E6%95%B0%E6%8D%AE%E9%9B%86">5.代码及数据集</a></p><hr><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>首先，我们看几张图片：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688228770-c15a4c39-5939-4d83-be2a-63b909a60076.png#averageHue=%23a4a9aa&clientId=u85a2d589-c34f-4&from=paste&id=ucd265036&originHeight=409&originWidth=335&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=175721&status=done&style=none&taskId=ua053d137-374d-4501-ac30-90ecccc98b7&title=" alt="image.png">编辑<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688228869-fb31f366-3d68-4047-8c59-99c1574c2c51.png#averageHue=%2373856a&clientId=u85a2d589-c34f-4&from=paste&id=u6f6c4d70&originHeight=491&originWidth=500&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=392638&status=done&style=none&taskId=uf806b3fe-7372-4078-9f9c-dff61b82456&title=" alt="image.png">编辑<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688228990-d091690d-af31-42cf-9838-29e5f7846c98.png#averageHue=%23627a50&clientId=u85a2d589-c34f-4&from=paste&id=u7213a9fa&originHeight=450&originWidth=500&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=495394&status=done&style=none&taskId=ud7ebc834-7220-4a40-b77c-d64b9bf1f41&title=" alt="image.png">编辑<br>作为人类，我们很轻松就能识别出第一张是猫，后两张是狗。为什么我们知道呢？因为从小我们的爸妈，我们的老师，周围的所有人都指着狗对我们说它是狗，指着猫对我们说它是猫。换句话来说，是别人教我们的，所以我们现在才能识别出猫狗。而对于计算机呢？没有人教它，这些丰富多彩的图片在它眼里，无非都是一个个像素点构成的数字矩阵。该怎么让他识别出来呢？这就是今天所用的卷积神经网络。</p><hr><h1 id="1-什么是卷积神经网络？"><a href="#1-什么是卷积神经网络？" class="headerlink" title="1.什么是卷积神经网络？"></a>1.什么是卷积神经网络？</h1><h2 id="1-1什么是神经网络？"><a href="#1-1什么是神经网络？" class="headerlink" title="1.1什么是神经网络？"></a>1.1什么是神经网络？</h2><p>顾名思义，神经网络是类似于人脑神经元的一种东西。学过生物的我们都知道，神经元彼此之间相互联系，传入一个信号后，可以在神经元之间不断传递，最终促使肌体做出反应，比如被针扎了之后会马上缩手。你也可以笼统的认为神经网络就是一个函数，传入一个或多个参数后，经过一系列变换，输出一个或多个参数。最简单的以y&#x3D;x+1为例，传入一个值就能输出一个值，当传入x&#x3D;2的时候输出3，x&#x3D;3的时候输出4。不过，真正的神经网络要复杂的多。这里以BP神经网络为例：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688228752-d6f21fc9-1979-4dcf-8033-8520134893f6.png#averageHue=%23f7ece5&clientId=u85a2d589-c34f-4&from=paste&id=u3bef936c&originHeight=360&originWidth=612&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=169081&status=done&style=none&taskId=u65bb3bd1-c8e0-4784-bc02-ffc563f87fe&title=" alt="image.png">编辑<br>目前，你只需要知道神经网络是一个大函数就行，传入输入，传出输出。<br>想要继续深入学习可以参考：<a href="https://blog.csdn.net/mynote/article/details/125694744?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166476591216782412590237%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166476591216782412590237&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-125694744-null-null.142%5Ev51%5Econtrol_1,201%5Ev3%5Econtrol_2&utm_term=%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&spm=1018.2226.3001.4187">到底什么是神经网络？</a></p><h2 id="1-2什么是卷积？"><a href="#1-2什么是卷积？" class="headerlink" title="1.2什么是卷积？"></a>1.2什么是卷积？</h2><p>首先，给出卷积的公式：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688228493-e1ebed83-b031-4f47-bd76-a96d72d554a8.png#averageHue=%23f9f8f7&clientId=u85a2d589-c34f-4&from=paste&id=ua92ed3fa&originHeight=111&originWidth=519&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=12659&status=done&style=none&taskId=ua36e5788-eed1-4e3c-b15c-db1b93e3473&title=" alt="image.png"><br>编辑<br>积看出来了，f（t）和g（t）的积，那卷在哪里呢？笔者认为，卷在两个方面：<br>第一卷是如果将f（t）和g（t）的图像放在同一垂直面上，对应点之间的连线是相互交织在一起的，如果将g函数翻转一下，是不是就舒服很多了呢？<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688229566-4eb42610-927c-44c4-97ff-262a36e3e146.png#averageHue=%23252426&clientId=u85a2d589-c34f-4&from=paste&id=ud2c2ea50&originHeight=857&originWidth=1085&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=603100&status=done&style=none&taskId=u34d1d2b1-0ea6-482d-8e5b-698fdad8098&title=" alt="image.png">编辑<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688230587-07dbbc8d-3535-48b3-beb1-f0cfdfa6948f.png#averageHue=%23262526&clientId=u85a2d589-c34f-4&from=paste&id=u137b29e5&originHeight=896&originWidth=1448&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=739231&status=done&style=none&taskId=uf5df6b0d-8980-47eb-89ca-075a570b52b&title=" alt="image.png">编辑<br>第二卷是g函数不等于卷积核，g函数要旋转180度之后才是卷积核。<br>可参考：<a href="https://blog.csdn.net/YaoYee_21/article/details/109710160?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8D%B7%E5%9C%A8%E5%93%AA%E9%87%8C&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-109710160.142%5Ev51%5Econtrol_1,201%5Ev3%5Econtrol_2&spm=1018.2226.3001.4187">卷积神经网络卷在哪里？</a><br>强烈推荐：<a href="https://www.bilibili.com/video/BV1VV411478E/?p=1&share_medium=ipad&share_plat=ios&share_session_id=DA86878A-7B11-4E53-8F3A-3679CAEE826B&share_source=WEIXIN_MONMENT&share_tag=s_i&timestamp=1638088245&unique_k=AABTOLL&share_times=1&vd_source=d01f7c6230ed1510e94986cbe310da1a">从“卷积”、到“图像卷积操作”、再到“卷积神经网络”，“卷积”意义的3次改变</a></p><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h1><h2 id="2-1一些知识："><a href="#2-1一些知识：" class="headerlink" title="2.1一些知识："></a>2.1一些知识：</h2><p>1.眼睛只完成图像的摄取功能，识别的关键在于人脑。而人脑对图像的识别是层层抽像的。<br>2.人工神经元及神经网络模拟了大脑的神经元及其连接。<br>3.计算机看到的图片是一个个代表明暗的数字。彩色图片是由RGB三色组成的。<br>4.神经网络需要训练来得到最佳的模型参数。<br>5.卷积神经网络主要的设计思想是更好的利用图片的性质。</p><ul><li><pre><code>图片的模式比图片小的多 </code></pre></li><li><pre><code>图片中的模式出现在图像的不同区域 </code></pre></li><li><pre><code>缩放不影响图片中的物体</code></pre></li></ul><p> </p><p>6.卷积层就是在图片中扫描特征<br>7.最大池化层就是在缩放图片，减少参数。<br>8.多次的卷积和池化后，再经过flatten连接一个全连接层</p><h2 id="2-2keras"><a href="#2-2keras" class="headerlink" title="2.2keras"></a>2.2keras</h2><ol><li><pre><code>keras是一个用python编写的高级神经网络APL </code></pre></li><li><pre><code>sequential模型</code></pre></li></ol><p> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> layers</span><br><span class="line">model = keras.Sequential()  <span class="comment">#建立模型</span></span><br><span class="line">model.add(layers.Dense(<span class="number">20</span>,activation=<span class="string">&quot;relu&quot;</span>,input_shape=(<span class="number">10</span>,))) <span class="comment"># 加了一个全连接层 (神经元数量，激活函数，输入的参数值数量：10个参数）</span></span><br><span class="line">model.add(layers.Dense(<span class="number">20</span>,activation=<span class="string">&quot;relu&quot;</span>))  <span class="comment"># 再加一个全连接层</span></span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>,activation=<span class="string">&quot;softmax&quot;</span>)) <span class="comment"># 同上</span></span><br><span class="line">model.fit(x,y,epochs=<span class="number">10</span>,batch_size=<span class="number">32</span>)  <span class="comment">#模型训练： x是图片，y是图形标签 epochs：每张图片看、训练10遍 batch_size:一次只传入32张图片</span></span><br></pre></td></tr></table></figure><ul><li><pre><code>keras. Sequential() 建立函数 </code></pre></li><li><pre><code>model.add（） 添加层 </code></pre></li><li><pre><code>model.fit() 训练模型</code></pre></li></ul><p> </p><h2 id="2-3Conv2D"><a href="#2-3Conv2D" class="headerlink" title="2.3Conv2D"></a>2.3Conv2D</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keras.layers.Conv2D(filters,kernel_size,strides=(<span class="number">1</span>,<span class="number">1</span>),padding=<span class="string">&quot;valid&quot;</span>,data_formt=<span class="literal">None</span>))</span><br></pre></td></tr></table></figure><ul><li><pre><code>filters:整数，输出空间的维度，卷积核的数量 </code></pre></li><li><pre><code>kernel_size:一个整数，或者2个整数代表的元组或列表，指明2D卷积窗口的宽度和高度，可以是一个整数，为所有空间维度指定相同的值。 </code></pre></li><li><pre><code>strides：一个整数，或者2个整数代表的元组或列表，指明卷积沿宽度和高度方向的步长。可以是一个整数，为所有空间维度指定相同的值。 </code></pre></li><li><pre><code>padding：&quot;valid&quot;或者&quot;same&quot;,大小写敏感，用于边缘处理部分。</code></pre></li></ul><p> </p><h2 id="2-4-MaxPooling2D"><a href="#2-4-MaxPooling2D" class="headerlink" title="2.4 MaxPooling2D"></a>2.4 MaxPooling2D</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=<span class="literal">None</span>,padding=<span class="string">&quot;valid&quot;</span>,data_format =<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><pre><code>pool_size:整数，或者2个整数表示的元组，沿（垂直，水平）方向缩小比例的因数。（2,2）会把输入张量的两个维度都缩小一半。如果只使用一个整数，那么两个维度都会使用同样的窗口长度。 </code></pre></li><li><pre><code>strides:整数，2个整数表示的元组，或者是None。表示步长值。如果是None，那么默认值是pool_size。 </code></pre></li><li><pre><code>padding:&quot;valid&quot;或者“same&quot;</code></pre></li></ul><p> </p><h1 id="3-基于卷积神经网络的猫狗识别"><a href="#3-基于卷积神经网络的猫狗识别" class="headerlink" title="3.基于卷积神经网络的猫狗识别"></a>3.基于卷积神经网络的猫狗识别</h1><h2 id="3-1导入必要库"><a href="#3-1导入必要库" class="headerlink" title="3.1导入必要库"></a>3.1导入必要库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> MaxPool2D</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Flatten</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> SGD</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)</span><br></pre></td></tr></table></figure><p>这一部分自己安装就可以，pip install 对应库名，受网络问题可能会有点慢。</p><h2 id="3-2模型定义"><a href="#3-2模型定义" class="headerlink" title="3.2模型定义"></a>3.2模型定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">define_cnn_model</span>():</span><br><span class="line">    <span class="comment"># 使用Sequential序列模型</span></span><br><span class="line">    model = Sequential()</span><br><span class="line">    <span class="comment"># 卷积层</span></span><br><span class="line">    model.add(Conv2D(<span class="number">32</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">&quot;relu&quot;</span>,padding=<span class="string">&quot;same&quot;</span>,input_shape=(<span class="number">200</span>,<span class="number">200</span>,<span class="number">3</span>)))  <span class="comment"># 第一层即为卷积层，要设置输入进来图片的样式  3是颜色通道个数</span></span><br><span class="line">    <span class="comment"># 最大池化层</span></span><br><span class="line">    model.add(MaxPool2D((<span class="number">2</span>,<span class="number">2</span>)))  <span class="comment"># 池化窗格</span></span><br><span class="line">    <span class="comment"># Flatten层</span></span><br><span class="line">    model.add(Flatten())</span><br><span class="line">    <span class="comment"># 全连接层</span></span><br><span class="line">    model.add(Dense(<span class="number">128</span>,activation=<span class="string">&quot;relu&quot;</span>))  <span class="comment"># 128为神经元的个数</span></span><br><span class="line">    model.add(Dense(<span class="number">1</span>,activation=<span class="string">&quot;sigmoid&quot;</span>))</span><br><span class="line">    <span class="comment"># 编译模型</span></span><br><span class="line">    opt = SGD(lr= <span class="number">0.001</span>,momentum=<span class="number">0.9</span>)  <span class="comment"># 随机梯度</span></span><br><span class="line">    model.<span class="built_in">compile</span>(optimizer=opt,loss=<span class="string">&quot;binary_crossentropy&quot;</span>,metrics=[<span class="string">&quot;accuracy&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><p>首先创建一个Sequential模型<br>添加一个卷积层，第一个参数是卷积核的数量，第二个是卷积核的规格，（3,3）即为3<em>3的，第三个参数是激活函数类型，第四个是边缘的处理办法，第五个因为第一层即为卷积层，要定义输入图片的规格（200，200,3）即为200</em>200,3说明是彩色图片。<br>再添加一个池化层，（2,2）说明每2*2化作一个窗格。<br>再添加一个Flatten层，将池化后的结果展开；<br>再添加一个全连接层，第一个参数是神经元个数，第二个参数是激活函数的类型；<br>最后再添加一个全连接层输出结果，注意我们的结果需判断猫狗就行，因此一个神经元就行。<br>最后用随机梯度编译模型，这一块感兴趣的同学可以自己查阅资料学习。</p><h2 id="3-3实例化模型并训练"><a href="#3-3实例化模型并训练" class="headerlink" title="3.3实例化模型并训练"></a>3.3实例化模型并训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train_cnn_model</span>():</span><br><span class="line">    <span class="comment"># 实例化模型</span></span><br><span class="line">    model = define_cnn_model()</span><br><span class="line">    <span class="comment"># 创建图片生成器</span></span><br><span class="line">    datagen = ImageDataGenerator(rescale=<span class="number">1.0</span>/<span class="number">255.0</span>)</span><br><span class="line">    train_it = datagen.flow_from_directory(</span><br><span class="line">        <span class="string">&quot;./ma1ogo3ushu4ju4ji2/dogs_cats/data/train/&quot;</span>,</span><br><span class="line">        class_mode=<span class="string">&quot;binary&quot;</span>,</span><br><span class="line">        batch_size=<span class="number">64</span>,</span><br><span class="line">        target_size=(<span class="number">200</span>, <span class="number">200</span>))  <span class="comment"># batch_size:一次拿出多少张照片 targe_size:将图片缩放到一定比例</span></span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    model.fit_generator(train_it,</span><br><span class="line">                        steps_per_epoch=<span class="built_in">len</span>(train_it),</span><br><span class="line">                        epochs=<span class="number">5</span>,</span><br><span class="line">                        verbose=<span class="number">1</span>)</span><br><span class="line">    model.save(<span class="string">&quot;my_model.h5&quot;</span>)</span><br></pre></td></tr></table></figure><p>首先调用3.2的函数实例化模型，紧接着创建图片生成器：这个作用就是把文件夹中的图片传入模型中训练，知道就行。里面的参数batch_size是规定一次只能传入64张图片，这样可以有效地避免内存的问题。训练模型中一个重要参数epochs，这里设置为5，说明传入的图片他要学习5次。比如，这里我总共传入了2500张图片，它学习了五次，也就是12500张图片。这样的重复学习，可以有效提高进度，但是当你值调整比较大时，会非常耗时。最后将训练好的模型保存到项目文件夹下。</p><h2 id="3-4获取验证的图片"><a href="#3-4获取验证的图片" class="headerlink" title="3.4获取验证的图片"></a>3.4获取验证的图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_random_image</span>():</span><br><span class="line">    folder = <span class="string">r&quot;./ma1ogo3ushu4ju4ji2/dogs_cats/data/test/&quot;</span></span><br><span class="line">    file_path = folder + random.choice(os.listdir(folder))</span><br><span class="line">    pil_im = Image.<span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> pil_im</span><br></pre></td></tr></table></figure><h2 id="3-5进行验证"><a href="#3-5进行验证" class="headerlink" title="3.5进行验证"></a>3.5进行验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_predict</span>(<span class="params">pil_im,model</span>):</span><br><span class="line">    <span class="comment"># 首先更改图片的大小</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    pil_im = pil_im.resize((<span class="number">200</span>,<span class="number">200</span>))</span><br><span class="line">    <span class="comment"># 将格式转为numpy array格式</span></span><br><span class="line">    array_im = np.asarray(pil_im)</span><br><span class="line">    <span class="comment"># array_im = array_im.resize((4,4))</span></span><br><span class="line">    array_im = array_im[np.newaxis,:]</span><br><span class="line">    <span class="comment">#对图像检测</span></span><br><span class="line">    result = model.predict([[array_im]])</span><br><span class="line">    <span class="keyword">if</span> result[<span class="number">0</span>][<span class="number">0</span>]&gt;<span class="number">0.5</span>:</span><br><span class="line">        name = <span class="string">&quot;它是狗！&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;预测结果是：狗&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name = <span class="string">&quot;它是猫！&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;预测结果是：猫&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> name</span><br></pre></td></tr></table></figure><p>注意一行代码：<br>array_im &#x3D; array_im[np.newaxis,:]<br>上一行的array_im 是一个三维数组，不符合运行规范，这里要将其转化为四位数组，否则会报错！</p><h2 id="3-6显示预测结果"><a href="#3-6显示预测结果" class="headerlink" title="3.6显示预测结果"></a>3.6显示预测结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pil_im =read_random_image()</span><br><span class="line">imshow(np.asarray(pil_im))</span><br><span class="line">plt.title(get_predict(pil_im,model))</span><br><span class="line">pylab.show()</span><br></pre></td></tr></table></figure><p>到这里就大功告成啦！看一下我们的预测结果：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688230434-88c5d0c7-abe8-4e99-9fea-7cf536d8345f.png#averageHue=%238a857c&clientId=u85a2d589-c34f-4&from=paste&id=u40f3cf2e&originHeight=916&originWidth=642&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=545099&status=done&style=none&taskId=ua0a5b985-91be-4d7b-bd75-b739b0989ef&title=" alt="image.png">编辑<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688230608-a51441c3-3789-495a-ab01-6e846e750da8.png#averageHue=%23848079&clientId=u85a2d589-c34f-4&from=paste&id=u6bc8d72a&originHeight=877&originWidth=972&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=617653&status=done&style=none&taskId=u145f8b75-831c-4607-a2b7-e2010168abe&title=" alt="image.png">编辑<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688230870-70788512-3351-49d7-9099-7dfacd58a3b1.png#averageHue=%2352544e&clientId=u85a2d589-c34f-4&from=paste&id=u32b43e4f&originHeight=856&originWidth=1152&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1236963&status=done&style=none&taskId=u8fc3a1e1-e6d4-431b-8dbd-f01b48320f0&title=" alt="image.png">编辑<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688232057-15ea2dea-425a-45c1-aea2-e5e5fc654f01.png#averageHue=%2380857b&clientId=u85a2d589-c34f-4&from=paste&id=uf9502233&originHeight=850&originWidth=1134&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1101147&status=done&style=none&taskId=u3df62a8d-58f3-4d57-9a60-31a48805c09&title=" alt="image.png">编辑<br>总体来看，预测效果还是不错的，学习次数在5次的情况下，准确度可以达到70%，感兴趣的话，也可以将学习次数调大一点，看看效果！红色警告是由于GPU和CPU的处理问题，你可以暂时忽略。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h1><p>这个猫狗项目只是一个入门项目，但是它的思想很重要。想想看，只要我们有数据，有模型是不是就能让计算机认识任何我们想要认识的东西。手机的人脸识别，支付宝的人脸支付，甚至在未来有没有可能在无人机上装个摄像头去帮我们抓捕犯罪嫌疑人？人工智能的世界很开阔，未来等着我们去探索！<br>笔者为入门初学者，所以难免会有错误，欢迎大家指正，感兴趣的话可以在评论区一起交流！</p><h1 id="5-代码及数据集"><a href="#5-代码及数据集" class="headerlink" title="5.代码及数据集"></a>5.代码及数据集</h1><p>第一部分代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：神经网络猫狗识别 </span></span><br><span class="line"><span class="string">@File    ：CNN.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2022/10/2 10:37 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> MaxPool2D</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Flatten</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> SGD</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">define_cnn_model</span>():</span><br><span class="line">    <span class="comment"># 使用Sequential序列模型</span></span><br><span class="line">    model = Sequential()</span><br><span class="line">    <span class="comment"># 卷积层</span></span><br><span class="line">    model.add(Conv2D(<span class="number">32</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">&quot;relu&quot;</span>,padding=<span class="string">&quot;same&quot;</span>,input_shape=(<span class="number">200</span>,<span class="number">200</span>,<span class="number">3</span>)))  <span class="comment"># 第一层即为卷积层，要设置输入进来图片的样式  3是颜色通道个数</span></span><br><span class="line">    <span class="comment"># 最大池化层</span></span><br><span class="line">    model.add(MaxPool2D((<span class="number">2</span>,<span class="number">2</span>)))  <span class="comment"># 池化窗格</span></span><br><span class="line">    <span class="comment"># Flatten层</span></span><br><span class="line">    model.add(Flatten())</span><br><span class="line">    <span class="comment"># 全连接层</span></span><br><span class="line">    model.add(Dense(<span class="number">128</span>,activation=<span class="string">&quot;relu&quot;</span>))  <span class="comment"># 128为神经元的个数</span></span><br><span class="line">    model.add(Dense(<span class="number">1</span>,activation=<span class="string">&quot;sigmoid&quot;</span>))</span><br><span class="line">    <span class="comment"># 编译模型</span></span><br><span class="line">    opt = SGD(lr= <span class="number">0.001</span>,momentum=<span class="number">0.9</span>)  <span class="comment"># 随机梯度</span></span><br><span class="line">    model.<span class="built_in">compile</span>(optimizer=opt,loss=<span class="string">&quot;binary_crossentropy&quot;</span>,metrics=[<span class="string">&quot;accuracy&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_cnn_model</span>():</span><br><span class="line">    <span class="comment"># 实例化模型</span></span><br><span class="line">    model = define_cnn_model()</span><br><span class="line">    <span class="comment"># 创建图片生成器</span></span><br><span class="line">    datagen = ImageDataGenerator(rescale=<span class="number">1.0</span>/<span class="number">255.0</span>)</span><br><span class="line">    train_it = datagen.flow_from_directory(</span><br><span class="line">        <span class="string">&quot;./ma1ogo3ushu4ju4ji2/dogs_cats/data/train/&quot;</span>,</span><br><span class="line">        class_mode=<span class="string">&quot;binary&quot;</span>,</span><br><span class="line">        batch_size=<span class="number">64</span>,</span><br><span class="line">        target_size=(<span class="number">200</span>, <span class="number">200</span>))  <span class="comment"># batch_size:一次拿出多少张照片 targe_size:将图片缩放到一定比例</span></span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    model.fit_generator(train_it,</span><br><span class="line">                        steps_per_epoch=<span class="built_in">len</span>(train_it),</span><br><span class="line">                        epochs=<span class="number">5</span>,</span><br><span class="line">                        verbose=<span class="number">1</span>)</span><br><span class="line">    model.save(<span class="string">&quot;my_model.h5&quot;</span>)</span><br><span class="line">train_cnn_model()</span><br></pre></td></tr></table></figure><p>第二部分代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：神经网络猫狗识别 </span></span><br><span class="line"><span class="string">@File    ：CNN_test.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2022/10/2 12:12 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> imshow</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">model_path = <span class="string">&quot;my_model.h5&quot;</span></span><br><span class="line">model = load_model(model_path)</span><br><span class="line"><span class="keyword">import</span> pylab</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_random_image</span>():</span><br><span class="line">    folder = <span class="string">r&quot;./ma1ogo3ushu4ju4ji2/dogs_cats/data/test/&quot;</span></span><br><span class="line">    file_path = folder + random.choice(os.listdir(folder))</span><br><span class="line">    pil_im = Image.<span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> pil_im</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_predict</span>(<span class="params">pil_im,model</span>):</span><br><span class="line">    <span class="comment"># 首先更改图片的大小</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    pil_im = pil_im.resize((<span class="number">200</span>,<span class="number">200</span>))</span><br><span class="line">    <span class="comment"># 将格式转为numpy array格式</span></span><br><span class="line">    array_im = np.asarray(pil_im)</span><br><span class="line">    <span class="comment"># array_im = array_im.resize((4,4))</span></span><br><span class="line">    array_im = array_im[np.newaxis,:]</span><br><span class="line">    <span class="comment">#对图像检测</span></span><br><span class="line">    result = model.predict([[array_im]])</span><br><span class="line">    <span class="keyword">if</span> result[<span class="number">0</span>][<span class="number">0</span>]&gt;<span class="number">0.5</span>:</span><br><span class="line">        name = <span class="string">&quot;它是狗！&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;预测结果是：狗&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name = <span class="string">&quot;它是猫！&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;预测结果是：猫&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">pil_im =read_random_image()</span><br><span class="line">imshow(np.asarray(pil_im))</span><br><span class="line">plt.title(get_predict(pil_im,model))</span><br><span class="line">pylab.show()</span><br></pre></td></tr></table></figure><p>数据集下载链接：<a href="https://momodel.cn/explore/5efc77dbc018c95e69fb2a81?type=dataset&src=5a6cb32c12">猫狗数据集</a><br>视频教学连接：<a href="https://www.bilibili.com/video/BV1rK4y147qn/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=d01f7c6230ed1510e94986cbe310da1a">基于卷积神经网络的猫狗识别</a></p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yolov5：强大到你难以想象──新冠疫情下的口罩检测</title>
      <link href="/2023/08/21/Yolov5%EF%BC%9A%E5%BC%BA%E5%A4%A7%E5%88%B0%E4%BD%A0%E9%9A%BE%E4%BB%A5%E6%83%B3%E8%B1%A1%E2%94%80%E2%94%80%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E5%8F%A3%E7%BD%A9%E6%A3%80%E6%B5%8B/"/>
      <url>/2023/08/21/Yolov5%EF%BC%9A%E5%BC%BA%E5%A4%A7%E5%88%B0%E4%BD%A0%E9%9A%BE%E4%BB%A5%E6%83%B3%E8%B1%A1%E2%94%80%E2%94%80%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E5%8F%A3%E7%BD%A9%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>初识<strong>Yolov5</strong>是看到一个视频可以检测街道上所有的行人，并实时框选出来。之后学习了CNN卷积神经网络，在完成一个项目需求时，发现卷积神经网络在切割图像方面仍然不太好用。于是我想到了之前看到的Yolov5，实战后不禁感慨一句：真的太强大了！它比“R-CNN”快1000倍，比“Fast R-CNN”快100倍!<strong>You Only Look Once</strong>，这个被称为“<strong>暗网</strong>”的国外的开源项目，目标就是让计算机识得世间万物。接下来，跟随我的脚步，一起来看看这篇<strong>《基于Yolov5的口罩检测》</strong>文章吧！<br><strong>目录</strong><br><a href="#%E4%B8%80%E3%80%81Yolov5%E7%AE%80%E4%BB%8B">一、Yolov5简介</a><br><a href="#%C2%A0%E4%BA%8C%E3%80%81%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF">二、项目背景</a><br><a href="#%E4%B8%89%E3%80%81%E6%A3%80%E6%B5%8B%E6%95%88%E6%9E%9C">三、检测效果</a><br><a href="#%E5%9B%9B%E3%80%81%E6%95%B0%E6%8D%AE%E9%9B%86%E5%A4%84%E7%90%86%20%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE">四、数据集处理</a><br><a href="#%C2%A0%E4%B8%83%E3%80%81%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90">五、结果分析</a><br><a href="#%E5%85%AB%E3%80%81%E6%80%BB%E7%BB%93">六、总结</a><br><a href="#%C2%A0%E5%9B%9B%E3%80%81%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89">七、模型代码（部分）</a></p><hr><h1 id="一、Yolov5简介"><a href="#一、Yolov5简介" class="headerlink" title="一、Yolov5简介"></a>一、Yolov5简介</h1><p>2020年6月25日，Ultralytics发布了<strong>YOLOV5 <strong>的第一个正式版本，其性能与YOLO V4不相伯仲，同样也是现今最先进的对象检测技术，并在推理速度上是目前最强，yolov5按大小分为四个模型</strong>yolov5s、yolov5m、yolov5l、yolov5x</strong>。其中的复杂的网络结构、数学基础在这里就不一一介绍(太复杂，笔者也只能看个大概，很难说清楚)，在这里，引用另一个博主的Yolov5的网络结构图：<a href="https://blog.csdn.net/Stephen_Pei/article/details/110147939?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166726944316782391893456%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166726944316782391893456&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-7-110147939-null-null.142%5Ev62%5Econtrol_1,201%5Ev3%5Econtrol_2,213%5Ev1%5Econtrol&utm_term=yolov5&spm=1018.2226.3001.4187">Yolov5网络结构图</a>，以及一篇流程图：<a href="https://blog.csdn.net/m0_53392188/article/details/119334634?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166726944316782391893456%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166726944316782391893456&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-119334634-null-null.142%5Ev62%5Econtrol_1,201%5Ev3%5Econtrol_2,213%5Ev1%5Econtrol&utm_term=yolov5&spm=1018.2226.3001.4187">Yolov5操作流程图</a><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688044692-fca15424-e2ce-4777-97ed-f3941a25e3e6.png#averageHue=%23f6f2ec&clientId=u06340ca0-1712-4&from=paste&id=uaabf555c&originHeight=1099&originWidth=2608&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=290222&status=done&style=none&taskId=u01b566c9-60b3-4fea-a226-73f4796df19&title=" alt="image.png">编辑<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688045370-f929159f-7bb0-4a18-996f-b05387429649.png#averageHue=%23fafafa&clientId=u06340ca0-1712-4&from=paste&id=u1c673d18&originHeight=3071&originWidth=3018&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=694048&status=done&style=none&taskId=u685f401e-8f59-45ea-81d2-aa336ffe443&title=" alt="image.png">编辑<br>YOLOv5是YOLO系列的一个延申，您也可以看作是基于YOLOv3、YOLOv4的改进作品。YOLOv5没有相应的论文说明，但是作者在Github上积极地开放源代码，通过对源码分析，我们也能很快地了解YOLOv5的网络架构和工作原理。</p><hr><h1 id="二、项目背景"><a href="#二、项目背景" class="headerlink" title="二、项目背景"></a>二、项目背景</h1><p>当前新冠疫情仍然严重，在公众场合需要佩戴口罩已经成为常识。新型冠状病毒的主要传播途径就是飞沫传播，戴上口罩就可以有效的阻隔病毒的传播。口罩是预防呼吸道传染病的重要防线，可以降低新型冠状病毒感染风险。口罩不仅可以防止病人喷射飞沫，降低飞沫量和喷射速度，还可以阻挡含病毒的飞沫核，防止佩戴者吸入。有研究显示，只要双方都佩戴口罩且间隔1.8米以上，造成感染的几率几乎为0。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688045686-e943c9f1-3e5b-418a-9867-56b499d284b6.png#averageHue=%2395aea6&clientId=u06340ca0-1712-4&from=paste&id=u1277a3f5&originHeight=788&originWidth=1050&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1485366&status=done&style=none&taskId=u02848a00-c473-443f-a25c-077b94ebcb5&title=" alt="image.png">编辑<br>但是，在我们周围总有人不喜欢戴口罩，无论是进出商场、教室、街道、地下停车场等公共场所，还是在人员密集的会议室里，他们都不喜欢口罩的“束缚”。运用Yolov5训练出来的口罩检测模型进行检测，就能准确实时的找到哪些人带了口罩、哪些人没带。可以做的定点提醒，或者是阻止他出入公共场所。节省了人力，大幅提高效率。</p><h1 id="三、检测效果"><a href="#三、检测效果" class="headerlink" title="三、检测效果"></a>三、检测效果</h1><p>因为我是拿CPU运行的，速度很慢，epoch取了5次，即每张图片学习了5次，一共有1200组训练数据，训练了三个半小时，之后在项目的实际应用的时候会考虑修改为GPU运行，这样速度可以提高很多。我们直接看模型的检测效果及视频的检测效果：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688045227-8b1adb7b-ed9f-494a-9d41-19b01685efec.png#averageHue=%23c7d4d0&clientId=u06340ca0-1712-4&from=paste&id=ue20b7863&originHeight=854&originWidth=1204&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=1003998&status=done&style=none&taskId=u2e260ae2-6799-4498-bbb3-d2c737ec7f4&title=" alt="image.png">编辑<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688044889-0a8be9d4-48fd-45fb-9c40-48bd37c334a0.png#averageHue=%237d6c58&clientId=u06340ca0-1712-4&from=paste&id=u1a280d64&originHeight=854&originWidth=1204&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=678172&status=done&style=none&taskId=udf1bfd7f-d4d3-495b-9ad0-7aa9f60d79f&title=" alt="image.png">编辑<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688046641-21efee3a-befd-4d14-bf1e-c5e33ba06879.png#averageHue=%23c5c7c2&clientId=u06340ca0-1712-4&from=paste&id=u4fdb7b9e&originHeight=854&originWidth=1204&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=786389&status=done&style=none&taskId=uf4a17d96-bf8a-463c-8a5a-844971d481d&title=" alt="image.png">编辑<br><img src="https://cdn.nlark.com/yuque/0/2023/gif/34335114/1692688046432-391ca471-5523-4704-b49a-ed73bff18a40.gif#averageHue=%2364819f&clientId=u06340ca0-1712-4&from=paste&id=u81bd5521&originHeight=400&originWidth=626&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&status=done&style=none&taskId=u148ce577-2c91-49f7-a4ad-39ab13e6a54&title=">编辑<br>通过上述例子可以看到，仅经过五次学习，识别的精度已经很高了，再一次感叹Yolov5的强大！</p><h1 id="四、数据集处理-添加标签"><a href="#四、数据集处理-添加标签" class="headerlink" title="四、数据集处理 添加标签"></a>四、数据集处理 添加标签</h1><p>训练的数据集总共有1200张戴口罩的和没戴口罩的照片，验证集有400张照片，对应的标签也已经存在相应的文件夹下。这里重点讲解下数据集标签的标注，我觉得这是Yolov5特别亲民的一个地方，也是他的强大之处——你可以标记你任何想标记的地方！<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688049800-a13f3c8b-ce8b-4ece-8d97-fba71a875928.png#averageHue=%234c4836&clientId=u06340ca0-1712-4&from=paste&id=uafc49a4e&originHeight=1370&originWidth=2561&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=3220925&status=done&style=none&taskId=u14d1ee64-be6e-43b4-a1be-00c7639a755&title=" alt="image.png">编辑<br>可以在你的虚拟环境中进入labelImg，这是他的界面。左侧open Dir可以打开数据集的文件夹，Change Save Dir是你的保存路径，Next和Prev Image分别是上一张和下一张图片。重点来了：Create RectBox绘制一个矩形框将你需要框选的对象框选出来，并添加标签。我这里框选了红色衣服的女士，并给她添加标签mask，说明她带了口罩。接着标记第二个人，直到所有的人都标记完之后，可以得到一个该图片的txt文件：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688047400-d4883b9a-10c8-4e23-9bb5-0be3c50b8336.png#averageHue=%23e7e5e3&clientId=u06340ca0-1712-4&from=paste&id=ud39f004f&originHeight=693&originWidth=1425&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=97617&status=done&style=none&taskId=uc87a4461-951a-4879-a714-8c938a7ea53&title=" alt="image.png">编辑<br>我们一行一行看，每一行代表着图片里面的一个人，第一个数字 0说明是第一类，在这里就是带了口罩，后两个数字是矩形框的的中心点坐标，最后两个数字是矩形框的长宽。在训练模型时要将原图片和对应的标签一起传入进去作为一组训练集，这样机器才能够慢慢认识一个人有没有戴口罩。</p><h1 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688048494-6b078925-2bb4-4926-84fe-51f92b442e1b.png#averageHue=%23c2d2e3&clientId=u06340ca0-1712-4&from=paste&id=uc73a8f3e&originHeight=2250&originWidth=3000&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=233213&status=done&style=none&taskId=u96f87094-dfb3-4b51-b7ef-cb17a6cdb54&title=" alt="image.png">编辑<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688048300-dd6bed32-eb97-4d85-8572-a3aac0881c07.png#averageHue=%23fcfcfc&clientId=u06340ca0-1712-4&from=paste&id=udd035b84&originHeight=1500&originWidth=2250&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=233993&status=done&style=none&taskId=ufc222b83-0f8c-4b43-a3ef-27eac173ea5&title=" alt="image.png">编辑<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688049154-84bb3ceb-e5da-42a4-8f5d-5e47be0ff79f.png#averageHue=%23fcfcfc&clientId=u06340ca0-1712-4&from=paste&id=u4a1b8f33&originHeight=1500&originWidth=2250&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=213083&status=done&style=none&taskId=uf5e039cc-4921-4452-8442-357caf44139&title=" alt="image.png">编辑 <img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688049267-b6474cfb-d4d0-4bf8-94ec-7ed6259a850f.png#averageHue=%23eff0f4&clientId=u06340ca0-1712-4&from=paste&id=u4cdee6d4&originHeight=1200&originWidth=2400&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=385788&status=done&style=none&taskId=u9cafc596-d2db-46ff-a869-e8dfe279c1f&title=" alt="image.png">编辑<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688050308-65c6cc7e-2396-4572-ac66-85795c1e63db.png#averageHue=%23fcfcfc&clientId=u06340ca0-1712-4&from=paste&id=u24b3d066&originHeight=1500&originWidth=2250&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=209090&status=done&style=none&taskId=u4b9858b0-0ac3-4394-92c2-947cd9c52bf&title=" alt="image.png">编辑 <img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1692688050371-24cbec62-0453-4e78-bbd4-004a05ec89ce.png#averageHue=%23fcfcfc&clientId=u06340ca0-1712-4&from=paste&id=u6fe62bba&originHeight=1500&originWidth=2250&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=215044&status=done&style=none&taskId=u1ad7205b-bffd-43a2-a652-01abc347f2b&title=" alt="image.png">编辑<br>从图中可以看出，仅训练了5次（即每张图片机器学习了5遍）， 对mask的识别精度可以达到0.564，对face的识别精度可以达到0.904，实在是恐怖！</p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>Yolov5真的是一个利器，确实要比CNN强大很多，里面复杂的神经网络函数复杂交错。这个开源项目让我再一次感受到了机器学习的强大，你可以让计算机认出他任何想要认出的东西，且识别的精度很高。比如说</p><ul><li><p>火灾检测，一片森林或楼道只要一有火焰的模样，计算机就能分辨出并报警，这样可以有效地减少经济损失甚至挽救生命。</p></li><li><p>安检检测，现在的地铁飞机安检，都是人观察扫描仪扫描出来的图像，看有没有可疑物体，如果用Yolov5训练出识别危险物品的模型，就能减少大量人力，且准确率可能比人还要高。</p></li><li><p>无人驾驶。通过yolov5检测车道和行人车辆，控制整个车子运转，只要有足够多的数据集，这个领域还是很值得探索的。</p></li></ul><p>这次实战让我深深明白了：人工智能 &#x3D; 人工+智能，先有人工才有智能，人工筛选标注数据集甚至会比搭建整个机器学习框架所用的时间更长，数据集的宝贵一不言而喻。每天我们看似习以为常的图片验证码（选出图片中的红绿灯）其实都在把我们当成他们免费的劳动力，在帮他们给图片添加标签，哈哈。未来的世界很广阔，人工智能的世界依旧很精彩，继续加油！如果你对本篇文章感兴趣也欢迎私信或者评论区交流哦！<br>想要继续深入研究的小伙伴可以看这几个文章：<br><a href="https://blog.csdn.net/ECHOSON/article/details/121939535?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166729520816800184146741%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166729520816800184146741&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121939535-null-null.142%5Ev62%5Econtrol_1,201%5Ev3%5Econtrol_2,213%5Ev1%5Econtrol&utm_term=yolov5%E5%8F%A3%E7%BD%A9%E8%AF%86%E5%88%AB&spm=1018.2226.3001.4187">手把手教你使用YOLOV5训练自己的目标检测模型-口罩检测-视频教程</a><br><a href="https://www.bilibili.com/video/BV1YL4y1J7xz/?spm_id_from=333.337.search-card.all.click">手把手教你使用YOLOV5训练自己的目标检测模型</a><br><a href="https://www.bilibili.com/video/BV1YL4y1J7xz?p=6&vd_source=d01f7c6230ed1510e94986cbe310da1a">电脑是如何学会瞬间识别物体的</a></p><h1 id="七、模型代码（部分）"><a href="#七、模型代码（部分）" class="headerlink" title="七、模型代码（部分）"></a>七、模型代码（部分）</h1><h3 id="源于博主肆十二：手把手教你使用YOLOV5训练自己的目标检测模型，链接如上"><a href="#源于博主肆十二：手把手教你使用YOLOV5训练自己的目标检测模型，链接如上" class="headerlink" title="源于博主肆十二：手把手教你使用YOLOV5训练自己的目标检测模型，链接如上"></a>源于博主肆十二：手把手教你使用YOLOV5训练自己的目标检测模型，链接如上</h3><p><strong>训练模型：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YOLOv5 🚀 by Ultralytics, GPL-3.0 license</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Train a YOLOv5 model on a custom dataset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    $ python path/to/train.py --data coco128.yaml --weights yolov5s.pt --img 640</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> torch.cuda <span class="keyword">import</span> amp</span><br><span class="line"><span class="keyword">from</span> torch.nn.parallel <span class="keyword">import</span> DistributedDataParallel <span class="keyword">as</span> DDP</span><br><span class="line"><span class="keyword">from</span> torch.optim <span class="keyword">import</span> SGD, Adam, lr_scheduler</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">FILE = Path(__file__).resolve()</span><br><span class="line">ROOT = FILE.parents[<span class="number">0</span>]  <span class="comment"># YOLOv5 root directory</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">str</span>(ROOT) <span class="keyword">not</span> <span class="keyword">in</span> sys.path:</span><br><span class="line">    sys.path.append(<span class="built_in">str</span>(ROOT))  <span class="comment"># add ROOT to PATH</span></span><br><span class="line">ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  <span class="comment"># relative</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> val  <span class="comment"># for end-of-epoch mAP</span></span><br><span class="line"><span class="keyword">from</span> models.experimental <span class="keyword">import</span> attempt_load</span><br><span class="line"><span class="keyword">from</span> models.yolo <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> utils.autoanchor <span class="keyword">import</span> check_anchors</span><br><span class="line"><span class="keyword">from</span> utils.autobatch <span class="keyword">import</span> check_train_batch_size</span><br><span class="line"><span class="keyword">from</span> utils.callbacks <span class="keyword">import</span> Callbacks</span><br><span class="line"><span class="keyword">from</span> utils.datasets <span class="keyword">import</span> create_dataloader</span><br><span class="line"><span class="keyword">from</span> utils.downloads <span class="keyword">import</span> attempt_download</span><br><span class="line"><span class="keyword">from</span> utils.general <span class="keyword">import</span> (LOGGER, NCOLS, check_dataset, check_file, check_git_status, check_img_size,</span><br><span class="line">                           check_requirements, check_suffix, check_yaml, colorstr, get_latest_run, increment_path,</span><br><span class="line">                           init_seeds, intersect_dicts, labels_to_class_weights, labels_to_image_weights, methods,</span><br><span class="line">                           one_cycle, print_args, print_mutation, strip_optimizer)</span><br><span class="line"><span class="keyword">from</span> utils.loggers <span class="keyword">import</span> Loggers</span><br><span class="line"><span class="keyword">from</span> utils.loggers.wandb.wandb_utils <span class="keyword">import</span> check_wandb_resume</span><br><span class="line"><span class="keyword">from</span> utils.loss <span class="keyword">import</span> ComputeLoss</span><br><span class="line"><span class="keyword">from</span> utils.metrics <span class="keyword">import</span> fitness</span><br><span class="line"><span class="keyword">from</span> utils.plots <span class="keyword">import</span> plot_evolve, plot_labels</span><br><span class="line"><span class="keyword">from</span> utils.torch_utils <span class="keyword">import</span> EarlyStopping, ModelEMA, de_parallel, select_device, torch_distributed_zero_first</span><br><span class="line"></span><br><span class="line">LOCAL_RANK = <span class="built_in">int</span>(os.getenv(<span class="string">&#x27;LOCAL_RANK&#x27;</span>, -<span class="number">1</span>))  <span class="comment"># https://pytorch.org/docs/stable/elastic/run.html</span></span><br><span class="line">RANK = <span class="built_in">int</span>(os.getenv(<span class="string">&#x27;RANK&#x27;</span>, -<span class="number">1</span>))</span><br><span class="line">WORLD_SIZE = <span class="built_in">int</span>(os.getenv(<span class="string">&#x27;WORLD_SIZE&#x27;</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">hyp,  <span class="comment"># path/to/hyp.yaml or hyp dictionary</span></span></span><br><span class="line"><span class="params">          opt,</span></span><br><span class="line"><span class="params">          device,</span></span><br><span class="line"><span class="params">          callbacks</span></span><br><span class="line"><span class="params">          </span>):</span><br><span class="line">    save_dir, epochs, batch_size, weights, single_cls, evolve, data, cfg, resume, noval, nosave, workers, freeze, = \</span><br><span class="line">        Path(opt.save_dir), opt.epochs, opt.batch_size, opt.weights, opt.single_cls, opt.evolve, opt.data, opt.cfg, \</span><br><span class="line">        opt.resume, opt.noval, opt.nosave, opt.workers, opt.freeze</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Directories</span></span><br><span class="line">    w = save_dir / <span class="string">&#x27;weights&#x27;</span>  <span class="comment"># weights dir</span></span><br><span class="line">    (w.parent <span class="keyword">if</span> evolve <span class="keyword">else</span> w).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)  <span class="comment"># make dir</span></span><br><span class="line">    last, best = w / <span class="string">&#x27;last.pt&#x27;</span>, w / <span class="string">&#x27;best.pt&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Hyperparameters</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(hyp, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(hyp, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            hyp = yaml.safe_load(f)  <span class="comment"># load hyps dict</span></span><br><span class="line">    LOGGER.info(colorstr(<span class="string">&#x27;hyperparameters: &#x27;</span>) + <span class="string">&#x27;, &#x27;</span>.join(<span class="string">f&#x27;<span class="subst">&#123;k&#125;</span>=<span class="subst">&#123;v&#125;</span>&#x27;</span> <span class="keyword">for</span> k, v <span class="keyword">in</span> hyp.items()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Save run settings</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_dir / <span class="string">&#x27;hyp.yaml&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        yaml.safe_dump(hyp, f, sort_keys=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_dir / <span class="string">&#x27;opt.yaml&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        yaml.safe_dump(<span class="built_in">vars</span>(opt), f, sort_keys=<span class="literal">False</span>)</span><br><span class="line">    data_dict = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Loggers</span></span><br><span class="line">    <span class="keyword">if</span> RANK <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>]:</span><br><span class="line">        loggers = Loggers(save_dir, weights, opt, hyp, LOGGER)  <span class="comment"># loggers instance</span></span><br><span class="line">        <span class="keyword">if</span> loggers.wandb:</span><br><span class="line">            data_dict = loggers.wandb.data_dict</span><br><span class="line">            <span class="keyword">if</span> resume:</span><br><span class="line">                weights, epochs, hyp = opt.weights, opt.epochs, opt.hyp</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Register actions</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> methods(loggers):</span><br><span class="line">            callbacks.register_action(k, callback=<span class="built_in">getattr</span>(loggers, k))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Config</span></span><br><span class="line">    plots = <span class="keyword">not</span> evolve  <span class="comment"># create plots</span></span><br><span class="line">    cuda = device.<span class="built_in">type</span> != <span class="string">&#x27;cpu&#x27;</span></span><br><span class="line">    init_seeds(<span class="number">1</span> + RANK)</span><br><span class="line">    <span class="keyword">with</span> torch_distributed_zero_first(LOCAL_RANK):</span><br><span class="line">        data_dict = data_dict <span class="keyword">or</span> check_dataset(data)  <span class="comment"># check if None</span></span><br><span class="line">    train_path, val_path = data_dict[<span class="string">&#x27;train&#x27;</span>], data_dict[<span class="string">&#x27;val&#x27;</span>]</span><br><span class="line">    nc = <span class="number">1</span> <span class="keyword">if</span> single_cls <span class="keyword">else</span> <span class="built_in">int</span>(data_dict[<span class="string">&#x27;nc&#x27;</span>])  <span class="comment"># number of classes</span></span><br><span class="line">    names = [<span class="string">&#x27;item&#x27;</span>] <span class="keyword">if</span> single_cls <span class="keyword">and</span> <span class="built_in">len</span>(data_dict[<span class="string">&#x27;names&#x27;</span>]) != <span class="number">1</span> <span class="keyword">else</span> data_dict[<span class="string">&#x27;names&#x27;</span>]  <span class="comment"># class names</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(names) == nc, <span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">len</span>(names)&#125;</span> names found for nc=<span class="subst">&#123;nc&#125;</span> dataset in <span class="subst">&#123;data&#125;</span>&#x27;</span>  <span class="comment"># check</span></span><br><span class="line">    is_coco = <span class="built_in">isinstance</span>(val_path, <span class="built_in">str</span>) <span class="keyword">and</span> val_path.endswith(<span class="string">&#x27;coco/val2017.txt&#x27;</span>)  <span class="comment"># COCO dataset</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Model</span></span><br><span class="line">    check_suffix(weights, <span class="string">&#x27;.pt&#x27;</span>)  <span class="comment"># check weights</span></span><br><span class="line">    pretrained = weights.endswith(<span class="string">&#x27;.pt&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        <span class="keyword">with</span> torch_distributed_zero_first(LOCAL_RANK):</span><br><span class="line">            weights = attempt_download(weights)  <span class="comment"># download if not found locally</span></span><br><span class="line">        ckpt = torch.load(weights, map_location=device)  <span class="comment"># load checkpoint</span></span><br><span class="line">        model = Model(cfg <span class="keyword">or</span> ckpt[<span class="string">&#x27;model&#x27;</span>].yaml, ch=<span class="number">3</span>, nc=nc, anchors=hyp.get(<span class="string">&#x27;anchors&#x27;</span>)).to(device)  <span class="comment"># create</span></span><br><span class="line">        exclude = [<span class="string">&#x27;anchor&#x27;</span>] <span class="keyword">if</span> (cfg <span class="keyword">or</span> hyp.get(<span class="string">&#x27;anchors&#x27;</span>)) <span class="keyword">and</span> <span class="keyword">not</span> resume <span class="keyword">else</span> []  <span class="comment"># exclude keys</span></span><br><span class="line">        csd = ckpt[<span class="string">&#x27;model&#x27;</span>].<span class="built_in">float</span>().state_dict()  <span class="comment"># checkpoint state_dict as FP32</span></span><br><span class="line">        csd = intersect_dicts(csd, model.state_dict(), exclude=exclude)  <span class="comment"># intersect</span></span><br><span class="line">        model.load_state_dict(csd, strict=<span class="literal">False</span>)  <span class="comment"># load</span></span><br><span class="line">        LOGGER.info(<span class="string">f&#x27;Transferred <span class="subst">&#123;<span class="built_in">len</span>(csd)&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(model.state_dict())&#125;</span> items from <span class="subst">&#123;weights&#125;</span>&#x27;</span>)  <span class="comment"># report</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        model = Model(cfg, ch=<span class="number">3</span>, nc=nc, anchors=hyp.get(<span class="string">&#x27;anchors&#x27;</span>)).to(device)  <span class="comment"># create</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Freeze</span></span><br><span class="line">    freeze = [<span class="string">f&#x27;model.<span class="subst">&#123;x&#125;</span>.&#x27;</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(freeze)]  <span class="comment"># layers to freeze</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">        v.requires_grad = <span class="literal">True</span>  <span class="comment"># train all layers</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> k <span class="keyword">for</span> x <span class="keyword">in</span> freeze):</span><br><span class="line">            LOGGER.info(<span class="string">f&#x27;freezing <span class="subst">&#123;k&#125;</span>&#x27;</span>)</span><br><span class="line">            v.requires_grad = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Image size</span></span><br><span class="line">    gs = <span class="built_in">max</span>(<span class="built_in">int</span>(model.stride.<span class="built_in">max</span>()), <span class="number">32</span>)  <span class="comment"># grid size (max stride)</span></span><br><span class="line">    imgsz = check_img_size(opt.imgsz, gs, floor=gs * <span class="number">2</span>)  <span class="comment"># verify imgsz is gs-multiple</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Batch size</span></span><br><span class="line">    <span class="keyword">if</span> RANK == -<span class="number">1</span> <span class="keyword">and</span> batch_size == -<span class="number">1</span>:  <span class="comment"># single-GPU only, estimate best batch size</span></span><br><span class="line">        batch_size = check_train_batch_size(model, imgsz)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Optimizer</span></span><br><span class="line">    nbs = <span class="number">64</span>  <span class="comment"># nominal batch size</span></span><br><span class="line">    accumulate = <span class="built_in">max</span>(<span class="built_in">round</span>(nbs / batch_size), <span class="number">1</span>)  <span class="comment"># accumulate loss before optimizing</span></span><br><span class="line">    hyp[<span class="string">&#x27;weight_decay&#x27;</span>] *= batch_size * accumulate / nbs  <span class="comment"># scale weight_decay</span></span><br><span class="line">    LOGGER.info(<span class="string">f&quot;Scaled weight_decay = <span class="subst">&#123;hyp[<span class="string">&#x27;weight_decay&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    g0, g1, g2 = [], [], []  <span class="comment"># optimizer parameter groups</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> model.modules():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(v, <span class="string">&#x27;bias&#x27;</span>) <span class="keyword">and</span> <span class="built_in">isinstance</span>(v.bias, nn.Parameter):  <span class="comment"># bias</span></span><br><span class="line">            g2.append(v.bias)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, nn.BatchNorm2d):  <span class="comment"># weight (no decay)</span></span><br><span class="line">            g0.append(v.weight)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(v, <span class="string">&#x27;weight&#x27;</span>) <span class="keyword">and</span> <span class="built_in">isinstance</span>(v.weight, nn.Parameter):  <span class="comment"># weight (with decay)</span></span><br><span class="line">            g1.append(v.weight)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> opt.adam:</span><br><span class="line">        optimizer = Adam(g0, lr=hyp[<span class="string">&#x27;lr0&#x27;</span>], betas=(hyp[<span class="string">&#x27;momentum&#x27;</span>], <span class="number">0.999</span>))  <span class="comment"># adjust beta1 to momentum</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        optimizer = SGD(g0, lr=hyp[<span class="string">&#x27;lr0&#x27;</span>], momentum=hyp[<span class="string">&#x27;momentum&#x27;</span>], nesterov=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    optimizer.add_param_group(&#123;<span class="string">&#x27;params&#x27;</span>: g1, <span class="string">&#x27;weight_decay&#x27;</span>: hyp[<span class="string">&#x27;weight_decay&#x27;</span>]&#125;)  <span class="comment"># add g1 with weight_decay</span></span><br><span class="line">    optimizer.add_param_group(&#123;<span class="string">&#x27;params&#x27;</span>: g2&#125;)  <span class="comment"># add g2 (biases)</span></span><br><span class="line">    LOGGER.info(<span class="string">f&quot;<span class="subst">&#123;colorstr(<span class="string">&#x27;optimizer:&#x27;</span>)&#125;</span> <span class="subst">&#123;<span class="built_in">type</span>(optimizer).__name__&#125;</span> with parameter groups &quot;</span></span><br><span class="line">                <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(g0)&#125;</span> weight, <span class="subst">&#123;<span class="built_in">len</span>(g1)&#125;</span> weight (no decay), <span class="subst">&#123;<span class="built_in">len</span>(g2)&#125;</span> bias&quot;</span>)</span><br><span class="line">    <span class="keyword">del</span> g0, g1, g2</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Scheduler</span></span><br><span class="line">    <span class="keyword">if</span> opt.linear_lr:</span><br><span class="line">        lf = <span class="keyword">lambda</span> x: (<span class="number">1</span> - x / (epochs - <span class="number">1</span>)) * (<span class="number">1.0</span> - hyp[<span class="string">&#x27;lrf&#x27;</span>]) + hyp[<span class="string">&#x27;lrf&#x27;</span>]  <span class="comment"># linear</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        lf = one_cycle(<span class="number">1</span>, hyp[<span class="string">&#x27;lrf&#x27;</span>], epochs)  <span class="comment"># cosine 1-&gt;hyp[&#x27;lrf&#x27;]</span></span><br><span class="line">    scheduler = lr_scheduler.LambdaLR(optimizer, lr_lambda=lf)  <span class="comment"># plot_lr_scheduler(optimizer, scheduler, epochs)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># EMA</span></span><br><span class="line">    ema = ModelEMA(model) <span class="keyword">if</span> RANK <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>] <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Resume</span></span><br><span class="line">    start_epoch, best_fitness = <span class="number">0</span>, <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        <span class="comment"># Optimizer</span></span><br><span class="line">        <span class="keyword">if</span> ckpt[<span class="string">&#x27;optimizer&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            optimizer.load_state_dict(ckpt[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line">            best_fitness = ckpt[<span class="string">&#x27;best_fitness&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># EMA</span></span><br><span class="line">        <span class="keyword">if</span> ema <span class="keyword">and</span> ckpt.get(<span class="string">&#x27;ema&#x27;</span>):</span><br><span class="line">            ema.ema.load_state_dict(ckpt[<span class="string">&#x27;ema&#x27;</span>].<span class="built_in">float</span>().state_dict())</span><br><span class="line">            ema.updates = ckpt[<span class="string">&#x27;updates&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Epochs</span></span><br><span class="line">        start_epoch = ckpt[<span class="string">&#x27;epoch&#x27;</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> resume:</span><br><span class="line">            <span class="keyword">assert</span> start_epoch &gt; <span class="number">0</span>, <span class="string">f&#x27;<span class="subst">&#123;weights&#125;</span> training to <span class="subst">&#123;epochs&#125;</span> epochs is finished, nothing to resume.&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> epochs &lt; start_epoch:</span><br><span class="line">            LOGGER.info(<span class="string">f&quot;<span class="subst">&#123;weights&#125;</span> has been trained for <span class="subst">&#123;ckpt[<span class="string">&#x27;epoch&#x27;</span>]&#125;</span> epochs. Fine-tuning for <span class="subst">&#123;epochs&#125;</span> more epochs.&quot;</span>)</span><br><span class="line">            epochs += ckpt[<span class="string">&#x27;epoch&#x27;</span>]  <span class="comment"># finetune additional epochs</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">del</span> ckpt, csd</span><br><span class="line"></span><br><span class="line">    <span class="comment"># DP mode</span></span><br><span class="line">    <span class="keyword">if</span> cuda <span class="keyword">and</span> RANK == -<span class="number">1</span> <span class="keyword">and</span> torch.cuda.device_count() &gt; <span class="number">1</span>:</span><br><span class="line">        LOGGER.warning(<span class="string">&#x27;WARNING: DP not recommended, use torch.distributed.run for best DDP Multi-GPU results.\n&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;See Multi-GPU Tutorial at https://github.com/ultralytics/yolov5/issues/475 to get started.&#x27;</span>)</span><br><span class="line">        model = torch.nn.DataParallel(model)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SyncBatchNorm</span></span><br><span class="line">    <span class="keyword">if</span> opt.sync_bn <span class="keyword">and</span> cuda <span class="keyword">and</span> RANK != -<span class="number">1</span>:</span><br><span class="line">        model = torch.nn.SyncBatchNorm.convert_sync_batchnorm(model).to(device)</span><br><span class="line">        LOGGER.info(<span class="string">&#x27;Using SyncBatchNorm()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Trainloader</span></span><br><span class="line">    train_loader, dataset = create_dataloader(train_path, imgsz, batch_size // WORLD_SIZE, gs, single_cls,</span><br><span class="line">                                              hyp=hyp, augment=<span class="literal">True</span>, cache=opt.cache, rect=opt.rect, rank=LOCAL_RANK,</span><br><span class="line">                                              workers=workers, image_weights=opt.image_weights, quad=opt.quad,</span><br><span class="line">                                              prefix=colorstr(<span class="string">&#x27;train: &#x27;</span>), shuffle=<span class="literal">True</span>)</span><br><span class="line">    mlc = <span class="built_in">int</span>(np.concatenate(dataset.labels, <span class="number">0</span>)[:, <span class="number">0</span>].<span class="built_in">max</span>())  <span class="comment"># max label class</span></span><br><span class="line">    nb = <span class="built_in">len</span>(train_loader)  <span class="comment"># number of batches</span></span><br><span class="line">    <span class="keyword">assert</span> mlc &lt; nc, <span class="string">f&#x27;Label class <span class="subst">&#123;mlc&#125;</span> exceeds nc=<span class="subst">&#123;nc&#125;</span> in <span class="subst">&#123;data&#125;</span>. Possible class labels are 0-<span class="subst">&#123;nc - <span class="number">1</span>&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Process 0</span></span><br><span class="line">    <span class="keyword">if</span> RANK <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>]:</span><br><span class="line">        val_loader = create_dataloader(val_path, imgsz, batch_size // WORLD_SIZE * <span class="number">2</span>, gs, single_cls,</span><br><span class="line">                                       hyp=hyp, cache=<span class="literal">None</span> <span class="keyword">if</span> noval <span class="keyword">else</span> opt.cache, rect=<span class="literal">True</span>, rank=-<span class="number">1</span>,</span><br><span class="line">                                       workers=workers, pad=<span class="number">0.5</span>,</span><br><span class="line">                                       prefix=colorstr(<span class="string">&#x27;val: &#x27;</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> resume:</span><br><span class="line">            labels = np.concatenate(dataset.labels, <span class="number">0</span>)</span><br><span class="line">            <span class="comment"># c = torch.tensor(labels[:, 0])  # classes</span></span><br><span class="line">            <span class="comment"># cf = torch.bincount(c.long(), minlength=nc) + 1.  # frequency</span></span><br><span class="line">            <span class="comment"># model._initialize_biases(cf.to(device))</span></span><br><span class="line">            <span class="keyword">if</span> plots:</span><br><span class="line">                plot_labels(labels, names, save_dir)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Anchors</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> opt.noautoanchor:</span><br><span class="line">                check_anchors(dataset, model=model, thr=hyp[<span class="string">&#x27;anchor_t&#x27;</span>], imgsz=imgsz)</span><br><span class="line">            model.half().<span class="built_in">float</span>()  <span class="comment"># pre-reduce anchor precision</span></span><br><span class="line"></span><br><span class="line">        callbacks.run(<span class="string">&#x27;on_pretrain_routine_end&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># DDP mode</span></span><br><span class="line">    <span class="keyword">if</span> cuda <span class="keyword">and</span> RANK != -<span class="number">1</span>:</span><br><span class="line">        model = DDP(model, device_ids=[LOCAL_RANK], output_device=LOCAL_RANK)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Model attributes</span></span><br><span class="line">    nl = de_parallel(model).model[-<span class="number">1</span>].nl  <span class="comment"># number of detection layers (to scale hyps)</span></span><br><span class="line">    hyp[<span class="string">&#x27;box&#x27;</span>] *= <span class="number">3</span> / nl  <span class="comment"># scale to layers</span></span><br><span class="line">    hyp[<span class="string">&#x27;cls&#x27;</span>] *= nc / <span class="number">80</span> * <span class="number">3</span> / nl  <span class="comment"># scale to classes and layers</span></span><br><span class="line">    hyp[<span class="string">&#x27;obj&#x27;</span>] *= (imgsz / <span class="number">640</span>) ** <span class="number">2</span> * <span class="number">3</span> / nl  <span class="comment"># scale to image size and layers</span></span><br><span class="line">    hyp[<span class="string">&#x27;label_smoothing&#x27;</span>] = opt.label_smoothing</span><br><span class="line">    model.nc = nc  <span class="comment"># attach number of classes to model</span></span><br><span class="line">    model.hyp = hyp  <span class="comment"># attach hyperparameters to model</span></span><br><span class="line">    model.class_weights = labels_to_class_weights(dataset.labels, nc).to(device) * nc  <span class="comment"># attach class weights</span></span><br><span class="line">    model.names = names</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Start training</span></span><br><span class="line">    t0 = time.time()</span><br><span class="line">    nw = <span class="built_in">max</span>(<span class="built_in">round</span>(hyp[<span class="string">&#x27;warmup_epochs&#x27;</span>] * nb), <span class="number">1000</span>)  <span class="comment"># number of warmup iterations, max(3 epochs, 1k iterations)</span></span><br><span class="line">    <span class="comment"># nw = min(nw, (epochs - start_epoch) / 2 * nb)  # limit warmup to &lt; 1/2 of training</span></span><br><span class="line">    last_opt_step = -<span class="number">1</span></span><br><span class="line">    maps = np.zeros(nc)  <span class="comment"># mAP per class</span></span><br><span class="line">    results = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># P, R, mAP@.5, mAP@.5-.95, val_loss(box, obj, cls)</span></span><br><span class="line">    scheduler.last_epoch = start_epoch - <span class="number">1</span>  <span class="comment"># do not move</span></span><br><span class="line">    scaler = amp.GradScaler(enabled=cuda)</span><br><span class="line">    stopper = EarlyStopping(patience=opt.patience)</span><br><span class="line">    compute_loss = ComputeLoss(model)  <span class="comment"># init loss class</span></span><br><span class="line">    LOGGER.info(<span class="string">f&#x27;Image sizes <span class="subst">&#123;imgsz&#125;</span> train, <span class="subst">&#123;imgsz&#125;</span> val\n&#x27;</span></span><br><span class="line">                <span class="string">f&#x27;Using <span class="subst">&#123;train_loader.num_workers * WORLD_SIZE&#125;</span> dataloader workers\n&#x27;</span></span><br><span class="line">                <span class="string">f&quot;Logging results to <span class="subst">&#123;colorstr(<span class="string">&#x27;bold&#x27;</span>, save_dir)&#125;</span>\n&quot;</span></span><br><span class="line">                <span class="string">f&#x27;Starting training for <span class="subst">&#123;epochs&#125;</span> epochs...&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(start_epoch, epochs):  <span class="comment"># epoch ------------------------------------------------------------------</span></span><br><span class="line">        model.train()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Update image weights (optional, single-GPU only)</span></span><br><span class="line">        <span class="keyword">if</span> opt.image_weights:</span><br><span class="line">            cw = model.class_weights.cpu().numpy() * (<span class="number">1</span> - maps) ** <span class="number">2</span> / nc  <span class="comment"># class weights</span></span><br><span class="line">            iw = labels_to_image_weights(dataset.labels, nc=nc, class_weights=cw)  <span class="comment"># image weights</span></span><br><span class="line">            dataset.indices = random.choices(<span class="built_in">range</span>(dataset.n), weights=iw, k=dataset.n)  <span class="comment"># rand weighted idx</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Update mosaic border (optional)</span></span><br><span class="line">        <span class="comment"># b = int(random.uniform(0.25 * imgsz, 0.75 * imgsz + gs) // gs * gs)</span></span><br><span class="line">        <span class="comment"># dataset.mosaic_border = [b - imgsz, -b]  # height, width borders</span></span><br><span class="line"></span><br><span class="line">        mloss = torch.zeros(<span class="number">3</span>, device=device)  <span class="comment"># mean losses</span></span><br><span class="line">        <span class="keyword">if</span> RANK != -<span class="number">1</span>:</span><br><span class="line">            train_loader.sampler.set_epoch(epoch)</span><br><span class="line">        pbar = <span class="built_in">enumerate</span>(train_loader)</span><br><span class="line">        LOGGER.info((<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;%10s&#x27;</span> * <span class="number">7</span>) % (<span class="string">&#x27;Epoch&#x27;</span>, <span class="string">&#x27;gpu_mem&#x27;</span>, <span class="string">&#x27;box&#x27;</span>, <span class="string">&#x27;obj&#x27;</span>, <span class="string">&#x27;cls&#x27;</span>, <span class="string">&#x27;labels&#x27;</span>, <span class="string">&#x27;img_size&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> RANK <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>]:</span><br><span class="line">            pbar = tqdm(pbar, total=nb, ncols=NCOLS, bar_format=<span class="string">&#x27;&#123;l_bar&#125;&#123;bar:10&#125;&#123;r_bar&#125;&#123;bar:-10b&#125;&#x27;</span>)  <span class="comment"># progress bar</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        <span class="keyword">for</span> i, (imgs, targets, paths, _) <span class="keyword">in</span> pbar:  <span class="comment"># batch -------------------------------------------------------------</span></span><br><span class="line">            ni = i + nb * epoch  <span class="comment"># number integrated batches (since train start)</span></span><br><span class="line">            imgs = imgs.to(device, non_blocking=<span class="literal">True</span>).<span class="built_in">float</span>() / <span class="number">255</span>  <span class="comment"># uint8 to float32, 0-255 to 0.0-1.0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Warmup</span></span><br><span class="line">            <span class="keyword">if</span> ni &lt;= nw:</span><br><span class="line">                xi = [<span class="number">0</span>, nw]  <span class="comment"># x interp</span></span><br><span class="line">                <span class="comment"># compute_loss.gr = np.interp(ni, xi, [0.0, 1.0])  # iou loss ratio (obj_loss = 1.0 or iou)</span></span><br><span class="line">                accumulate = <span class="built_in">max</span>(<span class="number">1</span>, np.interp(ni, xi, [<span class="number">1</span>, nbs / batch_size]).<span class="built_in">round</span>())</span><br><span class="line">                <span class="keyword">for</span> j, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(optimizer.param_groups):</span><br><span class="line">                    <span class="comment"># bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0</span></span><br><span class="line">                    x[<span class="string">&#x27;lr&#x27;</span>] = np.interp(ni, xi, [hyp[<span class="string">&#x27;warmup_bias_lr&#x27;</span>] <span class="keyword">if</span> j == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0.0</span>, x[<span class="string">&#x27;initial_lr&#x27;</span>] * lf(epoch)])</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;momentum&#x27;</span> <span class="keyword">in</span> x:</span><br><span class="line">                        x[<span class="string">&#x27;momentum&#x27;</span>] = np.interp(ni, xi, [hyp[<span class="string">&#x27;warmup_momentum&#x27;</span>], hyp[<span class="string">&#x27;momentum&#x27;</span>]])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Multi-scale</span></span><br><span class="line">            <span class="keyword">if</span> opt.multi_scale:</span><br><span class="line">                sz = random.randrange(imgsz * <span class="number">0.5</span>, imgsz * <span class="number">1.5</span> + gs) // gs * gs  <span class="comment"># size</span></span><br><span class="line">                sf = sz / <span class="built_in">max</span>(imgs.shape[<span class="number">2</span>:])  <span class="comment"># scale factor</span></span><br><span class="line">                <span class="keyword">if</span> sf != <span class="number">1</span>:</span><br><span class="line">                    ns = [math.ceil(x * sf / gs) * gs <span class="keyword">for</span> x <span class="keyword">in</span> imgs.shape[<span class="number">2</span>:]]  <span class="comment"># new shape (stretched to gs-multiple)</span></span><br><span class="line">                    imgs = nn.functional.interpolate(imgs, size=ns, mode=<span class="string">&#x27;bilinear&#x27;</span>, align_corners=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Forward</span></span><br><span class="line">            <span class="keyword">with</span> amp.autocast(enabled=cuda):</span><br><span class="line">                pred = model(imgs)  <span class="comment"># forward</span></span><br><span class="line">                loss, loss_items = compute_loss(pred, targets.to(device))  <span class="comment"># loss scaled by batch_size</span></span><br><span class="line">                <span class="keyword">if</span> RANK != -<span class="number">1</span>:</span><br><span class="line">                    loss *= WORLD_SIZE  <span class="comment"># gradient averaged between devices in DDP mode</span></span><br><span class="line">                <span class="keyword">if</span> opt.quad:</span><br><span class="line">                    loss *= <span class="number">4.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Backward</span></span><br><span class="line">            scaler.scale(loss).backward()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Optimize</span></span><br><span class="line">            <span class="keyword">if</span> ni - last_opt_step &gt;= accumulate:</span><br><span class="line">                scaler.step(optimizer)  <span class="comment"># optimizer.step</span></span><br><span class="line">                scaler.update()</span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line">                <span class="keyword">if</span> ema:</span><br><span class="line">                    ema.update(model)</span><br><span class="line">                last_opt_step = ni</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Log</span></span><br><span class="line">            <span class="keyword">if</span> RANK <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>]:</span><br><span class="line">                mloss = (mloss * i + loss_items) / (i + <span class="number">1</span>)  <span class="comment"># update mean losses</span></span><br><span class="line">                mem = <span class="string">f&#x27;<span class="subst">&#123;torch.cuda.memory_reserved() / <span class="number">1E9</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="number">0</span>:<span class="number">.3</span>g&#125;</span>G&#x27;</span>  <span class="comment"># (GB)</span></span><br><span class="line">                pbar.set_description((<span class="string">&#x27;%10s&#x27;</span> * <span class="number">2</span> + <span class="string">&#x27;%10.4g&#x27;</span> * <span class="number">5</span>) % (</span><br><span class="line">                    <span class="string">f&#x27;<span class="subst">&#123;epoch&#125;</span>/<span class="subst">&#123;epochs - <span class="number">1</span>&#125;</span>&#x27;</span>, mem, *mloss, targets.shape[<span class="number">0</span>], imgs.shape[-<span class="number">1</span>]))</span><br><span class="line">                callbacks.run(<span class="string">&#x27;on_train_batch_end&#x27;</span>, ni, model, imgs, targets, paths, plots, opt.sync_bn)</span><br><span class="line">            <span class="comment"># end batch ------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Scheduler</span></span><br><span class="line">        lr = [x[<span class="string">&#x27;lr&#x27;</span>] <span class="keyword">for</span> x <span class="keyword">in</span> optimizer.param_groups]  <span class="comment"># for loggers</span></span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> RANK <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>]:</span><br><span class="line">            <span class="comment"># mAP</span></span><br><span class="line">            callbacks.run(<span class="string">&#x27;on_train_epoch_end&#x27;</span>, epoch=epoch)</span><br><span class="line">            ema.update_attr(model, include=[<span class="string">&#x27;yaml&#x27;</span>, <span class="string">&#x27;nc&#x27;</span>, <span class="string">&#x27;hyp&#x27;</span>, <span class="string">&#x27;names&#x27;</span>, <span class="string">&#x27;stride&#x27;</span>, <span class="string">&#x27;class_weights&#x27;</span>])</span><br><span class="line">            final_epoch = (epoch + <span class="number">1</span> == epochs) <span class="keyword">or</span> stopper.possible_stop</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> noval <span class="keyword">or</span> final_epoch:  <span class="comment"># Calculate mAP</span></span><br><span class="line">                results, maps, _ = val.run(data_dict,</span><br><span class="line">                                           batch_size=batch_size // WORLD_SIZE * <span class="number">2</span>,</span><br><span class="line">                                           imgsz=imgsz,</span><br><span class="line">                                           model=ema.ema,</span><br><span class="line">                                           single_cls=single_cls,</span><br><span class="line">                                           dataloader=val_loader,</span><br><span class="line">                                           save_dir=save_dir,</span><br><span class="line">                                           plots=<span class="literal">False</span>,</span><br><span class="line">                                           callbacks=callbacks,</span><br><span class="line">                                           compute_loss=compute_loss)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Update best mAP</span></span><br><span class="line">            fi = fitness(np.array(results).reshape(<span class="number">1</span>, -<span class="number">1</span>))  <span class="comment"># weighted combination of [P, R, mAP@.5, mAP@.5-.95]</span></span><br><span class="line">            <span class="keyword">if</span> fi &gt; best_fitness:</span><br><span class="line">                best_fitness = fi</span><br><span class="line">            log_vals = <span class="built_in">list</span>(mloss) + <span class="built_in">list</span>(results) + lr</span><br><span class="line">            callbacks.run(<span class="string">&#x27;on_fit_epoch_end&#x27;</span>, log_vals, epoch, best_fitness, fi)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Save model</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> nosave) <span class="keyword">or</span> (final_epoch <span class="keyword">and</span> <span class="keyword">not</span> evolve):  <span class="comment"># if save</span></span><br><span class="line">                ckpt = &#123;<span class="string">&#x27;epoch&#x27;</span>: epoch,</span><br><span class="line">                        <span class="string">&#x27;best_fitness&#x27;</span>: best_fitness,</span><br><span class="line">                        <span class="string">&#x27;model&#x27;</span>: deepcopy(de_parallel(model)).half(),</span><br><span class="line">                        <span class="string">&#x27;ema&#x27;</span>: deepcopy(ema.ema).half(),</span><br><span class="line">                        <span class="string">&#x27;updates&#x27;</span>: ema.updates,</span><br><span class="line">                        <span class="string">&#x27;optimizer&#x27;</span>: optimizer.state_dict(),</span><br><span class="line">                        <span class="string">&#x27;wandb_id&#x27;</span>: loggers.wandb.wandb_run.<span class="built_in">id</span> <span class="keyword">if</span> loggers.wandb <span class="keyword">else</span> <span class="literal">None</span>,</span><br><span class="line">                        <span class="string">&#x27;date&#x27;</span>: datetime.now().isoformat()&#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Save last, best and delete</span></span><br><span class="line">                torch.save(ckpt, last)</span><br><span class="line">                <span class="keyword">if</span> best_fitness == fi:</span><br><span class="line">                    torch.save(ckpt, best)</span><br><span class="line">                <span class="keyword">if</span> (epoch &gt; <span class="number">0</span>) <span class="keyword">and</span> (opt.save_period &gt; <span class="number">0</span>) <span class="keyword">and</span> (epoch % opt.save_period == <span class="number">0</span>):</span><br><span class="line">                    torch.save(ckpt, w / <span class="string">f&#x27;epoch<span class="subst">&#123;epoch&#125;</span>.pt&#x27;</span>)</span><br><span class="line">                <span class="keyword">del</span> ckpt</span><br><span class="line">                callbacks.run(<span class="string">&#x27;on_model_save&#x27;</span>, last, epoch, final_epoch, best_fitness, fi)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Stop Single-GPU</span></span><br><span class="line">            <span class="keyword">if</span> RANK == -<span class="number">1</span> <span class="keyword">and</span> stopper(epoch=epoch, fitness=fi):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Stop DDP <span class="doctag">TODO:</span> known issues shttps://github.com/ultralytics/yolov5/pull/4576</span></span><br><span class="line">            <span class="comment"># stop = stopper(epoch=epoch, fitness=fi)</span></span><br><span class="line">            <span class="comment"># if RANK == 0:</span></span><br><span class="line">            <span class="comment">#    dist.broadcast_object_list([stop], 0)  # broadcast &#x27;stop&#x27; to all ranks</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Stop DPP</span></span><br><span class="line">        <span class="comment"># with torch_distributed_zero_first(RANK):</span></span><br><span class="line">        <span class="comment"># if stop:</span></span><br><span class="line">        <span class="comment">#    break  # must break all DDP ranks</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># end epoch ----------------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># end training -----------------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> RANK <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>]:</span><br><span class="line">        LOGGER.info(<span class="string">f&#x27;\n<span class="subst">&#123;epoch - start_epoch + <span class="number">1</span>&#125;</span> epochs completed in <span class="subst">&#123;(time.time() - t0) / <span class="number">3600</span>:<span class="number">.3</span>f&#125;</span> hours.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> last, best:</span><br><span class="line">            <span class="keyword">if</span> f.exists():</span><br><span class="line">                strip_optimizer(f)  <span class="comment"># strip optimizers</span></span><br><span class="line">                <span class="keyword">if</span> f <span class="keyword">is</span> best:</span><br><span class="line">                    LOGGER.info(<span class="string">f&#x27;\nValidating <span class="subst">&#123;f&#125;</span>...&#x27;</span>)</span><br><span class="line">                    results, _, _ = val.run(data_dict,</span><br><span class="line">                                            batch_size=batch_size // WORLD_SIZE * <span class="number">2</span>,</span><br><span class="line">                                            imgsz=imgsz,</span><br><span class="line">                                            model=attempt_load(f, device).half(),</span><br><span class="line">                                            iou_thres=<span class="number">0.65</span> <span class="keyword">if</span> is_coco <span class="keyword">else</span> <span class="number">0.60</span>,  <span class="comment"># best pycocotools results at 0.65</span></span><br><span class="line">                                            single_cls=single_cls,</span><br><span class="line">                                            dataloader=val_loader,</span><br><span class="line">                                            save_dir=save_dir,</span><br><span class="line">                                            save_json=is_coco,</span><br><span class="line">                                            verbose=<span class="literal">True</span>,</span><br><span class="line">                                            plots=<span class="literal">True</span>,</span><br><span class="line">                                            callbacks=callbacks,</span><br><span class="line">                                            compute_loss=compute_loss)  <span class="comment"># val best model with plots</span></span><br><span class="line">                    <span class="keyword">if</span> is_coco:</span><br><span class="line">                        callbacks.run(<span class="string">&#x27;on_fit_epoch_end&#x27;</span>, <span class="built_in">list</span>(mloss) + <span class="built_in">list</span>(results) + lr, epoch, best_fitness, fi)</span><br><span class="line"></span><br><span class="line">        callbacks.run(<span class="string">&#x27;on_train_end&#x27;</span>, last, best, plots, epoch, results)</span><br><span class="line">        LOGGER.info(<span class="string">f&quot;Results saved to <span class="subst">&#123;colorstr(<span class="string">&#x27;bold&#x27;</span>, save_dir)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    torch.cuda.empty_cache()</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 明天把这些模型都试试效果先，一波波给他训练完毕，找个公开的数据集测试一下。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_opt</span>(<span class="params">known=<span class="literal">False</span></span>):</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--weights&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=ROOT / <span class="string">&#x27;pretrained/yolov5s.pt&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;initial weights path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--cfg&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=ROOT / <span class="string">&#x27;models/yolov5s.yaml&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;model.yaml path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--data&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=ROOT / <span class="string">&#x27;data/data.yaml&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;dataset.yaml path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--hyp&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=ROOT / <span class="string">&#x27;data/hyps/hyp.scratch.yaml&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;hyperparameters path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">300</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--batch-size&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">4</span>, <span class="built_in">help</span>=<span class="string">&#x27;total batch size for all GPUs, -1 for autobatch&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--imgsz&#x27;</span>, <span class="string">&#x27;--img&#x27;</span>, <span class="string">&#x27;--img-size&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">640</span>, <span class="built_in">help</span>=<span class="string">&#x27;train, val image size (pixels)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--rect&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;rectangular training&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--resume&#x27;</span>, nargs=<span class="string">&#x27;?&#x27;</span>, const=<span class="literal">True</span>, default=<span class="literal">False</span>, <span class="built_in">help</span>=<span class="string">&#x27;resume most recent training&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--nosave&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;only save final checkpoint&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--noval&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;only validate final epoch&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--noautoanchor&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;disable autoanchor check&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--evolve&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, nargs=<span class="string">&#x27;?&#x27;</span>, const=<span class="number">300</span>, <span class="built_in">help</span>=<span class="string">&#x27;evolve hyperparameters for x generations&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--bucket&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;gsutil bucket&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--cache&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, nargs=<span class="string">&#x27;?&#x27;</span>, const=<span class="string">&#x27;ram&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;--cache images in &quot;ram&quot; (default) or &quot;disk&quot;&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--image-weights&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;use weighted image selection for training&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;</span>)</span><br><span class="line">    <span class="comment"># parser.add_argument(&#x27;--multi-scale&#x27;, action=&#x27;store_true&#x27;, help=&#x27;vary img-size +/- 50%%&#x27;)</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--multi-scale&#x27;</span>, default=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;vary img-size +/- 50%%&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--single-cls&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;train multi-class data as single-class&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--adam&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;use torch.optim.Adam() optimizer&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--sync-bn&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;use SyncBatchNorm, only available in DDP mode&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--workers&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>, <span class="built_in">help</span>=<span class="string">&#x27;max dataloader workers (per RANK in DDP mode)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--project&#x27;</span>, default=ROOT / <span class="string">&#x27;runs/train&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save to project/name&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--name&#x27;</span>, default=<span class="string">&#x27;exp&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save to project/name&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--exist-ok&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;existing project/name ok, do not increment&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--quad&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;quad dataloader&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--linear-lr&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;linear LR&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--label-smoothing&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.0</span>, <span class="built_in">help</span>=<span class="string">&#x27;Label smoothing epsilon&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--patience&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">100</span>, <span class="built_in">help</span>=<span class="string">&#x27;EarlyStopping patience (epochs without improvement)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--freeze&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>, <span class="built_in">help</span>=<span class="string">&#x27;Number of layers to freeze. backbone=10, all=24&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save-period&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=-<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;Save checkpoint every x epochs (disabled if &lt; 1)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--local_rank&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=-<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;DDP parameter, do not modify&#x27;</span>)</span><br><span class="line">    <span class="comment"># Weights &amp; Biases arguments</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--entity&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;W&amp;B: Entity&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--upload_dataset&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;W&amp;B: Upload dataset as artifact table&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--bbox_interval&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=-<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;W&amp;B: Set bounding-box image logging interval&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--artifact_alias&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;latest&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;W&amp;B: Version of dataset artifact to use&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    opt = parser.parse_known_args()[<span class="number">0</span>] <span class="keyword">if</span> known <span class="keyword">else</span> parser.parse_args()</span><br><span class="line">    <span class="keyword">return</span> opt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">opt, callbacks=Callbacks(<span class="params"></span>)</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Checks</span></span><br><span class="line">    <span class="keyword">if</span> RANK <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>]:</span><br><span class="line">        print_args(FILE.stem, opt)</span><br><span class="line">        check_git_status()</span><br><span class="line">        check_requirements(exclude=[<span class="string">&#x27;thop&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Resume</span></span><br><span class="line">    <span class="keyword">if</span> opt.resume <span class="keyword">and</span> <span class="keyword">not</span> check_wandb_resume(opt) <span class="keyword">and</span> <span class="keyword">not</span> opt.evolve:  <span class="comment"># resume an interrupted run</span></span><br><span class="line">        ckpt = opt.resume <span class="keyword">if</span> <span class="built_in">isinstance</span>(opt.resume, <span class="built_in">str</span>) <span class="keyword">else</span> get_latest_run()  <span class="comment"># specified or most recent path</span></span><br><span class="line">        <span class="keyword">assert</span> os.path.isfile(ckpt), <span class="string">&#x27;ERROR: --resume checkpoint does not exist&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(Path(ckpt).parent.parent / <span class="string">&#x27;opt.yaml&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            opt = argparse.Namespace(**yaml.safe_load(f))  <span class="comment"># replace</span></span><br><span class="line">        opt.cfg, opt.weights, opt.resume = <span class="string">&#x27;&#x27;</span>, ckpt, <span class="literal">True</span>  <span class="comment"># reinstate</span></span><br><span class="line">        LOGGER.info(<span class="string">f&#x27;Resuming training from <span class="subst">&#123;ckpt&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        opt.data, opt.cfg, opt.hyp, opt.weights, opt.project = \</span><br><span class="line">            check_file(opt.data), check_yaml(opt.cfg), check_yaml(opt.hyp), <span class="built_in">str</span>(opt.weights), <span class="built_in">str</span>(opt.project)  <span class="comment"># checks</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(opt.cfg) <span class="keyword">or</span> <span class="built_in">len</span>(opt.weights), <span class="string">&#x27;either --cfg or --weights must be specified&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> opt.evolve:</span><br><span class="line">            opt.project = <span class="built_in">str</span>(ROOT / <span class="string">&#x27;runs/evolve&#x27;</span>)</span><br><span class="line">            opt.exist_ok, opt.resume = opt.resume, <span class="literal">False</span>  <span class="comment"># pass resume to exist_ok and disable resume</span></span><br><span class="line">        opt.save_dir = <span class="built_in">str</span>(increment_path(Path(opt.project) / opt.name, exist_ok=opt.exist_ok))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># DDP mode</span></span><br><span class="line">    device = select_device(opt.device, batch_size=opt.batch_size)</span><br><span class="line">    <span class="keyword">if</span> LOCAL_RANK != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">assert</span> torch.cuda.device_count() &gt; LOCAL_RANK, <span class="string">&#x27;insufficient CUDA devices for DDP command&#x27;</span></span><br><span class="line">        <span class="keyword">assert</span> opt.batch_size % WORLD_SIZE == <span class="number">0</span>, <span class="string">&#x27;--batch-size must be multiple of CUDA device count&#x27;</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> opt.image_weights, <span class="string">&#x27;--image-weights argument is not compatible with DDP training&#x27;</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> opt.evolve, <span class="string">&#x27;--evolve argument is not compatible with DDP training&#x27;</span></span><br><span class="line">        torch.cuda.set_device(LOCAL_RANK)</span><br><span class="line">        device = torch.device(<span class="string">&#x27;cuda&#x27;</span>, LOCAL_RANK)</span><br><span class="line">        dist.init_process_group(backend=<span class="string">&quot;nccl&quot;</span> <span class="keyword">if</span> dist.is_nccl_available() <span class="keyword">else</span> <span class="string">&quot;gloo&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Train</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> opt.evolve:</span><br><span class="line">        train(opt.hyp, opt, device, callbacks)</span><br><span class="line">        <span class="keyword">if</span> WORLD_SIZE &gt; <span class="number">1</span> <span class="keyword">and</span> RANK == <span class="number">0</span>:</span><br><span class="line">            LOGGER.info(<span class="string">&#x27;Destroying process group... &#x27;</span>)</span><br><span class="line">            dist.destroy_process_group()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Evolve hyperparameters (optional)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Hyperparameter evolution metadata (mutation scale 0-1, lower_limit, upper_limit)</span></span><br><span class="line">        meta = &#123;<span class="string">&#x27;lr0&#x27;</span>: (<span class="number">1</span>, <span class="number">1e-5</span>, <span class="number">1e-1</span>),  <span class="comment"># initial learning rate (SGD=1E-2, Adam=1E-3)</span></span><br><span class="line">                <span class="string">&#x27;lrf&#x27;</span>: (<span class="number">1</span>, <span class="number">0.01</span>, <span class="number">1.0</span>),  <span class="comment"># final OneCycleLR learning rate (lr0 * lrf)</span></span><br><span class="line">                <span class="string">&#x27;momentum&#x27;</span>: (<span class="number">0.3</span>, <span class="number">0.6</span>, <span class="number">0.98</span>),  <span class="comment"># SGD momentum/Adam beta1</span></span><br><span class="line">                <span class="string">&#x27;weight_decay&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">0.001</span>),  <span class="comment"># optimizer weight decay</span></span><br><span class="line">                <span class="string">&#x27;warmup_epochs&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">5.0</span>),  <span class="comment"># warmup epochs (fractions ok)</span></span><br><span class="line">                <span class="string">&#x27;warmup_momentum&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">0.95</span>),  <span class="comment"># warmup initial momentum</span></span><br><span class="line">                <span class="string">&#x27;warmup_bias_lr&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">0.2</span>),  <span class="comment"># warmup initial bias lr</span></span><br><span class="line">                <span class="string">&#x27;box&#x27;</span>: (<span class="number">1</span>, <span class="number">0.02</span>, <span class="number">0.2</span>),  <span class="comment"># box loss gain</span></span><br><span class="line">                <span class="string">&#x27;cls&#x27;</span>: (<span class="number">1</span>, <span class="number">0.2</span>, <span class="number">4.0</span>),  <span class="comment"># cls loss gain</span></span><br><span class="line">                <span class="string">&#x27;cls_pw&#x27;</span>: (<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">2.0</span>),  <span class="comment"># cls BCELoss positive_weight</span></span><br><span class="line">                <span class="string">&#x27;obj&#x27;</span>: (<span class="number">1</span>, <span class="number">0.2</span>, <span class="number">4.0</span>),  <span class="comment"># obj loss gain (scale with pixels)</span></span><br><span class="line">                <span class="string">&#x27;obj_pw&#x27;</span>: (<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">2.0</span>),  <span class="comment"># obj BCELoss positive_weight</span></span><br><span class="line">                <span class="string">&#x27;iou_t&#x27;</span>: (<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0.7</span>),  <span class="comment"># IoU training threshold</span></span><br><span class="line">                <span class="string">&#x27;anchor_t&#x27;</span>: (<span class="number">1</span>, <span class="number">2.0</span>, <span class="number">8.0</span>),  <span class="comment"># anchor-multiple threshold</span></span><br><span class="line">                <span class="string">&#x27;anchors&#x27;</span>: (<span class="number">2</span>, <span class="number">2.0</span>, <span class="number">10.0</span>),  <span class="comment"># anchors per output grid (0 to ignore)</span></span><br><span class="line">                <span class="string">&#x27;fl_gamma&#x27;</span>: (<span class="number">0</span>, <span class="number">0.0</span>, <span class="number">2.0</span>),  <span class="comment"># focal loss gamma (efficientDet default gamma=1.5)</span></span><br><span class="line">                <span class="string">&#x27;hsv_h&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">0.1</span>),  <span class="comment"># image HSV-Hue augmentation (fraction)</span></span><br><span class="line">                <span class="string">&#x27;hsv_s&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">0.9</span>),  <span class="comment"># image HSV-Saturation augmentation (fraction)</span></span><br><span class="line">                <span class="string">&#x27;hsv_v&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">0.9</span>),  <span class="comment"># image HSV-Value augmentation (fraction)</span></span><br><span class="line">                <span class="string">&#x27;degrees&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">45.0</span>),  <span class="comment"># image rotation (+/- deg)</span></span><br><span class="line">                <span class="string">&#x27;translate&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">0.9</span>),  <span class="comment"># image translation (+/- fraction)</span></span><br><span class="line">                <span class="string">&#x27;scale&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">0.9</span>),  <span class="comment"># image scale (+/- gain)</span></span><br><span class="line">                <span class="string">&#x27;shear&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">10.0</span>),  <span class="comment"># image shear (+/- deg)</span></span><br><span class="line">                <span class="string">&#x27;perspective&#x27;</span>: (<span class="number">0</span>, <span class="number">0.0</span>, <span class="number">0.001</span>),  <span class="comment"># image perspective (+/- fraction), range 0-0.001</span></span><br><span class="line">                <span class="string">&#x27;flipud&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">1.0</span>),  <span class="comment"># image flip up-down (probability)</span></span><br><span class="line">                <span class="string">&#x27;fliplr&#x27;</span>: (<span class="number">0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>),  <span class="comment"># image flip left-right (probability)</span></span><br><span class="line">                <span class="string">&#x27;mosaic&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">1.0</span>),  <span class="comment"># image mixup (probability)</span></span><br><span class="line">                <span class="string">&#x27;mixup&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">1.0</span>),  <span class="comment"># image mixup (probability)</span></span><br><span class="line">                <span class="string">&#x27;copy_paste&#x27;</span>: (<span class="number">1</span>, <span class="number">0.0</span>, <span class="number">1.0</span>)&#125;  <span class="comment"># segment copy-paste (probability)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(opt.hyp, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            hyp = yaml.safe_load(f)  <span class="comment"># load hyps dict</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;anchors&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> hyp:  <span class="comment"># anchors commented in hyp.yaml</span></span><br><span class="line">                hyp[<span class="string">&#x27;anchors&#x27;</span>] = <span class="number">3</span></span><br><span class="line">        opt.noval, opt.nosave, save_dir = <span class="literal">True</span>, <span class="literal">True</span>, Path(opt.save_dir)  <span class="comment"># only val/save final epoch</span></span><br><span class="line">        <span class="comment"># ei = [isinstance(x, (int, float)) for x in hyp.values()]  # evolvable indices</span></span><br><span class="line">        evolve_yaml, evolve_csv = save_dir / <span class="string">&#x27;hyp_evolve.yaml&#x27;</span>, save_dir / <span class="string">&#x27;evolve.csv&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> opt.bucket:</span><br><span class="line">            os.system(<span class="string">f&#x27;gsutil cp gs://<span class="subst">&#123;opt.bucket&#125;</span>/evolve.csv <span class="subst">&#123;save_dir&#125;</span>&#x27;</span>)  <span class="comment"># download evolve.csv if exists</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(opt.evolve):  <span class="comment"># generations to evolve</span></span><br><span class="line">            <span class="keyword">if</span> evolve_csv.exists():  <span class="comment"># if evolve.csv exists: select best hyps and mutate</span></span><br><span class="line">                <span class="comment"># Select parent(s)</span></span><br><span class="line">                parent = <span class="string">&#x27;single&#x27;</span>  <span class="comment"># parent selection method: &#x27;single&#x27; or &#x27;weighted&#x27;</span></span><br><span class="line">                x = np.loadtxt(evolve_csv, ndmin=<span class="number">2</span>, delimiter=<span class="string">&#x27;,&#x27;</span>, skiprows=<span class="number">1</span>)</span><br><span class="line">                n = <span class="built_in">min</span>(<span class="number">5</span>, <span class="built_in">len</span>(x))  <span class="comment"># number of previous results to consider</span></span><br><span class="line">                x = x[np.argsort(-fitness(x))][:n]  <span class="comment"># top n mutations</span></span><br><span class="line">                w = fitness(x) - fitness(x).<span class="built_in">min</span>() + <span class="number">1E-6</span>  <span class="comment"># weights (sum &gt; 0)</span></span><br><span class="line">                <span class="keyword">if</span> parent == <span class="string">&#x27;single&#x27;</span> <span class="keyword">or</span> <span class="built_in">len</span>(x) == <span class="number">1</span>:</span><br><span class="line">                    <span class="comment"># x = x[random.randint(0, n - 1)]  # random selection</span></span><br><span class="line">                    x = x[random.choices(<span class="built_in">range</span>(n), weights=w)[<span class="number">0</span>]]  <span class="comment"># weighted selection</span></span><br><span class="line">                <span class="keyword">elif</span> parent == <span class="string">&#x27;weighted&#x27;</span>:</span><br><span class="line">                    x = (x * w.reshape(n, <span class="number">1</span>)).<span class="built_in">sum</span>(<span class="number">0</span>) / w.<span class="built_in">sum</span>()  <span class="comment"># weighted combination</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># Mutate</span></span><br><span class="line">                mp, s = <span class="number">0.8</span>, <span class="number">0.2</span>  <span class="comment"># mutation probability, sigma</span></span><br><span class="line">                npr = np.random</span><br><span class="line">                npr.seed(<span class="built_in">int</span>(time.time()))</span><br><span class="line">                g = np.array([meta[k][<span class="number">0</span>] <span class="keyword">for</span> k <span class="keyword">in</span> hyp.keys()])  <span class="comment"># gains 0-1</span></span><br><span class="line">                ng = <span class="built_in">len</span>(meta)</span><br><span class="line">                v = np.ones(ng)</span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">all</span>(v == <span class="number">1</span>):  <span class="comment"># mutate until a change occurs (prevent duplicates)</span></span><br><span class="line">                    v = (g * (npr.random(ng) &lt; mp) * npr.randn(ng) * npr.random() * s + <span class="number">1</span>).clip(<span class="number">0.3</span>, <span class="number">3.0</span>)</span><br><span class="line">                <span class="keyword">for</span> i, k <span class="keyword">in</span> <span class="built_in">enumerate</span>(hyp.keys()):  <span class="comment"># plt.hist(v.ravel(), 300)</span></span><br><span class="line">                    hyp[k] = <span class="built_in">float</span>(x[i + <span class="number">7</span>] * v[i])  <span class="comment"># mutate</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Constrain to limits</span></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> meta.items():</span><br><span class="line">                hyp[k] = <span class="built_in">max</span>(hyp[k], v[<span class="number">1</span>])  <span class="comment"># lower limit</span></span><br><span class="line">                hyp[k] = <span class="built_in">min</span>(hyp[k], v[<span class="number">2</span>])  <span class="comment"># upper limit</span></span><br><span class="line">                hyp[k] = <span class="built_in">round</span>(hyp[k], <span class="number">5</span>)  <span class="comment"># significant digits</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Train mutation</span></span><br><span class="line">            results = train(hyp.copy(), opt, device, callbacks)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Write mutation results</span></span><br><span class="line">            print_mutation(results, hyp.copy(), save_dir, opt.bucket)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Plot results</span></span><br><span class="line">        plot_evolve(evolve_csv)</span><br><span class="line">        LOGGER.info(<span class="string">f&#x27;Hyperparameter evolution finished\n&#x27;</span></span><br><span class="line">                    <span class="string">f&quot;Results saved to <span class="subst">&#123;colorstr(<span class="string">&#x27;bold&#x27;</span>, save_dir)&#125;</span>\n&quot;</span></span><br><span class="line">                    <span class="string">f&#x27;Use best hyperparameters example: $ python train.py --hyp <span class="subst">&#123;evolve_yaml&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="comment"># Usage: import train; train.run(data=&#x27;coco128.yaml&#x27;, imgsz=320, weights=&#x27;yolov5m.pt&#x27;)</span></span><br><span class="line">    opt = parse_opt(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        <span class="built_in">setattr</span>(opt, k, v)</span><br><span class="line">    main(opt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python train.py --data mask_data.yaml --cfg mask_yolov5s.yaml --weights pretrained/yolov5s.pt --epoch 100 --batch-size 4 --device cpu</span></span><br><span class="line"><span class="comment"># python train.py --data mask_data.yaml --cfg mask_yolov5l.yaml --weights pretrained/yolov5l.pt --epoch 100 --batch-size 4</span></span><br><span class="line"><span class="comment"># python train.py --data mask_data.yaml --cfg mask_yolov5m.yaml --weights pretrained/yolov5m.pt --epoch 100 --batch-size 4</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    opt = parse_opt()</span><br><span class="line">    main(opt)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16.放射变换之图像平移</title>
      <link href="/2023/08/21/33-%E6%94%BE%E5%B0%84%E5%8F%98%E6%8D%A2%E4%B9%8B%E5%9B%BE%E5%83%8F%E5%B9%B3%E7%A7%BB/"/>
      <url>/2023/08/21/33-%E6%94%BE%E5%B0%84%E5%8F%98%E6%8D%A2%E4%B9%8B%E5%9B%BE%E5%83%8F%E5%B9%B3%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>cv2.warpAffine(src,M,dsize,flags,mode,value)<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673532342077-aa22e4eb-cbd9-4136-8226-73606ff2d995.png#averageHue=%23f3f3f3&clientId=ub3209729-3552-4&from=paste&height=141&id=uf072577f&originHeight=212&originWidth=449&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33492&status=done&style=none&taskId=u200d7467-3b96-4842-ae7f-237e0c0bf79&title=&width=299.3333333333333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673532351468-8b18fd4f-f217-4e0f-8935-88599b61cd9c.png#averageHue=%23f4f4f4&clientId=ub3209729-3552-4&from=paste&height=124&id=u6658950c&originHeight=186&originWidth=964&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55840&status=done&style=none&taskId=ub3cdd23d-4634-498c-9f37-b95d1fdeb93&title=&width=642.6666666666666" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：放射变换之图像平移.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/12 22:06 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 定义变换矩阵</span></span><br><span class="line">M= np.float32([[<span class="number">1</span>,<span class="number">0</span>,<span class="number">200</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]])</span><br><span class="line"><span class="comment"># 进行图像变化</span></span><br><span class="line">warp_img = cv2.warpAffine(image,M,dsize = (<span class="number">640</span>,<span class="number">480</span>)) <span class="comment"># dsize 是输出图像的大小</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;rotate_img&quot;</span>,np.hstack((image,warp_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673532635569-c806a613-fc6a-4c84-9591-d5712a88fae6.png#averageHue=%23706a5e&clientId=ub3209729-3552-4&from=paste&height=512&id=u317d4e99&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=415265&status=done&style=none&taskId=u972467ea-8034-44ad-9191-e5bf97d3771&title=&width=1282" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16.顺序查找法</title>
      <link href="/2023/08/21/59-%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE%E6%B3%95/"/>
      <url>/2023/08/21/59-%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>最基本的查找技术，过程： <strong>从表中的第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功，找到所查的记录，如果直到最后一个（或第一个）记录，其关键字和给定值比较都不等时，则表示没有查到记录，查找不成功。</strong></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">alist,target</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">        <span class="keyword">if</span> target == i:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;找到目标元素!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到目标元素！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>顺序查找法是最简单也是最常用的一种查找的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15.图像翻转与旋转</title>
      <link href="/2023/08/21/32-%E5%9B%BE%E5%83%8F%E7%BF%BB%E8%BD%AC%E4%B8%8E%E6%97%8B%E8%BD%AC/"/>
      <url>/2023/08/21/32-%E5%9B%BE%E5%83%8F%E7%BF%BB%E8%BD%AC%E4%B8%8E%E6%97%8B%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="图像翻转"><a href="#图像翻转" class="headerlink" title="图像翻转"></a>图像翻转</h1><p>cv2.flip(src,flipCode)<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673530982373-b38b6700-532c-4eeb-aa21-b6e315d1b655.png#averageHue=%23f4f6f6&clientId=u85cf4661-161c-4&from=paste&height=67&id=u3453980b&originHeight=100&originWidth=332&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23440&status=done&style=none&taskId=u5a796b15-9fb1-4d81-922c-0515d4658ed&title=&width=221.33333333333334" alt="image.png"></p><h1 id="图像旋转"><a href="#图像旋转" class="headerlink" title="图像旋转"></a>图像旋转</h1><p>cv2.rotate(img,rotateCode)<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673531135031-7a10c135-d69b-47b0-8e5a-6773ada1fe24.png#averageHue=%23f1f3f2&clientId=u85cf4661-161c-4&from=paste&height=73&id=u831ecafc&originHeight=110&originWidth=496&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35189&status=done&style=none&taskId=u1c26f338-5e0e-4d13-b504-f83578dcf71&title=&width=330.6666666666667" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：图像翻转与旋转.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/12 21:47 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 图像翻转</span></span><br><span class="line">flip_img = cv2.flip(image,<span class="number">1</span>)  <span class="comment"># 如果翻转90°，可能会出现长宽不匹配无法拼接的情况</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;flip_img&quot;</span>,np.hstack((image,flip_img)))</span><br><span class="line"><span class="comment"># 图像旋转</span></span><br><span class="line">rotate_img = cv2.rotate(image,cv2.ROTATE_180)</span><br><span class="line">cv2.imshow(<span class="string">&quot;rotate_img&quot;</span>,np.hstack((image,rotate_img)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673531535384-4faa8682-622e-4ae7-9fbf-33604a597f34.png#averageHue=%237b7467&clientId=u85cf4661-161c-4&from=paste&height=512&id=u70edfd2b&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=734862&status=done&style=none&taskId=u941de202-e1f0-4238-920b-6a9d9f3f33e&title=&width=1282" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673531545005-3846dd37-b398-4208-bc5f-27346736bac6.png#averageHue=%237b7466&clientId=u85cf4661-161c-4&from=paste&height=512&id=ub5bc460b&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=753315&status=done&style=none&taskId=u1a8604d5-71a1-4753-98ee-e4a6bd0782f&title=&width=1282" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15.归并排序</title>
      <link href="/2023/08/21/58-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/08/21/58-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>归并排序(Merge sort)是采用分治法的一个非常典型的应用。归并排序的思想就是<strong>先递归分解数组，再合并数组</strong>。将数组分解最小之后，然后合并两个有序数组，基本思想是比较两个数组的最前面的数，谁小就先取谁，取了后相应的指针就向后移一位。然后再比较，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。</p><h1 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h1><p><strong>先分再合</strong>：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1671076683969-1ff7018e-b678-4aff-ab2e-b1454970b6ba.png#averageHue=%23f9f6ea&clientId=u3bcd0a4e-66df-4&from=paste&height=315&id=u64a751c8&originHeight=347&originWidth=414&originalType=binary&ratio=1&rotation=0&showTitle=false&size=97740&status=done&style=none&taskId=u727465ba-3883-4df3-a374-fbb1bbfba25&title=&width=376" alt="image.png"></p><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><ul><li>最优时间复杂度：O（nlogn）</li><li>最坏时间复杂度：O（nlogn）</li><li>稳定性：稳定</li></ul><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Merge_sort</span>(<span class="params">alist</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    主要思想就是分治法，先拆分再合并</span></span><br><span class="line"><span class="string">    整个框架是递归算法，既包括拆解成一个一个的列表，也包列表的缝合</span></span><br><span class="line"><span class="string">    以为[5,1,3,2,8,7,6,4]例，拆解成[5],[1],[3],[2],[8],[7],[6],[4]</span></span><br><span class="line"><span class="string">    第一次合并成[1,5],[2,3],[7,8],[4,6]</span></span><br><span class="line"><span class="string">    第二次合并成[1,2,3,5],[4,6,7,8]</span></span><br><span class="line"><span class="string">    第三次合并成[1,2,3,4,5,6,7,8]</span></span><br><span class="line"><span class="string">    :param alist:</span></span><br><span class="line"><span class="string">    :return: alist.sort</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(alist)</span><br><span class="line">    mid = n //<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> alist</span><br><span class="line">    left_list = Merge_sort(alist[<span class="number">0</span>:mid])</span><br><span class="line">    right_list = Merge_sort(alist[mid::])</span><br><span class="line">    left_p = <span class="number">0</span> <span class="comment"># 定义左指针</span></span><br><span class="line">    right_p = <span class="number">0</span> <span class="comment"># 定义右指针</span></span><br><span class="line">    result_list =[]</span><br><span class="line">    <span class="keyword">while</span> left_p &lt; <span class="built_in">len</span>(left_list) <span class="keyword">and</span> right_p &lt; <span class="built_in">len</span>(right_list):</span><br><span class="line">        <span class="keyword">if</span> left_list[left_p] &lt; right_list[right_p]:</span><br><span class="line">            result_list.append(left_list[left_p])</span><br><span class="line">            left_p += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result_list.append(right_list[right_p])</span><br><span class="line">            right_p += <span class="number">1</span></span><br><span class="line">    result_list.extend(left_list[left_p::])</span><br><span class="line">    result_list.extend(right_list[right_p::])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result_list</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>主要思想就是分治法，先拆分再合并，整个框架是递归算法，既包括拆解成一个一个的列表，也包列表的缝合。<strong>定义两个指针</strong>，一个左指针，一个右指针，先比较两个指针指向的的元素大小，将小的元素添加到目标序列中，然后该指针+1继续比较，直到某一个指针走到头，此时将另一个指针指向元素的后面元素全部添加到目标序列中。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.resize用法</title>
      <link href="/2023/08/21/31-resize%E7%94%A8%E6%B3%95/"/>
      <url>/2023/08/21/31-resize%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>cv2.resize(src,dsize[,dst[,fx,[fy[,interpolation]]]])<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673529918134-c96951aa-4ae2-4de0-9515-b2f9dce8e1c3.png#averageHue=%23f7f9f8&clientId=u6ca70592-91ea-4&from=paste&height=229&id=u3149ccde&originHeight=344&originWidth=700&originalType=binary&ratio=1&rotation=0&showTitle=false&size=130440&status=done&style=none&taskId=ud85f1364-2aad-4293-bc80-368c2bf797b&title=&width=466.6666666666667" alt="image.png"></p><ul><li>之前同一图片大小的时候用的numpy切割，会造成图像的部分的损失，而现在用resize的话，可以保证图像一样大小，且画面不损失。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：resize.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/12 21:26 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">test = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">test = cv2.resize(test,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line">cv2.imshow(<span class="string">&quot;not_image&quot;</span>,np.hstack((image,test)))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673530164940-b876eaa5-ee39-4cb4-bfc7-79d09da4f7ac.png#averageHue=%23968972&clientId=u6ca70592-91ea-4&from=paste&height=512&id=u18c1c417&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=739333&status=done&style=none&taskId=u41366e86-71c7-4c04-a9c2-a69d2d46fae&title=&width=1282" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.快速排序</title>
      <link href="/2023/08/21/57-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/08/21/57-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>快速排序（Quicksort),又称为交换排序，通过一趟排序将要排序的数据分割为独立的两部分。假设要排序的列表是A[0]…A[N-1]，首先任意选取一个数据（通常选用列表的第一个数）作为基准数据，一般我们都选择第一个数作为基准数据，然后将所有比它小的数都放到它的左边，所有比它大的数都放到它的右边，这个过程称为快速排序。值得注意的是，快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时产生变化。</p><h1 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h1><ol><li>设置两个low、high，排序开始的时候：low&#x3D;0，high&#x3D;N-1</li><li>以第一个列表元素作为基准数据，赋值给mid，即mid&#x3D;A[0]</li><li><strong>从high开始向前搜索，即由后开始向前搜索(high–),找到第一个小于mid的值A[high],将A[high]和A[low]的值交换</strong></li><li><strong>从low开始向后搜索，即向前开始向后搜索(low++),找到大于mid的A[low],将A[low]和A[high]的值交换。</strong></li><li><strong>重复第3、4步，直到low&#x3D;high；</strong></li></ol><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><ul><li>最优时间复杂度：O(nlogn) #每次分成两半，要分logn次，再乘遍历的n次</li><li>最坏时间复杂度：O(n2) #每次只分出一个元素出来，要分n次，再乘遍历的n次</li><li>稳定性：不稳定</li></ul><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">alist,start,end</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param alist:</span></span><br><span class="line"><span class="string">    :return:alist.sort</span></span><br><span class="line"><span class="string">    快速排序首先要选择一个基准，将其他数据与这个基准比较，比它大的放右边，比它小的放左边，循环这个过程，完成排序</span></span><br><span class="line"><span class="string">    定义两个指针，一个low一个high,</span></span><br><span class="line"><span class="string">    开始是high先做比较，如果high对应的元素比基准大就不懂，high--，如果比基准小，则与low对应的元素交换，然后low++</span></span><br><span class="line"><span class="string">    直到low==high说明一趟快速排序已经完成，再将基准添加到序列中</span></span><br><span class="line"><span class="string">    上面已经完成一次快速排序，再将左序列和右序列进行递归，注意设置一个出口，即可完成整个遍历</span></span><br><span class="line"><span class="string">    以alist = [5,1,3,2,8,7,6,4]为例</span></span><br><span class="line"><span class="string">    以alist = [4,1,3,2,8,7,6,4]为例</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 递归的出口</span></span><br><span class="line">    <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid = alist[start]  <span class="comment"># 定义基准 5</span></span><br><span class="line">    low = start  <span class="comment"># 左指针</span></span><br><span class="line">    high = end  <span class="comment"># 右指针 7</span></span><br><span class="line">    <span class="comment"># 判断high是不是大于mid,大于的话就不用交换，之间high--，直到小于的时候进行交换</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;high:</span><br><span class="line">        <span class="keyword">while</span> alist[high] &gt;= mid <span class="keyword">and</span> high &gt; low:  <span class="comment">#7&gt;0</span></span><br><span class="line">            high -=<span class="number">1</span></span><br><span class="line">        alist[low] = alist[high]</span><br><span class="line">        <span class="comment">#判断low是不是小于mid, 小于的话就不用交换，之间low++，直到大于的时候进行交换</span></span><br><span class="line">        <span class="keyword">while</span> alist[low] &lt; mid <span class="keyword">and</span> high&gt;low:</span><br><span class="line">            low += <span class="number">1</span></span><br><span class="line">        alist[high] = alist[low]</span><br><span class="line">    alist[low] = mid</span><br><span class="line">    quick_sort(alist,<span class="number">0</span>,low-<span class="number">1</span>)</span><br><span class="line">    quick_sort(alist,low+<span class="number">1</span>,end)</span><br><span class="line">    <span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>主要是两个指针的交替变化，可以用while循环来执行，<strong>判断high是不是大于mid,大于的话就不用交换，之间high–，直到小于的时候进行交换；判断low是不是小于mid, 小于的话就不用交换，之间low++，直到大于的时候进行交换；最后再加上基准，这样就完成一次快速排序</strong>，之后再从外面用一个while循环，里面用递归思想不断对左序列和右序列进行操作，记得写一个出口，start &gt;&#x3D; end，这样快速排序算法就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.插入排序</title>
      <link href="/2023/08/21/56-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/08/21/56-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>插入排序（Insertion Sort）是一种简单直观的排序算法。它的工作原理是<strong>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应的位置并插入</strong>。插入排序在实现上，在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h1 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1671019740460-3043ca58-76d9-4163-bc9c-09040fb48098.png#averageHue=%23f8ede2&clientId=ue51902ba-428c-4&from=paste&height=191&id=u4f24d2d7&originHeight=286&originWidth=712&originalType=binary&ratio=1&rotation=0&showTitle=false&size=108463&status=done&style=none&taskId=u6b99d5fb-0347-4377-8460-b05622e0931&title=&width=474.6666666666667" alt="image.png"></p><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><ul><li>最优时间复杂度：O(n) (升序排列，序列已经处于升序状态）</li><li>最坏时间复杂度：O(n^2)</li><li>稳定性：<strong>稳定</strong></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">alist</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param alist:</span></span><br><span class="line"><span class="string">    :return: alist.sort</span></span><br><span class="line"><span class="string">    插入排序首先需要认定一个基准，一般认为是第一个</span></span><br><span class="line"><span class="string">    以alist = [10,1,3,2,5,7,6,4]为例，首先是1和10比较，需要交换，此时i=0，递减变为-1退出while循环</span></span><br><span class="line"><span class="string">    列表变为alist = [1,10,3,2,5,7,6,4]，首先是3和10比较，需要交换，再和1比较，不需要交换，直到i递减到比0小，退出循环</span></span><br><span class="line"><span class="string">    列表的每一个元素都要这么操作，所以外层还要嵌套一个for循环去便利每一个元素</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(alist)):</span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> alist[i-<span class="number">1</span>] &gt; alist[i]:</span><br><span class="line">                alist[i-<span class="number">1</span>],alist[i] = alist[i],alist[i-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.图像融合</title>
      <link href="/2023/08/21/29-%E5%9B%BE%E5%83%8F%E8%9E%8D%E5%90%88/"/>
      <url>/2023/08/21/29-%E5%9B%BE%E5%83%8F%E8%9E%8D%E5%90%88/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h1><p>不是简单的加法，相当于拿图片做了线性运算<br>new_img &#x3D; img1<em>w1+img2</em>w2+bias<br>cv2.addWeighted(src1,alpha,src2,beta,gamma)</p><ul><li>src1：第一张图片</li><li>alpha：第一张图片的权重</li><li>src2：第二张图片</li><li>beta：第二张图片的权重，没有要求两个权重加起来是1，但1的效果要好一点</li><li>gamma：偏差b，可以理解为调节明亮度</li></ul><p>同样的，在进行融合的时候，也要保证两张图片的尺寸一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：图像融合.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/12 20:23 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">image = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line">test = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(image.shape)</span><br><span class="line"><span class="built_in">print</span>(test.shape)</span><br><span class="line"><span class="comment"># 图片分割</span></span><br><span class="line">test = test[:<span class="number">800</span>,:<span class="number">1200</span>]  <span class="comment"># 这里写死了，实际可以定义一个函数去判断，然后去修改值</span></span><br><span class="line">image = image[:<span class="number">800</span>,:<span class="number">1200</span>]  <span class="comment"># 这里写死了，实际可以定义一个函数去判断，然后去修改值</span></span><br><span class="line">add_weight_image = cv2.addWeighted(test,<span class="number">0.3</span>,image,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;dig_imag&quot;</span>,add_weight_image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673526478523-a701b95e-b734-409f-8c98-b1792fc82576.png#averageHue=%23dbcaab&clientId=u82fa9a20-c494-4&from=paste&height=832&id=u1367c5ae&originHeight=1248&originWidth=1803&originalType=binary&ratio=1&rotation=0&showTitle=false&size=619788&status=done&style=none&taskId=u7cc4aa09-14fe-453d-9fb9-12a9bb7dd88&title=&width=1202" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.选择排序</title>
      <link href="/2023/08/21/55-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/08/21/55-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>选择排序（<strong>Selection sort</strong>）是一种简单直观的排序算法。它的工作原理如下：</p><ul><li>首先在未排序序列中找到最小（大）元素，存放在排序序列的起始位置，即第一个位置。</li><li>然后再将剩余未排序元素中继续寻找最小（最大）元素，放在第二个位置。</li><li>以此类推，直到所有元素均排序完毕。</li></ul><p>总结：先找出最大（最小）的元素，放在第一位或者最后一位。以找出最大的放在第一位为例，先找出最大的放在第一位，再在剩下的元素找出最大的元素，放在第二位，依次进行，直到遍历到最后一个元素，排序结束。选择选的就是最大或者最小的的，相当于挑高个，挑完最高的，再挑次高的，直到结束。</p><h1 id="排序过程"><a href="#排序过程" class="headerlink" title="排序过程"></a>排序过程</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1670844463526-da89361b-ab97-49dd-a4a6-6eba1428878b.png#averageHue=%23e3e3e3&clientId=ud554d761-12bf-4&from=paste&height=474&id=u2b5ea3c9&originHeight=711&originWidth=1015&originalType=binary&ratio=1&rotation=0&showTitle=false&size=157044&status=done&style=none&taskId=u323d27c0-3825-452b-9036-88290421164&title=&width=676.6666666666666" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1670844479786-e021df01-47a1-4455-a62c-605a42a40673.png#averageHue=%23dedede&clientId=ud554d761-12bf-4&from=paste&height=369&id=u7d4cd231&originHeight=553&originWidth=973&originalType=binary&ratio=1&rotation=0&showTitle=false&size=139476&status=done&style=none&taskId=u8b1c97bf-6d5b-4e56-b41f-11f9d4aab12&title=&width=648.6666666666666" alt="image.png"></p><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>最优时间复杂度：O（n^2）<br>最坏时间复杂度：O(n^2)<br>稳定性：不稳定<strong>（考虑升序每次选择最大的情况）</strong></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">alist</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param alist:</span></span><br><span class="line"><span class="string">    :return: alist</span></span><br><span class="line"><span class="string">    思想就是不断找出最小的放在最前面</span></span><br><span class="line"><span class="string">    以alist = [10,1,3,2,5,7,6,4]为例，n=8</span></span><br><span class="line"><span class="string">    第一次是把1放在最前面</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(alist)  <span class="comment"># 8</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): <span class="comment"># 0-7</span></span><br><span class="line">        <span class="comment"># 下面一段代码是为了找到最小值</span></span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,n): <span class="comment">#0-7</span></span><br><span class="line">            <span class="keyword">if</span> alist[min_index] &gt; alist[j]:</span><br><span class="line">                min_index = j</span><br><span class="line">        <span class="comment"># 下面一段代码是为了交换最小值</span></span><br><span class="line">        <span class="keyword">if</span> min_index != i:</span><br><span class="line">            alist[i],alist[min_index] = alist[min_index],alist[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure><p>程序可以看成两段，<strong>一段是找到剩下里面最小的元素</strong>，<strong>一段是交换最小值</strong>，这两步就可以完成排序，时间复杂度为O(n^2)，注意写代码的时候，这两段要分开写，思路更加清晰一些，注意索引的值，可以代入最小时和最大时去检验,这样可以有效避免索引出错。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.图像运算之加减乘除</title>
      <link href="/2023/08/21/28-%E5%9B%BE%E5%83%8F%E8%BF%90%E7%AE%97%E4%B9%8B%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/"/>
      <url>/2023/08/21/28-%E5%9B%BE%E5%83%8F%E8%BF%90%E7%AE%97%E4%B9%8B%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="加法操作"><a href="#加法操作" class="headerlink" title="加法操作"></a>加法操作</h1><p>cv2.add(img1,img2)</p><ul><li>img2和img2的尺寸要一样<ul><li>new_img &#x3D; img[0:360,0:499]  # 360,490是较小的图片的长宽</li></ul></li><li>返回的是一个图片矩阵</li><li>对应位置相加超过255的统一变为255</li><li>图片还可以与数字直接进行加法运算，相当于np.array与数字直接进行运算<ul><li>eg ： img +&#x3D; 100</li><li>对应位置相加超过255的，对256取模，%256</li></ul></li></ul><h1 id="减法操作"><a href="#减法操作" class="headerlink" title="减法操作"></a>减法操作</h1><p>cv2.subtract（）</p><ul><li>与加法操作相似</li><li>对应像素相减小于0，统一变为0</li></ul><h1 id="乘法操作"><a href="#乘法操作" class="headerlink" title="乘法操作"></a>乘法操作</h1><p>cv2.multiply()</p><ul><li>与加法操作相似</li><li>相乘大于255，自动变为255</li></ul><h1 id="除法操作"><a href="#除法操作" class="headerlink" title="除法操作"></a>除法操作</h1><p>cv2.divide()</p><ul><li>与减法操作相似</li><li>不够除的为0<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：图像运算之加减乘除.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/12 19:50 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">image = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line">test = cv2.imread(<span class="string">&quot;test_0.png&quot;</span>)</span><br><span class="line"><span class="comment"># 图片分割</span></span><br><span class="line">image = image[:<span class="number">480</span>,:<span class="number">640</span>]  <span class="comment"># 这里写死了，实际可以定义一个函数去判断，然后去修改值</span></span><br><span class="line"><span class="comment"># 图片相加</span></span><br><span class="line">add_image = cv2.add(image,test)</span><br><span class="line">cv2.imshow(<span class="string">&quot;add_image&quot;</span>,add_image)</span><br><span class="line"><span class="comment"># 图片相减</span></span><br><span class="line">sub_img = cv2.subtract(image,test)</span><br><span class="line">cv2.imshow(<span class="string">&quot;sub_img&quot;</span>,sub_img)</span><br><span class="line"><span class="comment"># 图片相乘</span></span><br><span class="line">mul_image = cv2.multiply(image,test)</span><br><span class="line">cv2.imshow(<span class="string">&quot;mul_image&quot;</span>,mul_image)</span><br><span class="line"><span class="comment"># 图片相除</span></span><br><span class="line">div_image = cv2.divide(image,test)</span><br><span class="line">cv2.imshow(<span class="string">&quot;div_image&quot;</span>,div_image)</span><br><span class="line"><span class="comment"># 图片与数字运算</span></span><br><span class="line">image += <span class="number">100</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;dig_imag&quot;</span>,image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673525384067-86c66cc7-931a-4f6b-a60d-e8e84a6e4513.png#averageHue=%23d2cdc2&clientId=u4c26f70c-776f-4&from=paste&height=503&id=ufad0471d&originHeight=755&originWidth=960&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60763&status=done&style=none&taskId=u7c75c104-592c-4363-9fcc-ebb148981a5&title=&width=640" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673525422516-8e7e40d2-78d7-4fe6-ab06-3ca6fb813174.png#averageHue=%2341351e&clientId=u4c26f70c-776f-4&from=paste&height=512&id=ub6acdaa7&originHeight=768&originWidth=963&originalType=binary&ratio=1&rotation=0&showTitle=false&size=100342&status=done&style=none&taskId=ud3ddaffe-b828-4b58-ae6f-08d14f55ae9&title=&width=642" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673525470667-db4934f8-9abf-43c3-aa15-3c993ac206be.png#averageHue=%23fefefe&clientId=u4c26f70c-776f-4&from=paste&height=512&id=uc2c6f982&originHeight=768&originWidth=963&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8400&status=done&style=none&taskId=u29ca3f29-5fb4-4e32-8120-c1dadeb3e0b&title=&width=642" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673525434644-14b32284-1dae-4d97-8c53-c2bbb43bd8ab.png#averageHue=%23121111&clientId=u4c26f70c-776f-4&from=paste&height=512&id=u23768532&originHeight=768&originWidth=963&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21967&status=done&style=none&taskId=u8b72470d-ccc6-4e89-be6b-b9120bea764&title=&width=642" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673525519052-f32cfed8-5f0b-41f5-b62f-db3d13e0be82.png#averageHue=%236ef0e4&clientId=u4c26f70c-776f-4&from=paste&height=497&id=u803d631a&originHeight=746&originWidth=962&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39027&status=done&style=none&taskId=uc3ee2ef6-93f5-41ea-822b-2a615c5de5e&title=&width=641.3333333333334" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.冒泡排序</title>
      <link href="/2023/08/21/54-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/08/21/54-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>冒泡排序（Bubble Sort）是一种简单的排序算法。<strong>它重复的遍历要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来</strong>。遍历数列的工作室重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小（越大）的元素会慢慢“浮到”数列的顶端。</p><h1 id="运作过程"><a href="#运作过程" class="headerlink" title="运作过程"></a>运作过程</h1><ul><li>比较相邻的元素，如果第一个比第二个大<strong>（升序）</strong>，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完之后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1670814129398-7c70422e-66e9-47c7-ae24-c65e816ba679.png#averageHue=%23d6d6d6&clientId=uce521bc7-0609-4&from=paste&height=301&id=u7ce0a66b&originHeight=658&originWidth=1044&originalType=binary&ratio=1&rotation=0&showTitle=false&size=220113&status=done&style=none&taskId=u064fb274-8797-4ef4-9191-b866852605c&title=&width=478.3333435058594" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1670814151513-e4bdc865-fd3a-4762-86a9-a69a9e060511.png#averageHue=%23dbdbdb&clientId=uce521bc7-0609-4&from=paste&height=172&id=u9c6eb301&originHeight=348&originWidth=1149&originalType=binary&ratio=1&rotation=0&showTitle=false&size=107805&status=done&style=none&taskId=u0ae8ac68-6439-4124-86a4-f98c13f2b2b&title=&width=566.3333740234375" alt="image.png"><br><strong>时间复杂度</strong>：</p><ul><li>最优时间复杂度：O（n） <strong>表示遍历一次发现没有任何可以交换的元素，排序结束。</strong>）</li><li>最坏时间复杂度：O（n^2）<strong>每一个都要交换</strong>。</li><li>稳定性：稳定</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort_1</span>(<span class="params">alist</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    两个for循环嵌套</span></span><br><span class="line"><span class="string">    以 alist = [1,3,2,5,7,6,4]为例</span></span><br><span class="line"><span class="string">    第一次需要遍历到索引6，第二次5，直到索引0</span></span><br><span class="line"><span class="string">    :param alist:</span></span><br><span class="line"><span class="string">    :return:alist:list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(alist)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(alist)-<span class="number">1</span>-k):</span><br><span class="line">            <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</span><br><span class="line">                alist[i],alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>],alist[i] <span class="comment"># 实现升序排列</span></span><br><span class="line">    <span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort_2</span>(<span class="params">alist</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    while循环+for循环嵌套</span></span><br><span class="line"><span class="string">    以 alist = [1,3,2,5,7,6,4]为例</span></span><br><span class="line"><span class="string">    主要是k的值的变化</span></span><br><span class="line"><span class="string">    :param alist:</span></span><br><span class="line"><span class="string">    :return:alist:list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> k != <span class="built_in">len</span>(alist)-<span class="number">1</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(alist)-k):</span><br><span class="line">            <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</span><br><span class="line">                alist[i],alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>],alist[i] <span class="comment"># 实现升序排列</span></span><br><span class="line">    <span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort_3</span>(<span class="params">alist</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    while循环+for循环嵌套</span></span><br><span class="line"><span class="string">    以 alist = [1,3,2,5,7,6,4]为例</span></span><br><span class="line"><span class="string">    如果遍历的时候没有发现要交换的，则这个列表已经是一个排好序的，则直接break</span></span><br><span class="line"><span class="string">    :param alist:</span></span><br><span class="line"><span class="string">    :return:alist:list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(alist)-<span class="number">1</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(alist)-<span class="number">1</span>-k):</span><br><span class="line">            <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                alist[i],alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>],alist[i] <span class="comment"># 实现升序排列</span></span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure><p>在这个优化里面只有当遍历完之后发现所有的都不需要操作的时候才会break，所以它的最乐观的时间复杂度还是O（n）,最差的时间复杂度还是O（n^2)，只在特定的情况下才会有优化的效果。我也尝试着用time模块的time.time()函数来获取程序运行的时间 ，但是程序运行的时间太短了，最终都显示0.0，我也懒得去增大列表的长度了（狗头）。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.绘制文本及中文文本</title>
      <link href="/2023/08/21/27-%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC%E5%8F%8A%E4%B8%AD%E6%96%87%E6%96%87%E6%9C%AC/"/>
      <url>/2023/08/21/27-%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC%E5%8F%8A%E4%B8%AD%E6%96%87%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h1><p>cv2.putText(img, text, org, fontFace, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]])</p><ul><li>img:要绘制文本的对象</li><li>text:添加的文本信息</li><li>org：文本在图片中左下角的坐标</li><li>fontFace：字体<ul><li>FONT_HERSHEY_COMPLEX</li><li>FONT_HERSHEY_COMPLEX_SMALL</li><li>FONT_HERSHEY_DUPLEX</li><li>FONT_HERSHEY_PLAIN</li><li>FONT_HERSHEY_SCRIPT_COMPLEX</li><li>FONT_HERSHEY_SCRIPT_SIMPLEX</li><li>FONT_HERSHEY_SIMPLEX</li><li>FONT_HERSHEY_TRIPLEX</li><li>FONT_ITALIC</li></ul></li><li>fontScale:字体大小</li><li>color：颜色<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：绘制文本及中文文本.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/12 16:43 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 创建窗口</span></span><br><span class="line">cv2.namedWindow(<span class="string">&quot;image&quot;</span>,cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&quot;image&quot;</span>,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line">image = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line">cv2.putText(image,<span class="string">&quot;Hallo,opencv&quot;</span>,(<span class="number">200</span>,<span class="number">500</span>),cv2.FONT_HERSHEY_TRIPLEX,<span class="number">5</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673513368698-82fe09f1-b895-44fc-9746-664caa8947ee.png#averageHue=%23af9c7d&clientId=u3c9b3f0a-2573-4&from=paste&height=512&id=uca985911&originHeight=768&originWidth=963&originalType=binary&ratio=1&rotation=0&showTitle=false&size=367547&status=done&style=none&taskId=u49ab0394-20be-48ec-8ca2-31687a5ebdc&title=&width=642" alt="image.png"></h1><h1 id="中文文本"><a href="#中文文本" class="headerlink" title="中文文本"></a>中文文本</h1><p>使用Pillow库，即PIL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：绘制文本及中文文本.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/12 16:43 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 创建窗口</span></span><br><span class="line">cv2.namedWindow(<span class="string">&quot;image&quot;</span>,cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&quot;image&quot;</span>,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line">image = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 绘制文本</span></span><br><span class="line">cv2.putText(image,<span class="string">&quot;Hallo,opencv&quot;</span>,(<span class="number">200</span>,<span class="number">500</span>),cv2.FONT_HERSHEY_TRIPLEX,<span class="number">5</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制中文文本，依托PIL库</span></span><br><span class="line"><span class="comment"># 导入 字体文件</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont,ImageDraw,Image</span><br><span class="line">font = ImageFont.truetype(<span class="string">&quot;msyh.ttc&quot;</span>,<span class="number">150</span>)</span><br><span class="line"><span class="comment"># 创建一个pillow的图片</span></span><br><span class="line">pil_img = Image.fromarray(image)</span><br><span class="line"><span class="comment"># 绘制图片</span></span><br><span class="line">draw = ImageDraw.Draw(pil_img)</span><br><span class="line"><span class="comment"># 利用draw去绘制中文</span></span><br><span class="line">draw.text((<span class="number">100</span>,<span class="number">200</span>),<span class="string">&quot;PIL解决中文显示的问题&quot;</span>,font=font,fill=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)) <span class="comment"># 后面的fill即颜色，RGBA</span></span><br><span class="line"><span class="comment"># 重新变为ndarray</span></span><br><span class="line">image = np.array(pil_img)</span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673513944830-55f16053-20c8-4bb1-bd85-82828cfd2524.png#averageHue=%23ae9b7c&clientId=u3c9b3f0a-2573-4&from=paste&height=512&id=ud5572f6f&originHeight=768&originWidth=963&originalType=binary&ratio=1&rotation=0&showTitle=false&size=395833&status=done&style=none&taskId=u19ecaf57-dc69-4d8c-a111-cdfc3d1f009&title=&width=642" alt="image.png"></p><h1 id="添加中文封装成函数"><a href="#添加中文封装成函数" class="headerlink" title="添加中文封装成函数"></a>添加中文封装成函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：添加中文封装成函数.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/12 17:00 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont,ImageDraw,Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_chinese</span>(<span class="params">image,text,font_size,font_color</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param image: 传入的图片对象</span></span><br><span class="line"><span class="string">    :param text: 需要添加的文本</span></span><br><span class="line"><span class="string">    :param font_size: 字体大小</span></span><br><span class="line"><span class="string">    :param font_color: 字体颜色，四位元组，代表着RGBA，如（0,255,0,0）</span></span><br><span class="line"><span class="string">    :return: image</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    font = ImageFont.truetype(<span class="string">&quot;msyh.ttc&quot;</span>,font_size)</span><br><span class="line">    <span class="comment"># 创建一个pillow的图片</span></span><br><span class="line">    pil_img = Image.fromarray(image)</span><br><span class="line">    <span class="comment"># 绘制图片</span></span><br><span class="line">    draw = ImageDraw.Draw(pil_img)</span><br><span class="line">    <span class="comment"># 利用draw去绘制中文</span></span><br><span class="line">    draw.text((<span class="number">100</span>, <span class="number">200</span>), text , font=font, fill=font_color)  <span class="comment"># 后面的fill即颜色，RGBA</span></span><br><span class="line">    <span class="comment"># 重新变为ndarray</span></span><br><span class="line">    image = np.array(pil_img)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试函数能否正常运行</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cv2.namedWindow(<span class="string">&quot;image&quot;</span>,cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&quot;image&quot;</span>,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line">image = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line">image = add_chinese(image,<span class="string">&quot;测试函数能否正常运行&quot;</span>,<span class="number">150</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673514322602-99f3231f-c471-4372-8182-a61a020fc8f8.png#averageHue=%23aa9779&clientId=u3c9b3f0a-2573-4&from=paste&height=512&id=u75ee92bd&originHeight=768&originWidth=963&originalType=binary&ratio=1&rotation=0&showTitle=false&size=389209&status=done&style=none&taskId=ub9e8a319-a559-40c4-a774-caeb07479f6&title=&width=642" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.空间复杂度</title>
      <link href="/2023/08/21/53-%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2023/08/21/53-%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>一个程序的<strong>空间复杂度</strong>是指运行完一个程序所需的<strong>内存</strong>的大小。利用程序的空间复杂度可以对程序的运行所需要的_内存_多少有一个预先估计。<br>一个程序执行时，除了需要储存空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。程序执行时所需存储空间包括以下两个部分：</p><ul><li>固定部分。这部分空间的大小与输入&#x2F;输出的数据的个数多少、数值无关。主要包括指令空间（<strong>即代码空间</strong>）、数据空间（常量、简单变量）等所占的空间。这部分属于<strong>静态空间</strong>。</li><li>可变空间。这部分空间的主要包括动态分配的空间，以及递归栈所需的空间等。这部分的空间大小与算法有关。</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">a,b</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        b[i] = a[n-<span class="number">1</span>-i]</span><br><span class="line">        <span class="comment">#完成列表的逆序</span></span><br></pre></td></tr></table></figure><p>调用reverse方法时，要分配的内存空间包括：引用a，引用b、局部变量n、局部变量i。因此f(n)&#x3D; 4,该算法的空间复杂度为S（n）&#x3D;O（1）<br><strong>注</strong>：通常，我们都是用“时间复杂度”来指运行时间的需求，是用“空间复杂度”指空间需求。当直接要让我们求“复杂度”时，通常指的是时间复杂度。<strong>显然对时间复杂度的 追求更是属于算法的潮流</strong>！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.绘制图形</title>
      <link href="/2023/08/21/26-%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2/"/>
      <url>/2023/08/21/26-%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="绘制直线"><a href="#绘制直线" class="headerlink" title="绘制直线"></a>绘制直线</h1><p>cv2.line(img,pt1,pt2,color,thickness,lineType,shift)</p><ul><li>img：绘制的图片对象</li><li>pt1：起始点</li><li>pt2：终止点</li><li>color：颜色，用bgr形式表示，（0,0,255）表示红色</li><li>thickness：线宽</li><li>lineType：线的类型，与plt中的线类型不一样，这里主要是指毛边</li><li>shift：缩放比例，一半不做变化</li></ul><h1 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h1><p>cv2.rectangle(img,pt1,pt2,color,thickness,lineType,shift)</p><ul><li>参数和画直线一样，相当于画了一条对角线，根据对角线来画出矩形</li></ul><h1 id="绘制圆"><a href="#绘制圆" class="headerlink" title="绘制圆"></a>绘制圆</h1><p>cv2.circle(img,center,radius,color[,thickness[,lineType[,shift]]])</p><ul><li>相同的参数含义与直线一样，在这里不在声明</li><li>center：圆心的坐标</li><li>radius：圆的半径</li></ul><h1 id="绘制椭圆"><a href="#绘制椭圆" class="headerlink" title="绘制椭圆"></a>绘制椭圆</h1><p>cv2.ellipse(img,中心点，长宽的一半，偏移角度，从哪个角度开始，到哪个角度结束…)</p><ul><li>长宽的一半以元祖的形式传入，如（100,50）,第一个参数是长，第二个参数是宽</li></ul><h1 id="绘制多边形"><a href="#绘制多边形" class="headerlink" title="绘制多边形"></a>绘制多边形</h1><h2 id="无填充多边形："><a href="#无填充多边形：" class="headerlink" title="无填充多边形："></a>无填充多边形：</h2><p>cv2.polylines（img，pts,isColsed,color,thickness,[,lineType[,shift]]])</p><ul><li>上面一样的参数就不再介绍</li><li>pts:多边形的点集，注意维度，必须是int32位<ul><li>eg:pts &#x3D; np.array([[(300,10),(150,100),(450,100)]],np.int32)</li></ul></li><li>isColsed:是否闭合，即第一个点是否与最后一个点相连</li></ul><h1 id="填充多边形"><a href="#填充多边形" class="headerlink" title="填充多边形"></a>填充多边形</h1><p>cv2.fillPoly()</p><ul><li>参数与上面有所不同，没有isColsed，填充多边形一定闭合</li><li>也没有线宽thickness和类型lineType<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：绘制图形.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/12 15:57 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 创建窗口</span></span><br><span class="line">cv2.namedWindow(<span class="string">&quot;image&quot;</span>,cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&quot;image&quot;</span>,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line">image = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 画直线</span></span><br><span class="line">cv2.line(image,(<span class="number">10</span>,<span class="number">100</span>),(<span class="number">40</span>,<span class="number">320</span>),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">225</span>),<span class="number">5</span>,<span class="number">16</span>)</span><br><span class="line"><span class="comment"># 画矩形</span></span><br><span class="line">cv2.rectangle(image,(<span class="number">320</span>,<span class="number">40</span>),(<span class="number">420</span>,<span class="number">200</span>),(<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>),<span class="number">5</span>,<span class="number">16</span>)</span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">cv2.circle(image,(<span class="number">500</span>,<span class="number">500</span>),<span class="number">100</span>,(<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>),<span class="number">5</span>,<span class="number">16</span>)</span><br><span class="line"><span class="comment"># 画椭圆</span></span><br><span class="line">cv2.ellipse(image,(<span class="number">1000</span>,<span class="number">1000</span>),(<span class="number">200</span>,<span class="number">100</span>),<span class="number">0</span>,<span class="number">0</span>,<span class="number">360</span>,[<span class="number">134</span>,<span class="number">234</span>,<span class="number">234</span>],<span class="number">5</span>,<span class="number">16</span>)</span><br><span class="line"><span class="comment"># 画多边形</span></span><br><span class="line">pts_1 = np.array([[(<span class="number">223</span>,<span class="number">456</span>),(<span class="number">345</span>,<span class="number">643</span>),(<span class="number">563</span>,<span class="number">568</span>),(<span class="number">893</span>,<span class="number">297</span>)]],np.int32) <span class="comment"># 注意维度，以及32位无符号的整数</span></span><br><span class="line">cv2.polylines(image,pts_1,<span class="literal">True</span>,(<span class="number">123</span>,<span class="number">147</span>,<span class="number">189</span>),<span class="number">5</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画填充多边形</span></span><br><span class="line">pts_2 = np.array([[(<span class="number">323</span>,<span class="number">466</span>),(<span class="number">145</span>,<span class="number">143</span>),(<span class="number">963</span>,<span class="number">568</span>),(<span class="number">893</span>,<span class="number">397</span>)]],np.int32) <span class="comment"># 注意维度，以及32位无符号的整数</span></span><br><span class="line">cv2.fillPoly(image,pts_2,(<span class="number">223</span>,<span class="number">143</span>,<span class="number">89</span>))</span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673513006995-4bd324e7-9149-4415-ba40-4fa38cd6eae6.png#averageHue=%23ab9675&clientId=u9896ac51-85c9-4&from=paste&height=512&id=u6adec00b&originHeight=768&originWidth=963&originalType=binary&ratio=1&rotation=0&showTitle=false&size=376675&status=done&style=none&taskId=ue03e1b10-398e-496a-8cbe-71410b0474e&title=&width=642" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.时间复杂度</title>
      <link href="/2023/08/21/52-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2023/08/21/52-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><ul><li>一般来说，一个算法执行所消耗的时间从理论上是算不出来的。</li><li>一个算法花费的时间与算法中语句的执行次数是成正比的。</li><li>哪个算法语句执<strong>行次数多</strong>，它花费的时间就多。</li></ul><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ol><li>对于算法最重要的是<strong>数量级和趋势</strong>，这些是分析算法主要的部分。而计量算法基本操作数量的规模函数中那些常量因子可以忽略不计。</li><li>时间复杂度实际上就是一个函数，该函数计算的是执行基本操作的次数。一个算法语句总的执行次数是关于问题规模N的某个函数，记为<strong>f(N）</strong>，N称为问题的规模。语句总的执行次数，记为<strong>T[N]<strong>，当N不断变化时，</strong>T[N]<strong>也在不断变化，算法的执行次数的增长速率和f(N)的增长速率相同。则</strong>T[N]</strong>&#x3D;O(f(N)),称O(f(N))为时间复杂度的O渐进表示法。</li></ol><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ul><li>算法完成工作最少需要多少基本操作叫做最优时间复杂度，是一种最乐观最理想的状态。</li><li>算法完成工作最多需要多少基本操作叫做最坏时间复杂度，是算法的一个保障。</li><li>算法完成工作平均需要多少基本操作叫做平均时间复杂度，它可以均匀全面的评价一个算法的好坏。</li></ul><h1 id="计算规则"><a href="#计算规则" class="headerlink" title="计算规则"></a>计算规则</h1><ol><li>基本操作,即只有常数项，认为其时间复杂度为O(1)</li><li>顺序结构，时间复杂度按加法进行计算</li><li>循环结构，时间复杂度按乘法进行计算</li><li>分支结构，时间复杂度取最大值</li><li>判断一个算法效率时，往往只需要关注操作数量的最高次项，其他次要项和常数项可以忽略</li><li>在没有特殊说明时，我们所分析的时间复杂度都是指最坏时间复杂度</li></ol><h1 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h1><p>见csdn博客：<br>详解时间复杂度计算公式(附例题细致讲解过程)：</p><blockquote><p><a href="https://blog.csdn.net/weixin_63866037/article/details/128087397">https://blog.csdn.net/weixin_63866037&#x2F;article&#x2F;details&#x2F;128087397</a></p></blockquote><p><strong>没学算法前</strong>：三次暴力循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">begin_time = time.time()</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>):</span><br><span class="line">            <span class="keyword">if</span> a+b+c == <span class="number">1000</span> <span class="keyword">and</span> a**<span class="number">2</span>+b**<span class="number">2</span> == c**<span class="number">2</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;a,b,c:&quot;</span>,a,b,c)</span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这段代码一共执行了：&quot;</span>,end_time-begin_time,<span class="string">&quot;s&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1670745692035-afd0d7d6-d527-4c98-9ad2-b8ef41960460.png#averageHue=%23222537&clientId=u435fd587-7ba1-4&from=paste&height=156&id=u27b92928&originHeight=231&originWidth=538&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22502&status=done&style=none&taskId=u3bddf0eb-2c85-40e6-b7f5-ee988cad93d&title=&width=362.66668701171875" alt="image.png"><br>时间复杂度为O(n^3)<br><strong>学过算法之后：</strong>通过abc关系直接生成c：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">begin_time = time.time()</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>):</span><br><span class="line">        c = <span class="number">1000</span>-a-b</span><br><span class="line">        <span class="keyword">if</span> a+b+c == <span class="number">1000</span> <span class="keyword">and</span> a**<span class="number">2</span>+b**<span class="number">2</span> == c**<span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;a,b,c:&quot;</span>,a,b,c)</span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这段代码一共执行了：&quot;</span>,end_time-begin_time,<span class="string">&quot;s&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1670745838765-1e4251df-5b4b-4387-86e8-a3418f685757.png#averageHue=%23222537&clientId=u435fd587-7ba1-4&from=paste&height=150&id=u18afce16&originHeight=225&originWidth=528&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22354&status=done&style=none&taskId=uf1b7c8ad-2911-449e-85dd-911936ae9eb&title=&width=352" alt="image.png"><br>时间复杂度为O(n^2)<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1670808433368-a663c5d8-1dd4-4124-a9d1-9b227fae6bc5.png#averageHue=%23d7d3ce&clientId=u5cdb407a-37d5-4&from=paste&height=545&id=u0c67c2ea&originHeight=817&originWidth=1203&originalType=binary&ratio=1&rotation=0&showTitle=false&size=204894&status=done&style=none&taskId=u4f24845a-477f-4353-9735-6b815faaf47&title=&width=802" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1670808506390-68204f79-1c42-48b7-bad6-d442ea8ca95f.png#averageHue=%23ffe2de&clientId=u5cdb407a-37d5-4&from=paste&id=u5f9fab01&originHeight=49&originWidth=968&originalType=url&ratio=1&rotation=0&showTitle=false&size=5846&status=done&style=none&taskId=u337f8eed-dceb-404b-8511-455364cd04c&title=" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.图像通道分割与融合</title>
      <link href="/2023/08/21/25-%E5%9B%BE%E5%83%8F%E9%80%9A%E9%81%93%E5%88%86%E5%89%B2%E4%B8%8E%E8%9E%8D%E5%90%88/"/>
      <url>/2023/08/21/25-%E5%9B%BE%E5%83%8F%E9%80%9A%E9%81%93%E5%88%86%E5%89%B2%E4%B8%8E%E8%9E%8D%E5%90%88/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="图像通道分割"><a href="#图像通道分割" class="headerlink" title="图像通道分割"></a>图像通道分割</h1><p>b,g,r &#x3D; cv2.split(image)</p><ul><li>将三个通道的颜色分割出来</li></ul><h1 id="图像通道融合"><a href="#图像通道融合" class="headerlink" title="图像通道融合"></a>图像通道融合</h1><p>img2 &#x3D; cv2.merge((b,g,r))</p><ul><li>注意传入的是元组的形式</li><li>注意传入的顺序为bgr</li></ul><h1 id="图像通道值的修改"><a href="#图像通道值的修改" class="headerlink" title="图像通道值的修改"></a>图像通道值的修改</h1><p>b[10:100,10:100] &#x3D; 255</p><h1 id="图像并排显示"><a href="#图像并排显示" class="headerlink" title="图像并排显示"></a>图像并排显示</h1><p>cv2.imshow(“img”,np.hstack((img,img2)))<br>vstack就是竖着排</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：图像通道分割与融合.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/11 20:42 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">cv2.namedWindow(<span class="string">&quot;window&quot;</span>,cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&quot;window&quot;</span>,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line">image = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 通道分离</span></span><br><span class="line">b,g,r = cv2.split(image)</span><br><span class="line"><span class="comment"># 修改颜色</span></span><br><span class="line">b[<span class="number">10</span>:<span class="number">100</span>,<span class="number">10</span>:<span class="number">100</span>] = <span class="number">255</span></span><br><span class="line">g[<span class="number">10</span>:<span class="number">100</span>] = <span class="number">255</span></span><br><span class="line"><span class="comment"># 通道合并</span></span><br><span class="line">image_2 = cv2.merge((b,g,r))</span><br><span class="line"><span class="comment"># 并排显示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;window&quot;</span>,np.vstack((image,image_2))) <span class="comment">#np.hstack是横着排 np.vstack是竖着排</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673441372537-017b380e-08d5-4d26-9ed4-aaf9297abd4d.png#averageHue=%23b09c7d&clientId=u3a169d14-7eea-4&from=paste&height=512&id=ud87cd68b&originHeight=768&originWidth=963&originalType=binary&ratio=1&rotation=0&showTitle=false&size=409023&status=done&style=none&taskId=udec2e827-091c-4cec-88a0-ab51d4d5358&title=&width=642" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.算法的概念</title>
      <link href="/2023/08/21/51-%E7%AE%97%E6%B3%95%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/08/21/51-%E7%AE%97%E6%B3%95%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="算法的概念"><a href="#算法的概念" class="headerlink" title="算法的概念"></a>算法的概念</h1><p>如果将最终写好运行的程序比作战场，我们码农便是指挥作战的将军，而我们所写的代码便是士兵和武器。数据结构和算法则是<strong>兵法</strong>。如果我们常看兵法，便可以做到胸有成竹，有时会事半功倍！同样，如果我们常看<strong>算法</strong>，我们写程序时也能游刃有余、明察秋毫，遇到问题时亦能入木三分、迎刃而解。<strong>对于算法而言，实现的语言并不重要，重要的是思想</strong>。算法可以有不同的语言描述实现版本（如C描述、C++描述、_Python描述_等等）</p><h1 id="算法的五大特征"><a href="#算法的五大特征" class="headerlink" title="算法的五大特征"></a>算法的五大特征</h1><ul><li>输入性：有<strong>零个</strong>或者<strong>多个</strong>外部量作为算法的输入</li><li>输出性：算法至少有<strong>一个</strong>量作为输出</li><li>确定性：算法的每条指令清晰，无歧义</li><li>有穷性：算法的每条指令的执行次数<strong>有限</strong>，执行每条指令时间也<strong>有限</strong></li><li>可行性：算法原则上能够<strong>精确的</strong>运行，而且人们用<strong>纸和笔</strong>做有限次运算后就可完成</li></ul><hr><h1 id="算法应用实际案例"><a href="#算法应用实际案例" class="headerlink" title="算法应用实际案例"></a>算法应用实际案例</h1><p>【示例】如果a+b+c&#x3D; 1000，且a^2 +b^2&#x3D;c^2（a,b,c为自然数），如何求出所有a,b,c可能的组合：<br><strong>没学算法前</strong>：三次暴力循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">begin_time = time.time()</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>):</span><br><span class="line">            <span class="keyword">if</span> a+b+c == <span class="number">1000</span> <span class="keyword">and</span> a**<span class="number">2</span>+b**<span class="number">2</span> == c**<span class="number">2</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;a,b,c:&quot;</span>,a,b,c)</span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这段代码一共执行了：&quot;</span>,end_time-begin_time,<span class="string">&quot;s&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1670745692035-afd0d7d6-d527-4c98-9ad2-b8ef41960460.png#averageHue=%23222537&clientId=u435fd587-7ba1-4&from=paste&height=156&id=u27b92928&originHeight=231&originWidth=538&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22502&status=done&style=none&taskId=u3bddf0eb-2c85-40e6-b7f5-ee988cad93d&title=&width=362.66668701171875" alt="image.png"><br><strong>学过算法之后：</strong>通过abc关系直接生成c：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">begin_time = time.time()</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>):</span><br><span class="line">        c = <span class="number">1000</span>-a-b</span><br><span class="line">        <span class="keyword">if</span> a+b+c == <span class="number">1000</span> <span class="keyword">and</span> a**<span class="number">2</span>+b**<span class="number">2</span> == c**<span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;a,b,c:&quot;</span>,a,b,c)</span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这段代码一共执行了：&quot;</span>,end_time-begin_time,<span class="string">&quot;s&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34335114/1670745838765-1e4251df-5b4b-4387-86e8-a3418f685757.png#averageHue=%23222537&clientId=u435fd587-7ba1-4&from=paste&height=150&id=u18afce16&originHeight=225&originWidth=528&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22354&status=done&style=none&taskId=uf1b7c8ad-2911-449e-85dd-911936ae9eb&title=&width=352" alt="image.png"><br>可以看到之前用暴力循环求解用时为<strong>260多秒</strong>，用第二种算法用时为<strong>1秒多</strong>，所用时间大大减少。</p><h1 id="算法效率衡量标准"><a href="#算法效率衡量标准" class="headerlink" title="算法效率衡量标准"></a>算法效率衡量标准</h1><p><strong>单靠时间值</strong>绝对可信吗？如果同一段程序放到不同配置上面的电脑去运行，其运行时间可能也会相差很多，但这是同一段程序，其效率是一定的。程序的运行离不开计算机环境<strong>包括硬件和操作系统</strong>，这些客观原因会影响程序运行的速度并反应在程序的执行时间山。那么如何才能客观的评判一个算法的优劣呢？<br><strong>这就是后面要学习的时间复杂度</strong>和<strong>空间复杂度</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.颜色空间转化</title>
      <link href="/2023/08/21/24-%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E8%BD%AC%E5%8C%96/"/>
      <url>/2023/08/21/24-%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E8%BD%AC%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>cv2.cvtColor(img,转化方式方式）</p><ul><li>返回值是图像对象</li><li>常见的颜色空间转化方式<ul><li>cv2.COLOR_BGR2RGBA,</li><li>cv2.COLOR_BGR2BGRA,</li><li>cv2.COLOR_BGR2GRAY,</li><li>cv2.COLOR_BGR2HSV,</li><li>cv2.COLOR_BGR2YUV</li></ul></li><li><strong>空间转化方式其实本质上是数字,与变量名相当于映射</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="built_in">print</span>(cv2.COLOR_BGR2HSV)</span><br><span class="line"><span class="comment"># return 40</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：颜色空间转化.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/11 19:59 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 创建窗口</span></span><br><span class="line">cv2.namedWindow(<span class="string">&quot;window&quot;</span>,cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&quot;window&quot;</span>,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 定义颜色转化列表</span></span><br><span class="line">color_tran_list = [cv2.COLOR_BGR2HSV,cv2.COLOR_BGR2BGRA,cv2.COLOR_BGR2RGB,cv2.COLOR_BGR2YUV,cv2.COLOR_BGR2GRAY]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义回调函数,这里的velue名称</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 创建trackbar控件</span></span><br><span class="line">cv2.createTrackbar(<span class="string">&quot;trackbar&quot;</span>,<span class="string">&quot;window&quot;</span>,<span class="number">0</span>,<span class="number">4</span>,callback)</span><br><span class="line"><span class="comment"># 获取trackbar值，显示图片</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    index = cv2.getTrackbarPos(<span class="string">&quot;trackbar&quot;</span>,<span class="string">&quot;window&quot;</span>)</span><br><span class="line">    cvt_img = cv2.cvtColor(image,color_tran_list[index])</span><br><span class="line">    cv2.imshow(<span class="string">&quot;window&quot;</span>,cvt_img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673439308367-4993d911-f687-4595-b75f-53e8037e066b.png#averageHue=%237697ab&clientId=uf78c216e-e43a-4&from=paste&height=512&id=uf4f68154&originHeight=768&originWidth=963&originalType=binary&ratio=1&rotation=0&showTitle=false&size=336570&status=done&style=none&taskId=u8ecaf582-5963-4923-b6bc-c3cbfaac7a7&title=&width=642" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.二叉树的遍历</title>
      <link href="/2023/08/21/50-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2023/08/21/50-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>树的遍历是书的一种重要的运算，<strong>所谓遍历是指对树中所有节点的信息的访问，即一次对树中每个节点访问一次且仅访问一次</strong>，我们把这种对所有节点的访问称为遍历(traveral)。那么树的两种重要的遍历模式是<strong>深度优先遍历和广度优先遍历</strong>，深度优先一般用递归，广度优先一般用队列，<strong>一般情况下能用递归实现的算法大部分也能用堆栈来实现</strong>。</p><h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><p>对于一颗二叉树，<strong>深度优先搜素（Depth First Search)是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。</strong><br>那么深度遍历有重要的三种方法。这三种方式常被用于访问树的节点，他们之间的不同在于访问每个节点的次序不同。这三种遍历分别叫做<strong>先序遍历（preorder），中序遍历（inorder），和后序遍历（prstorder)。</strong>我们给出详细定义，然后举例看看它们的应用。</p><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>在先序遍历中，我们先访问根节点，然后递归使用先序遍历访问左子树，然后再递归使用先序遍历访问右子树。<br><strong>访问的顺序为：根节点-&gt;左子树-&gt;右子树</strong><br><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">self,root</span>):</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">print</span>(root.item)</span><br><span class="line">        self.preorder(root.lchild)</span><br><span class="line">        self.preorder(root.rchild)</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>在中序遍历中，我们递归使用中序遍历访问左子树，然后访问根节点，最后再递归使用中序遍历访问右子树<br><strong>访问顺序为：左子树-&gt;根节点-&gt;右子树</strong><br><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorder</span>(<span class="params">self,root</span>):</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.inorder(root.lchild)</span><br><span class="line">        <span class="built_in">print</span>(root.item)</span><br><span class="line">        self.inorder(root.rchild)</span><br></pre></td></tr></table></figure><h3 id="后续遍历"><a href="#后续遍历" class="headerlink" title="后续遍历"></a>后续遍历</h3><p>在后续遍历中，我们先递归使用后序遍历访问左子树和右子树，最后访问根节点。<br><strong>访问顺序为：左子树-&gt;右子树-&gt;根节点</strong><br><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postorder</span>(<span class="params">self,root</span>):</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.postorder(root.lchild)</span><br><span class="line">        self.postorder(root.rchild)</span><br><span class="line">        <span class="built_in">print</span>(root.item)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1672832124409-852c31f7-aaf1-4d86-853e-ca1246154fa0.png#averageHue=%23f8f8f8&clientId=uf655eaf5-5754-4&from=paste&height=227&id=ua40fc700&originHeight=341&originWidth=718&originalType=binary&ratio=1&rotation=0&showTitle=false&size=92593&status=done&style=none&taskId=ud1a68d1a-be7d-477c-92cc-ded64d9643d&title=&width=478.6666666666667" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1672832133362-e3bd5cb3-5f54-4585-aa6c-3892cc4e1989.png#averageHue=%23fcfcfb&clientId=uf655eaf5-5754-4&from=paste&height=186&id=u65dbd892&originHeight=279&originWidth=306&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52264&status=done&style=none&taskId=ub886870f-4d5e-453f-a90d-1ee9c3bc7e9&title=&width=204" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1672832144299-295b6645-bd19-49d4-9a97-848cf99ae00f.png#averageHue=%23e0dfdf&clientId=uf655eaf5-5754-4&from=paste&height=111&id=u06dca43a&originHeight=166&originWidth=867&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17069&status=done&style=none&taskId=ubd5f95e9-6269-4b24-9d05-a6296af1f81&title=&width=578" alt="image.png"></p><h2 id="广度优先遍历（层次遍历"><a href="#广度优先遍历（层次遍历" class="headerlink" title="广度优先遍历（层次遍历)"></a>广度优先遍历（层次遍历)</h2><p>从树的root开始，从上到下从左到右遍历整个树的节点<br><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">breath_travel</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        queue = []</span><br><span class="line">        queue.append(self.root)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node =queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">print</span>(node.elem)</span><br><span class="line">            <span class="keyword">if</span> node.lchild != <span class="literal">None</span>:</span><br><span class="line">                queue.append(node.lchild)</span><br><span class="line">            <span class="keyword">if</span> node.rchild != <span class="literal">None</span>:</span><br><span class="line">                queue.append(node.rchild)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.trackBar控件</title>
      <link href="/2023/08/21/23-trackBar%E6%8E%A7%E4%BB%B6/"/>
      <url>/2023/08/21/23-trackBar%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h1><p>cv2.createTrackbar(trackbarname,winname,value,count,onChange)</p><ul><li>功能：创建TrackBar控件</li><li>trackbarname:名称</li><li>winname:显示窗口</li><li>value为trackbar的默认值</li><li>count为bar的最大值，最小为0</li><li>OnChange:回调函数</li></ul><p>cv2.getTrackbarPos(trackbarname,winname)</p><ul><li>功能获取TrackBar当前值</li><li>trackbarname:上面创建的trackbar对象名称</li><li>winname:显示窗口的名称</li></ul><h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">value</span>):</span><br><span class="line"><span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：trackBar控件.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/11 18:19 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">cv2.namedWindow(<span class="string">&quot;window&quot;</span>,cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&quot;window&quot;</span>,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Trackbar控件</span></span><br><span class="line">cv2.createTrackbar(<span class="string">&quot;R&quot;</span>,<span class="string">&quot;window&quot;</span>,<span class="number">0</span>,<span class="number">255</span>,callback)</span><br><span class="line">cv2.createTrackbar(<span class="string">&quot;G&quot;</span>,<span class="string">&quot;window&quot;</span>,<span class="number">0</span>,<span class="number">255</span>,callback)</span><br><span class="line">cv2.createTrackbar(<span class="string">&quot;B&quot;</span>,<span class="string">&quot;window&quot;</span>,<span class="number">0</span>,<span class="number">255</span>,callback)</span><br><span class="line"><span class="comment"># 用np创建一个图像矩阵</span></span><br><span class="line">image = np.zeros((<span class="number">480</span>,<span class="number">640</span>,<span class="number">3</span>),np.uint8)  <span class="comment"># 注意这里的长宽是相反的，3是指通道数，np.uint8指无符号的整数</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 获取Trackbar控件的值</span></span><br><span class="line">    r = cv2.getTrackbarPos(<span class="string">&quot;R&quot;</span>,<span class="string">&quot;window&quot;</span>)</span><br><span class="line">    g = cv2.getTrackbarPos(<span class="string">&quot;G&quot;</span>,<span class="string">&quot;window&quot;</span>)</span><br><span class="line">    b = cv2.getTrackbarPos(<span class="string">&quot;B&quot;</span>,<span class="string">&quot;window&quot;</span>)</span><br><span class="line">    <span class="comment"># 用获取的值来生成图片</span></span><br><span class="line">    image[:] = [r,g,b] <span class="comment"># 替换像素</span></span><br><span class="line">    <span class="comment"># 显示图片</span></span><br><span class="line">    cv2.imshow(<span class="string">&quot;window&quot;</span>,image)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673439335522-fb2f24bd-b9de-4364-bdb0-8792b9c3d27d.png#averageHue=%2360a483&clientId=u28306971-fce3-4&from=paste&height=512&id=u5ada6af9&originHeight=768&originWidth=963&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13601&status=done&style=none&taskId=u43a5ea28-b52c-4529-af22-525ad985398&title=&width=642" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.二叉树</title>
      <link href="/2023/08/21/49-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2023/08/21/49-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>二叉树是每个节点最多有两个子树的树结构。通常子树被称作”左子树“（left subtree)和”右子树“（right subtree)。</p><h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h1><ol><li>在二叉树的第i层上至多有2^(i-1)个节点(i&gt;0)</li><li>深度为k的二叉树至多有2^k-1个节点</li><li>对于任意一颗二叉树，如果其叶节点数为N0，而度数为2 的节点总书为N2，那么N0 &#x3D; N2+1</li><li>具有n个系欸点的完全二叉树的深度必为log2(n+1)</li><li>对完全二叉树 ，若从上到下、从左到右编号，则编号为i的结点，其左孩子编号必为2i，其右孩子编号必为2i+1；其双氢的编号必为i&#x2F;2 （i&#x3D;1时为根除外）</li></ol><h1 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h1><p><strong>完全二叉树：</strong>设二叉树的高度为h，除第h层外，其他各层（1~h-1）的节点数都达到最大个数，第h层有叶子节点，并且叶子节点都是从左到右依次排布，这就是完全二叉树。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1672743933617-7ba6aef0-fdfe-4ee4-854c-d069a24ef0c2.png#averageHue=%23f7f4f4&clientId=ue57a5584-f8b1-4&from=paste&height=375&id=ub078f4c6&originHeight=395&originWidth=441&originalType=binary&ratio=1&rotation=0&showTitle=false&size=84763&status=done&style=none&taskId=u4f1ad3d6-0573-48f5-8101-adeade87f39&title=&width=419" alt="image.png"><br><strong>满二叉树</strong>：除了叶节点外每个节点都有左右子叶且叶子节点都处在最外层的二叉树<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1672744034687-47858e02-9beb-4aa0-87b0-565d7acafc1f.png#averageHue=%23edf1e3&clientId=ue57a5584-f8b1-4&from=paste&height=379&id=u154b4c43&originHeight=353&originWidth=344&originalType=binary&ratio=1&rotation=0&showTitle=false&size=100525&status=done&style=none&taskId=ueafbd6db-1720-4905-a1fc-74ec0e816ef&title=&width=369.3333435058594" alt="image.png"></p><h1 id="二叉树的节点及树的创建"><a href="#二叉树的节点及树的创建" class="headerlink" title="二叉树的节点及树的创建"></a>二叉树的节点及树的创建</h1><ol><li><p>节点创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,elem=-<span class="number">1</span>,lchild=<span class="literal">None</span>,rchild=<span class="literal">None</span></span>):</span><br><span class="line">        self.elem = elem</span><br><span class="line">        self.lchild = lchild</span><br><span class="line">        self.rchild = rchild</span><br></pre></td></tr></table></figure></li><li><p>树的初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,root = <span class="literal">None</span></span>):</span><br><span class="line">        self.root =root</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,elem</span>):</span><br><span class="line">    <span class="comment"># 首先创建节点</span></span><br><span class="line">    node = Node(elem)</span><br><span class="line">    <span class="comment"># 如果树是空的，则对root根赋值</span></span><br><span class="line">    <span class="keyword">if</span> self.root == <span class="literal">None</span>:</span><br><span class="line">        self.root = node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        queue = []</span><br><span class="line">        queue.append(self.root)</span><br><span class="line">        <span class="comment"># 对已有的节点进行层次遍历</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> cur.lchild == <span class="literal">None</span>:</span><br><span class="line">                cur.lchild = node</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> cur.rchild == <span class="literal">None</span>:</span><br><span class="line">                cur.rchild = node</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#如果左右子树都不为空，加入队列继续判断</span></span><br><span class="line">                queue.append(cur.lchild)</span><br><span class="line">                queue.append(cur.rchild)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.控制鼠标</title>
      <link href="/2023/08/21/22-%E6%8E%A7%E5%88%B6%E9%BC%A0%E6%A0%87/"/>
      <url>/2023/08/21/22-%E6%8E%A7%E5%88%B6%E9%BC%A0%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h1><p>def mouse_callback(event,x,y,flags,userdata):<br>print(event,x,y,flags,userdata)</p><ul><li>函数名可以随便取，但是参数必须是5个</li><li>event表示鼠标事件，x,y是鼠标的坐标</li><li>flags鼠标的组合按键</li><li>userdata表示用户的数据</li><li><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673430213243-6cd4016c-a5d8-4fca-bbca-b487c65f9d70.png#averageHue=%23f7f6f5&clientId=uf5eb99f5-b4f5-4&from=paste&height=437&id=uc0fa4787&originHeight=655&originWidth=706&originalType=binary&ratio=1&rotation=0&showTitle=false&size=237517&status=done&style=none&taskId=u139efc56-2e6c-47a0-a90b-df2f12f5216&title=&width=470.6666666666667" alt="image.png"></li><li><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673431453142-d57bcbe4-0c26-4830-aa9a-89a760e50c40.png#averageHue=%23f4f3f2&clientId=uf5eb99f5-b4f5-4&from=paste&height=160&id=u4ccfdadf&originHeight=240&originWidth=553&originalType=binary&ratio=1&rotation=0&showTitle=false&size=68350&status=done&style=none&taskId=u53ec3d9c-9f43-4db8-950f-29a2b244263&title=&width=368.6666666666667" alt="image.png"></li></ul><p>cv2.setMouseCallback(窗口，函数，用户信息）</p><ul><li>函数为上面定义的函数 ，注意不加括号，否则会报缺少参数的错误</li><li>用户信息为字符串，eg “123”<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：控制鼠标.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/11 18:05 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouse_callback</span>(<span class="params">event,x,y,flags,userdata</span>):</span><br><span class="line">    <span class="built_in">print</span>(event,x,y,flags,userdata)</span><br><span class="line">    <span class="keyword">if</span> event == <span class="number">3</span>:</span><br><span class="line">        cv2.destroyAllWindows()   <span class="comment"># 摧毁窗口之后，后面的循环又会创建新的窗口显示出来，所以会出现一闪的效果</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">620</span>,<span class="number">480</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv2.imshow(<span class="string">&quot;image&quot;</span>,image)</span><br><span class="line">    cv2.setMouseCallback(<span class="string">&quot;image&quot;</span>,mouse_callback,<span class="string">&quot;123&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.队列</title>
      <link href="/2023/08/21/48-%E9%98%9F%E5%88%97/"/>
      <url>/2023/08/21/48-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><strong>队列（queue)是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</strong><br>队列是一种先进先出的（First In First Out)的线性表，简称FIFO。<strong>允许插入的一端为队尾，允许删除的一端为队头</strong>。队列不允许在中间的部位进行操作！假设队列是q&#x3D;（a1,a2,…,an)，那么a1就是对头元素，而an是队尾元素。这样我们就可以在删除时，总是从a1开始，而插入时，总是在队列最后。这也比较符合我们通常生活中的习惯，<strong>排在第一个的优先出列，最后来的当然排在队伍的最后</strong>。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1672739497546-80d08bac-c789-415a-bfc8-07043d67da4b.png#averageHue=%23fdfdfd&clientId=ud2196fc5-b593-4&from=paste&height=439&id=u0b9236b0&originHeight=659&originWidth=1117&originalType=binary&ratio=1&rotation=0&showTitle=false&size=173045&status=done&style=none&taskId=u64f2f64d-dcec-499e-a347-0d28e763c5f&title=&width=744.6666666666666" alt="image.png"></p><h1 id="队列的操作"><a href="#队列的操作" class="headerlink" title="队列的操作"></a>队列的操作</h1><ol><li>Queue()创建一个空的队列</li><li>enqueue(item)往队列中添加一个item元素</li><li>dequeue（）从队列的头部删除一个元素</li><li>is_empty()判断一个队列是否为空</li><li>size()返回队列的大小</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：python算法 </span></span><br><span class="line"><span class="string">@File    ：12队列.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/3 17:55 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self,item</span>):</span><br><span class="line">        <span class="comment"># 进入队列</span></span><br><span class="line">        self.items.insert(<span class="number">0</span>,item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    q.enqueue(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    q.enqueue(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">    q.enqueue(<span class="string">&quot;bjsxt&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(q.size())</span><br><span class="line">    <span class="built_in">print</span>(q.dequeue())</span><br><span class="line">    <span class="built_in">print</span> (q.dequeue())</span><br><span class="line">    <span class="built_in">print</span>(q.dequeue())</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.创建与显示窗口</title>
      <link href="/2023/08/21/21-%E5%BD%95%E5%88%B6%E8%A7%86%E9%A2%91/"/>
      <url>/2023/08/21/21-%E5%BD%95%E5%88%B6%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="mp4格式"><a href="#mp4格式" class="headerlink" title="mp4格式"></a>mp4格式</h1><p>fourcc &#x3D; cv2.VideoWriter_fourcc(<em>“mp4v”)<br>vw &#x3D; cv2.VideoWriter</em>(file,fourcc,帧率，分辨率）</p><ul><li>file：输出文件</li><li>fourcc:格式，mp4用上面定义的</li><li>帧率：规定的帧率，实际上受后面的waitKey影响</li><li>分辨率(像素）：<strong>摄像头拍摄视频的大小，这个一定不能搞错，eg（640，480）</strong></li></ul><p>vw.write(frame)</p><h1 id="avi格式"><a href="#avi格式" class="headerlink" title="avi格式"></a>avi格式</h1><p>fourcc &#x3D; cv2.VideoWriter_fourcc(<em>“XVID”)<br>vw &#x3D; cv2.VideoWriter</em>(file,fourcc,帧率，分辨率）</p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.栈</title>
      <link href="/2023/08/21/47-%E6%A0%88/"/>
      <url>/2023/08/21/47-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>栈（stack），有些地方称为堆栈，<strong>是一种容器</strong>，可存入数据元素，访问元素，删除元素，<strong>它的特点在于只允许在容器的一端（称为栈顶端指标，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算</strong>。没有了位置的概念，保证任何时候可以访问删除的元素都是此前最后存入的那个元素，确定了一种默认的访问顺序。<br><strong>由于栈数据结构只允许在一端进行操作，因而按照后进先出（LIFO，Last in First Out）的原理运作</strong>。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1672735343552-c32a8eb3-a0cf-4f75-bc72-b96d0734383e.png#averageHue=%23f2f2f2&clientId=u92978731-8cf9-4&from=paste&height=477&id=u12fc18b0&originHeight=715&originWidth=837&originalType=binary&ratio=1&rotation=0&showTitle=false&size=98141&status=done&style=none&taskId=uf3d7c2af-8d38-475d-bce6-8a52560b84b&title=&width=558" alt="image.png"></p><h1 id="栈结构实现"><a href="#栈结构实现" class="headerlink" title="栈结构实现"></a>栈结构实现</h1><ol><li>Stack（）创建一个空栈</li><li>push()添加一个新的元素item到栈顶</li><li>pop()弹出栈顶元素</li><li>peek()返回栈顶元素</li><li>is_empty()判断栈是否为空</li><li>size()返回栈的元素个数</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：python算法 </span></span><br><span class="line"><span class="string">@File    ：11栈.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/3 17:00 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,item</span>):</span><br><span class="line">        <span class="comment"># 进栈</span></span><br><span class="line">        self.items.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 弹出栈顶元素</span></span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回栈顶元素</span></span><br><span class="line">        <span class="keyword">return</span> self.items[<span class="built_in">len</span>(self.items)-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    stack = Stack()</span><br><span class="line">    stack.push(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    stack.push(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">    stack.push(<span class="string">&quot;bjsxt&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(stack.size())</span><br><span class="line">    <span class="built_in">print</span>(stack.peek())</span><br><span class="line">    <span class="built_in">print</span>(stack.pop())</span><br><span class="line">    <span class="built_in">print</span>(stack.pop())</span><br><span class="line">    <span class="built_in">print</span>(stack.pop())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.读取摄像头和视频数据</title>
      <link href="/2023/08/21/20-%E8%AF%BB%E5%8F%96%E6%91%84%E5%83%8F%E5%A4%B4%E5%92%8C%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/08/21/20-%E8%AF%BB%E5%8F%96%E6%91%84%E5%83%8F%E5%A4%B4%E5%92%8C%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="读取摄像头"><a href="#读取摄像头" class="headerlink" title="读取摄像头"></a>读取摄像头</h1><p>cap &#x3D; cv2.VideoCapture(文件&#x2F;摄像头代号)</p><ul><li>0代表这本地的摄像头，如果外接摄像头也可以更换成其他代号，比如1</li><li>也可以是文件名，注意后缀</li></ul><h1 id="获取摄像头图片"><a href="#获取摄像头图片" class="headerlink" title="获取摄像头图片"></a>获取摄像头图片</h1><p>flag,frame &#x3D; cap.read()</p><ul><li>cap.read()会返回两个值，一个是标记，一个是该帧的图片</li></ul><h1 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h1><p>cap.release()</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>) <span class="comment"># 摄像头</span></span><br><span class="line">count = <span class="number">0</span> <span class="comment"># 计数器，后面捕获图片的时候更改名字，防止图片发生覆盖</span></span><br><span class="line"><span class="keyword">while</span> cap.isOpened():</span><br><span class="line">    <span class="comment"># 读每一帧 flag返回标记,frame即为该帧图像</span></span><br><span class="line">    flag,frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cv2.imshow(<span class="string">&quot;img&quot;</span>,frame)</span><br><span class="line">        key = cv2.waitKey(<span class="number">1</span>)  <span class="comment"># 0的话需要一直等，1的话代表1毫秒，等待时间非常短</span></span><br><span class="line">        <span class="keyword">if</span> key == <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> key == <span class="built_in">ord</span>(<span class="string">&quot;s&quot;</span>):</span><br><span class="line">            cv2.imwrite(<span class="string">&quot;test_&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(count),frame)</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h1 id="视频数据"><a href="#视频数据" class="headerlink" title="视频数据"></a>视频数据</h1><p>和读取摄像头一样，需要更改的是cv2.VideoCapture(“路径”)</p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.双向链表</title>
      <link href="/2023/08/21/46-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/08/21/46-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>一种更复杂的链表是“双向链表”或“双面链表”、每个节点有两个链接：一个指向前一个节点，当此节点为第一个节点时，指向空值；而另一个指向下一个节点，当此节点为最后一个节点时，指向空值。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1672824665329-1c039a80-96a2-4877-ad79-68d85dc0c69b.png#averageHue=%23f2f2f2&clientId=u93fddaf4-abd9-4&from=paste&height=229&id=u0177dcf2&originHeight=344&originWidth=1354&originalType=binary&ratio=1&rotation=0&showTitle=false&size=69218&status=done&style=none&taskId=u96aeb6a9-a86f-49f1-a806-894cb42287d&title=&width=902.6666666666666" alt="image.png"></p><h1 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h1><ol><li><p>结点定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,item</span>):</span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span> <span class="comment">#后指针</span></span><br><span class="line">        self.prev = <span class="literal">None</span> <span class="comment">#前指针</span></span><br></pre></td></tr></table></figure></li><li><p>链表初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkList</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__head = <span class="literal">None</span></span><br></pre></td></tr></table></figure></li><li><p>判断是否为空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.__head == <span class="literal">None</span></span><br></pre></td></tr></table></figure></li><li><p>判断链表长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">self</span>):</span><br><span class="line">    cur = self.__head</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br><span class="line">        count +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>遍历链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">travel</span>(<span class="params">self</span>):</span><br><span class="line">    cur = self.__head</span><br><span class="line">    <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(cur.item,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure></li><li><p>头部添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,item</span>):</span><br><span class="line">    <span class="comment">#头部插入</span></span><br><span class="line">    <span class="comment">#首先创建结点</span></span><br><span class="line">    node = Node(item)</span><br><span class="line">    <span class="comment"># 判断是否是空列表</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        self.__head = node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># node结点的next指向原本的头结点</span></span><br><span class="line">        node.<span class="built_in">next</span> = self.__head</span><br><span class="line">        <span class="comment"># 先前头结点的前指针指向node</span></span><br><span class="line">        self.__head.prev = node</span><br><span class="line">        <span class="comment"># __head指向node</span></span><br><span class="line">        self.__head = node</span><br></pre></td></tr></table></figure></li><li><p>尾部添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self,item</span>):</span><br><span class="line">    <span class="comment"># 首先创建节点</span></span><br><span class="line">    node = Node(item)</span><br><span class="line">    <span class="comment"># 判断是否是空链表</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        self.__head = node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cur = self.__head</span><br><span class="line">        <span class="comment"># 找到最后一个节点</span></span><br><span class="line">        <span class="keyword">while</span> cur.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 前一个节点的next指向node节点</span></span><br><span class="line">        cur.<span class="built_in">next</span> = node</span><br><span class="line">        <span class="comment"># node的 前指针指向前一个节点</span></span><br><span class="line">        node.prev = cur</span><br></pre></td></tr></table></figure></li><li><p>指定位置添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self,pos,item</span>):</span><br><span class="line">    <span class="comment"># 首先判断位置</span></span><br><span class="line">    <span class="comment"># 如果插入的位置在最前面</span></span><br><span class="line">    <span class="keyword">if</span> pos &lt;<span class="number">0</span>:</span><br><span class="line">        self.add(item)</span><br><span class="line">    <span class="keyword">elif</span> pos &gt; (self.length()-<span class="number">1</span>):</span><br><span class="line">        self.append(item)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 首先创建当前节点</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        cur = self.__head</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 移动到当前位置的前一个节点</span></span><br><span class="line">        <span class="keyword">while</span> count &lt; pos-<span class="number">1</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># node的前指针指向前一个节点</span></span><br><span class="line">        node.prev = cur</span><br><span class="line">        <span class="comment"># node的后指针指向后一个节点</span></span><br><span class="line">        node.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 前一个节点的后指针指向node节点</span></span><br><span class="line">        cur.<span class="built_in">next</span> = node</span><br><span class="line">        <span class="comment"># 后一个节点的前指针指向node节点</span></span><br><span class="line">        cur.<span class="built_in">next</span>.prev = node</span><br></pre></td></tr></table></figure></li><li><p>查找元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self,item</span>):</span><br><span class="line">    cur = self.__head</span><br><span class="line">    <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> cur.item == item:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>删除元素 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self,item</span>):</span><br><span class="line">    cur = self.__head</span><br><span class="line">    <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 如果是头节点</span></span><br><span class="line">        <span class="keyword">if</span> cur.item == item:</span><br><span class="line">            <span class="keyword">if</span> cur == self.__head:</span><br><span class="line">                <span class="comment"># __head 直接指向头节点的下一个节点</span></span><br><span class="line">                self.__head = cur.<span class="built_in">next</span></span><br><span class="line">                <span class="comment"># 判断链表是否只有一个节点</span></span><br><span class="line">                <span class="keyword">if</span> cur.<span class="built_in">next</span>:</span><br><span class="line">                    cur.<span class="built_in">next</span>.prev = <span class="literal">None</span></span><br><span class="line">                <span class="comment"># __head 直接指向头节点的下一个节点</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur.prev.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">                <span class="comment"># 如果是最后一个节点的话,cur.next为none，不存在prev</span></span><br><span class="line">                <span class="keyword">if</span> cur.<span class="built_in">next</span>:</span><br><span class="line">                    cur.<span class="built_in">next</span>.prev = cur.prev</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></table></figure></li><li><p>测试用例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    doubleLinkList=DoubleLinkList()</span><br><span class="line">    doubleLinkList.add(<span class="number">11</span>)</span><br><span class="line">    doubleLinkList.add(<span class="number">22</span>)</span><br><span class="line">    doubleLinkList.add(<span class="number">33</span>)</span><br><span class="line">    doubleLinkList.travel()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----------追加-----------&#x27;</span>)</span><br><span class="line">    doubleLinkList.append(<span class="number">100</span>)</span><br><span class="line">    doubleLinkList.append(<span class="number">200</span>)</span><br><span class="line">    doubleLinkList.append(<span class="number">300</span>)</span><br><span class="line">    doubleLinkList.travel()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;指定位置插入&#x27;</span>)</span><br><span class="line">    doubleLinkList.insert(-<span class="number">1</span>,<span class="number">44</span>)</span><br><span class="line">    doubleLinkList.travel()</span><br><span class="line">    doubleLinkList.insert(<span class="number">100</span>,<span class="number">400</span>)</span><br><span class="line">    doubleLinkList.travel()</span><br><span class="line">    doubleLinkList.insert(<span class="number">2</span>,<span class="number">1000</span>)</span><br><span class="line">    doubleLinkList.travel()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------删除节点--------&#x27;</span>)</span><br><span class="line">    doubleLinkList.remove(<span class="number">44</span>)</span><br><span class="line">    doubleLinkList.travel()</span><br><span class="line">    doubleLinkList.remove(<span class="number">1000</span>)</span><br><span class="line">    doubleLinkList.travel()</span><br><span class="line">    doubleLinkList.remove(<span class="number">400</span>)</span><br><span class="line">    doubleLinkList.travel()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;链表的长度：&#x27;</span>,doubleLinkList.length())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;查找节点 11&#x27;</span>,doubleLinkList.search(<span class="number">11</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;查找节点 111&#x27;</span>,doubleLinkList.search(<span class="number">111</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1672830646513-4560b195-b2be-4a4e-859f-e26122ea1bc5.png#averageHue=%23202334&clientId=u76179776-7e67-4&from=paste&height=459&id=ubfe9c768&originHeight=689&originWidth=814&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44911&status=done&style=none&taskId=u4c5aa786-de8f-4230-8242-d8030c19817&title=&width=542.6666666666666" alt="image.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.读取与保存图片</title>
      <link href="/2023/08/21/19-%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87/"/>
      <url>/2023/08/21/19-%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h1><p>cv2.imread(name,model)</p><ul><li>name:图片的路径</li><li>model:读取的方式</li><li>opencv读取进来的图片数据的通道不是默认的RGB，而是BGR，所以在展示的的时候就opencv的方式去展示，而不要用matplotlib的方式去展示。</li></ul><h1 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h1><p>cv2.imwrite(path,img)</p><ul><li>path:保存的路径</li><li>img：保存的图片</li></ul>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.单向链表</title>
      <link href="/2023/08/21/45-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/08/21/45-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>单向链表也叫做单链表，是链表中最简单的一种形式，他的每个节点包含两个域，一个信息域（元素域）和一个链接域。这个链接指向链表中的下一个节点，而最后一个节点的链接域指向一个空值(None)<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1672707775794-605f7536-2f41-4993-bb86-d838552504cc.png#averageHue=%23f9f9f9&clientId=u8b0a2236-573e-4&from=paste&height=203&id=uccbcb0cd&originHeight=304&originWidth=1224&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75492&status=done&style=none&taskId=u1644364e-25ca-436c-8516-3417e3af73e&title=&width=816" alt="image.png"></p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ol><li>表元素域elem用来存放具体的数据</li><li>链接域next用来存放下一个节点的位置（Python中的标识）<strong>指向下一个结点</strong></li><li>变量p指向链表的头节点（首结点）的位置，从p出发能找到表中的任意节点。</li></ol><h1 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h1><ol><li><p><strong>Node结点</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,item</span>):</span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure></li><li><p><strong>链表初始化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,node = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> node != <span class="literal">None</span>: <span class="comment"># 不为空的话，创建结点作为头结点</span></span><br><span class="line">            headNode = Node(node)</span><br><span class="line">            self.__head = headNode</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__head = node  <span class="comment">#相当于等于None</span></span><br></pre></td></tr></table></figure></li><li><p><strong>判断是否为空</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.__head == <span class="literal">None</span> <span class="comment">#根据头结点是否是空来判断</span></span><br></pre></td></tr></table></figure></li><li><p><strong>链表长度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 获取链表长度</span></span><br><span class="line">    cur = self.__head</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="comment">#不断next直到直到最末尾None</span></span><br><span class="line">    <span class="keyword">while</span> cur!=<span class="literal">None</span>:</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure></li><li><p><strong>遍历链表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">travel</span>(<span class="params">self</span>):</span><br><span class="line">    cur = self.__head</span><br><span class="line">    <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(cur.item,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>头部添加元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,item</span>):</span><br><span class="line">    <span class="comment">#首先创造结点</span></span><br><span class="line">    node = Node(item)</span><br><span class="line">    <span class="comment"># 结点指向头部</span></span><br><span class="line">    node.<span class="built_in">next</span> = self.__head</span><br><span class="line">    <span class="comment">#__head指向当前node结点</span></span><br><span class="line">    self.__head = node</span><br></pre></td></tr></table></figure></li><li><p><strong>尾部添加元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self,item</span>):</span><br><span class="line">    <span class="comment"># 首先创造结点</span></span><br><span class="line">    node = Node(item)</span><br><span class="line">    <span class="comment">#判断链表是否为空，如果是空的话，那么就是头结点</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        self.__head = node <span class="comment"># 把当前结点当作头结点</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 从头结点一直找到最后一个，将最后的一个next指向当前的node结点</span></span><br><span class="line">        curNode = self.__head</span><br><span class="line">        <span class="keyword">while</span> curNode.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">            curNode = curNode.<span class="built_in">next</span></span><br><span class="line">        curNode.<span class="built_in">next</span> = node</span><br></pre></td></tr></table></figure></li><li><p><strong>指定位置添加元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self,pos,item</span>):</span><br><span class="line">    <span class="comment"># 若指定位置pos为第一个元素之前，则执行头部插入</span></span><br><span class="line">    <span class="keyword">if</span> pos &lt;=<span class="number">0</span>:</span><br><span class="line">        self.add(item)</span><br><span class="line">    <span class="comment"># 若指定位置pos超过链表尾部，则执行尾部插入</span></span><br><span class="line">    <span class="keyword">elif</span> pos &gt; (self.length()-<span class="number">1</span>):</span><br><span class="line">        self.append(item)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 首先创造结点</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        pre = self.__head</span><br><span class="line">        <span class="keyword">while</span> count &lt; (pos-<span class="number">1</span>):</span><br><span class="line">            count +=<span class="number">1</span></span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 前一个结点指向的现在变成node指向</span></span><br><span class="line">        node.<span class="built_in">next</span> =pre.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 前一个结点现在指向node结点</span></span><br><span class="line">        pre.<span class="built_in">next</span> = node</span><br></pre></td></tr></table></figure></li><li><p><strong>删除元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self,item</span>):</span><br><span class="line">    cur = self.__head</span><br><span class="line">    pre = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> cur.item == item:</span><br><span class="line">            <span class="comment">#如果第一个就是删除的元素</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pre : <span class="comment"># pre没有发生变化，说明第一个就是删除的元素</span></span><br><span class="line">                self.__head = cur.<span class="built_in">next</span> <span class="comment"># 头结点直接指向第二个元素</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#将删除位置前一个结点的next指向删除位置的后一个结点</span></span><br><span class="line">                pre.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># pre存的就是上一个结点</span></span><br><span class="line">            pre = cur</span><br><span class="line">            <span class="comment"># cur存的就是下一个结点</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></table></figure></li><li><p><strong>查找元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self,item</span>):</span><br><span class="line">    cur = self.__head</span><br><span class="line">    <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> cur.item == item:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#初始化元素值为 20 的单向链表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># singleLinkList=SingleLinkList(20)</span></span><br><span class="line">    <span class="comment">#初始化一个空的单向链表</span></span><br><span class="line"></span><br><span class="line">    singleLinkList=SingleLinkList()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;是否是空链表：&#x27;</span>,singleLinkList.is_empty())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;链表的长度：&#x27;</span>,singleLinkList.length())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------遍历单链表----------&#x27;</span>)</span><br><span class="line">    singleLinkList.travel()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--------查找---------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(singleLinkList.search(<span class="number">20</span>))</span><br><span class="line">    <span class="built_in">print</span>(singleLinkList.search(<span class="number">30</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------头部插入-----------&#x27;</span>)</span><br><span class="line">    singleLinkList.add(<span class="number">1</span>)</span><br><span class="line">    singleLinkList.add(<span class="number">2</span>)</span><br><span class="line">    singleLinkList.add(<span class="number">3</span>)</span><br><span class="line">    singleLinkList.travel()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------尾部追加-----------&#x27;</span>)</span><br><span class="line">    singleLinkList.append(<span class="number">10</span>)</span><br><span class="line">    singleLinkList.append(<span class="number">20</span>)</span><br><span class="line">    singleLinkList.append(<span class="number">30</span>)</span><br><span class="line">    singleLinkList.travel()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;链表的长度：&#x27;</span>, singleLinkList.length())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------指定位置插入----------&#x27;</span>)</span><br><span class="line">    singleLinkList.insert(<span class="number">2</span>,<span class="number">100</span>)</span><br><span class="line">    singleLinkList.travel()</span><br><span class="line">    singleLinkList.insert(-<span class="number">1</span>, <span class="number">200</span>)</span><br><span class="line">    singleLinkList.travel()</span><br><span class="line">    singleLinkList.insert(<span class="number">100</span>, <span class="number">300</span>)</span><br><span class="line">    singleLinkList.travel()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---------删除节点--------&#x27;</span>)</span><br><span class="line">    singleLinkList.remove(<span class="number">100</span>)</span><br><span class="line">    singleLinkList.travel()</span><br><span class="line">    singleLinkList.remove(<span class="number">200</span>)</span><br><span class="line">    singleLinkList.travel()</span><br><span class="line">    singleLinkList.remove(<span class="number">300</span>)</span><br><span class="line">    singleLinkList.travel()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1672734711874-73666a89-0651-4a54-b75b-3c03a504776a.png#averageHue=%231f2233&clientId=u7335ad49-6157-4&from=paste&height=497&id=u399319da&originHeight=746&originWidth=702&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40144&status=done&style=none&taskId=u109c9ea8-d582-4a65-9512-fbdb96577fb&title=&width=468" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.创建与显示窗口</title>
      <link href="/2023/08/21/18-%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%98%BE%E7%A4%BA%E7%AA%97%E5%8F%A3/"/>
      <url>/2023/08/21/18-%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%98%BE%E7%A4%BA%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h1><p>cv2.namedWindow(name,cv2.模式）</p><ul><li>name：自定义名称</li><li>cv2.模式：<br>- cv2.WINDOW_NORMAL：普通窗口<br>- cv2.WINDOW_AUTOSIZE:自动调节大小窗口</li></ul><h1 id="调整窗口大小"><a href="#调整窗口大小" class="headerlink" title="调整窗口大小"></a>调整窗口大小</h1><p>cv2.resizeWindow(name,weight,high)</p><ul><li>name:名称</li><li>weight:窗口的宽度，如800</li><li>high:窗口的长度，如600</li></ul><p><strong>注意调整窗口大小是cv2.resizeWindow，调整图片大小是cv2.resize，两个不要弄混了</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cv2.namedWindow(<span class="string">&quot;window&quot;</span>,cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&quot;window&quot;</span>,(<span class="number">640</span>,<span class="number">280</span>))</span><br><span class="line">image = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;window&quot;</span>,image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="窗口显示"><a href="#窗口显示" class="headerlink" title="窗口显示"></a>窗口显示</h1><p>cv2.imshow(name,mat)</p><ul><li>name:展示的名称</li><li>mat:展示的对象，什么都没有就是0</li></ul><h1 id="等待按键"><a href="#等待按键" class="headerlink" title="等待按键"></a>等待按键</h1><p>cv2.waitKey(num)</p><ul><li>waitKey会返回按键的ascii的值</li></ul><p>ascii的值可以通过ord来获取：print(ord(“q”))</p><ul><li>0表示接收任意按键，如果给其他的整数，表示等待按键的时间，单位是毫秒<ul><li>key &#x3D; cv2.waitKey(0)</li><li>if key &#x3D;&#x3D; ord(“q”)</li></ul></li></ul><h1 id="销毁窗口"><a href="#销毁窗口" class="headerlink" title="销毁窗口"></a>销毁窗口</h1><p>cv2.destroyAllWindows()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># cv2.namedWindow(&quot;window&quot;,cv2.WINDOW_NORMAL)</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">800</span>,<span class="number">600</span>))</span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,image)</span><br><span class="line">key = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> key == <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>):</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.Opencv位操作</title>
      <link href="/2023/08/21/30-Opencv%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/08/21/30-Opencv%E4%BD%8D%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="非操作"><a href="#非操作" class="headerlink" title="非操作"></a>非操作</h1><p>cv2.bitwise_not(image)</p><ul><li>对单一图片进行操作</li><li>相当于255减去当前的像素值</li><li>用np.hstack进行对比<ul><li>cv2.imshow(“window”,np.hstack((image.new_image)))</li></ul></li></ul><h1 id="与操作"><a href="#与操作" class="headerlink" title="与操作"></a>与操作</h1><p>cv2.bitwise_and(image1,image2)</p><ul><li>对两张图片进行操作</li><li>两个图片的大小保持一致</li><li>对应数字转化为2进制 与运算之后 再转化为整数，两个都是1才是1</li><li>越与越小，所以图像会变黑</li></ul><h1 id="或操作"><a href="#或操作" class="headerlink" title="或操作"></a>或操作</h1><p>cv2.bitwise_or(image1,image2)</p><ul><li>与 与操作相似，只不过计算的方式不同 两个只要有一个是1就是1</li><li>越或越大，图像整体会变白</li></ul><h1 id="异或操作"><a href="#异或操作" class="headerlink" title="异或操作"></a>异或操作</h1><p>cv2.bitwise_xor(image1,image2)</p><ul><li>与或操作相似</li><li>操作符为^<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：Opencv位操作.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/12 20:54 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">test = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 图片分割</span></span><br><span class="line">test = test[<span class="number">400</span>:<span class="number">1000</span>,<span class="number">500</span>:<span class="number">1200</span>]  <span class="comment"># 这里写死了，实际可以定义一个函数去判断，然后去修改值</span></span><br><span class="line">image = image[<span class="number">400</span>:<span class="number">1000</span>,<span class="number">500</span>:<span class="number">1200</span>]  <span class="comment"># 这里写死了，实际可以定义一个函数去判断，然后去修改值</span></span><br><span class="line"><span class="comment"># 非操作</span></span><br><span class="line">not_image = cv2.bitwise_not(image)</span><br><span class="line">cv2.imshow(<span class="string">&quot;not_image&quot;</span>,np.hstack((image,not_image)))</span><br><span class="line"><span class="comment"># 与操作</span></span><br><span class="line">and_image = cv2.bitwise_and(test,image)</span><br><span class="line"><span class="comment"># cv2.imshow(&quot;and_image&quot;,and_image)</span></span><br><span class="line"><span class="comment"># 或操作</span></span><br><span class="line">or_image = cv2.bitwise_or(test,image)</span><br><span class="line"><span class="comment"># cv2.imshow(&quot;or_image&quot;,or_image)</span></span><br><span class="line"><span class="comment"># 异或操作</span></span><br><span class="line">xor_image = cv2.bitwise_xor(test,image)</span><br><span class="line"><span class="comment"># cv2.imshow(&quot;xor_image&quot;,xor_image)</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673528359291-cf80934b-07e2-4e9f-af89-b588105400fd.png#averageHue=%23879591&clientId=u915361c1-19ce-4&from=paste&height=632&id=u368b6205&originHeight=948&originWidth=2103&originalType=binary&ratio=1&rotation=0&showTitle=false&size=619487&status=done&style=none&taskId=u57c9e386-c5f3-485f-878d-b3224a4e73b&title=&width=1402" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673528463259-726c9b31-2ea0-45b4-8eab-d0290886b3f6.png#averageHue=%23618672&clientId=u915361c1-19ce-4&from=paste&height=632&id=u8413f830&originHeight=948&originWidth=1053&originalType=binary&ratio=1&rotation=0&showTitle=false&size=685530&status=done&style=none&taskId=u55579cfa-61a9-45ad-9926-4b346c39f21&title=&width=702" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673528532653-d8556149-2121-43ef-95e7-e5337b531e61.png#averageHue=%23e1de7e&clientId=u915361c1-19ce-4&from=paste&height=632&id=uc2edbcae&originHeight=948&originWidth=1053&originalType=binary&ratio=1&rotation=0&showTitle=false&size=691140&status=done&style=none&taskId=uadef4299-445a-471e-8c77-a1201777333&title=&width=702" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673528599380-9a5ccc70-17cc-4f76-bf2c-0acf3afac84b.png#averageHue=%2362d134&clientId=u915361c1-19ce-4&from=paste&height=632&id=u52862ad1&originHeight=948&originWidth=1053&originalType=binary&ratio=1&rotation=0&showTitle=false&size=870218&status=done&style=none&taskId=u5a117399-41f0-4751-b4fd-3eb50f8d37d&title=&width=702" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26.拉普拉斯算子</title>
      <link href="/2023/08/21/43-%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E7%AE%97%E5%AD%90/"/>
      <url>/2023/08/21/43-%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E7%AE%97%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>cv2.Laplacian()<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673617564101-422ee493-b75b-4873-94b6-ce5ba042d9c0.png#averageHue=%23f2f4f3&clientId=u92cff90d-7c6c-4&from=paste&height=75&id=u55d8350a&originHeight=112&originWidth=680&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45289&status=done&style=none&taskId=u9274e77b-c2d8-4e24-812f-bf4bcf9b64a&title=&width=453.3333333333333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673617584953-e861d4d4-d6af-4723-9a0a-8138985fffaa.png#averageHue=%23f6f8f7&clientId=u92cff90d-7c6c-4&from=paste&height=430&id=u8f7689ac&originHeight=645&originWidth=970&originalType=binary&ratio=1&rotation=0&showTitle=false&size=225230&status=done&style=none&taskId=u59f3ca8d-1bd2-4c6a-b1af-88c096d8c14&title=&width=646.6666666666666" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Opencv学习 </span></span><br><span class="line"><span class="string">@File    ：拉普拉斯算子.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/1/13 21:44 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = cv2.imread(<span class="string">&quot;Handsome.jpg&quot;</span>)</span><br><span class="line">image = cv2.resize(image,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"><span class="comment"># 拉普拉斯算子</span></span><br><span class="line">lap_image = cv2.Laplacian(image,-<span class="number">1</span>,ksize = <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;lap_image &quot;</span>,np.hstack((image,lap_image )))</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1673617924195-9897f1b4-fb09-40df-8ecb-0b5e3091b033.png#averageHue=%236d6857&clientId=u1f482f81-04be-4&from=paste&height=512&id=ud7a405d8&originHeight=768&originWidth=1923&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1697227&status=done&style=none&taskId=u1a89bf77-0d59-42a8-94c8-d5a280acd99&title=&width=1282" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孤注一掷——基于文心Ernie-3.0大模型的影评情感分析</title>
      <link href="/2023/08/20/%E5%AD%A4%E6%B3%A8%E4%B8%80%E6%8E%B7%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%E6%96%87%E5%BF%83Ernie-3-0%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BD%B1%E8%AF%84%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"/>
      <url>/2023/08/20/%E5%AD%A4%E6%B3%A8%E4%B8%80%E6%8E%B7%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%E6%96%87%E5%BF%83Ernie-3-0%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BD%B1%E8%AF%84%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="孤注一掷——基于文心Ernie-3-0大模型的影评情感分析"><a href="#孤注一掷——基于文心Ernie-3-0大模型的影评情感分析" class="headerlink" title="孤注一掷——基于文心Ernie-3.0大模型的影评情感分析"></a>孤注一掷——基于文心Ernie-3.0大模型的影评情感分析</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前些天看了<font size=4 color=green><strong>《孤注一掷》</strong></font>，感觉是一个很不错的电影，<strong>狠狠劝赌！</strong></p><ul><li><p>人有两颗心，一颗贪心，一颗不甘心，诱惑的背后只有陷阱，恐惧的尽头只剩绝望。</p></li><li><p>希望大家提高防诈骗意识，<strong>别信，别贪，别冲动！</strong><br><img src="https://ai-studio-static-online.cdn.bcebos.com/e3986421f0364fc0b47fa0c5b95f24a9aa5d01b9a77d4f998755d6e60410e932"></p></li><li><p>这个项目使用文言一心大模型，对爬取的电影评论数据进行小样本的预训练学习。</p></li><li><p>使用<strong>Ernie-3.0-medium-zh</strong>大模型（感谢三岁大佬），为百亿参数知识增强的大模型，能够快速解决中文数据学习困难，准确率低的问题。</p></li><li><p>项目环境：<code>PaddlePaddle2.4.0</code>，<code>PaddleNLP2.4.2</code></p></li></ul><h2 id="一、数据直观可视化"><a href="#一、数据直观可视化" class="headerlink" title="一、数据直观可视化"></a>一、数据直观可视化</h2><p>电影《孤注一掷》豆瓣短评数据信息如下（感谢马哥<code>公众号老男孩的平凡之路</code>）</p><ul><li>共30页，600条数据</li><li>含6个字段：页码,评论者昵称,评论星级（1-5星）,评论时间,评论者IP属地,评论内容</li><li>豆瓣短评页面上最多显示30页，再往后翻页就会显示“加载中”，获取不到后面的数据，所以只有30页</li><li>对数据进行简单的处理，由于涉及到情感分类，将评星低于三星的认为差评，等于三星的认为中立，高于三星的认为好评</li></ul><h3 id="1-1-各评价所占人数"><a href="#1-1-各评价所占人数" class="headerlink" title="1.1 各评价所占人数"></a>1.1 各评价所占人数</h3><p>由于存在一定误差（比如三星的评论可能是好评也可能是差评，低于三星的评论也可能是好评，还有一些没有价值的评论），故用误差棒使结果更加严谨，从数据中统计可得：</p><ul><li><code>好评</code>：218人</li><li><code>中立</code>：159人</li><li><code>差评</code>：223人<br><img src="https://ai-studio-static-online.cdn.bcebos.com/f3094d266cac4b96839167444a84d038aa429243a11a4b4887c24c9750a00d86"></li></ul><p>可以看出三个评价的人数<code>基本相近</code></p><h3 id="1-2-词云可视化"><a href="#1-2-词云可视化" class="headerlink" title="1.2 词云可视化"></a>1.2 词云可视化</h3><ul><li><p>词云可视化可以帮助用户快速识别影评中的关键词和热门话题。通过将频率较高的词语放大显示，用户可以一目了然地了解影评的主题和重点。</p></li><li><p>我将背景设置成一个骷髅，不知道大家能不能看出来<br><img src="https://ai-studio-static-online.cdn.bcebos.com/2d9ee553231848e3982bbf4a0380626b98331e631c1c4d8bb1162068257a4eea"></p></li><li><p>由于aistudio里面词云字体会出现打不开的情况，所有我是在本地跑的，现在将代码贴在这里，感兴趣的小伙伴可以copy下来在自己的本地环境里面跑一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud  <span class="comment"># 词云库</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 数学绘图库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br><span class="line"></span><br><span class="line">mask = np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;img_7.png&quot;</span>))</span><br><span class="line">wc1 = WordCloud(</span><br><span class="line">    background_color=<span class="string">&quot;white&quot;</span>,  <span class="comment"># 背景为白色</span></span><br><span class="line">    font_path=<span class="string">&#x27;C:/Windows/Fonts/msyh.ttc&#x27;</span>,  <span class="comment"># 使用的字体库:当前字体支持中文</span></span><br><span class="line">    max_words=<span class="number">2000</span>,  <span class="comment"># 最大显示的关键词数量</span></span><br><span class="line">    width=<span class="number">1000</span>,  <span class="comment"># 生成词云的宽</span></span><br><span class="line">    height=<span class="number">860</span>,  <span class="comment"># 生成词云的高</span></span><br><span class="line">    collocations=<span class="literal">False</span>,  <span class="comment"># 解决关键词重复：是否包括两个词的搭配</span></span><br><span class="line">    mask=mask</span><br><span class="line">    <span class="comment"># stopwords=STOPWORDS, #屏蔽的内容</span></span><br><span class="line">)</span><br><span class="line">wc2 = wc1.generate(text)</span><br><span class="line"></span><br><span class="line">plt.imshow(wc2)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.savefig(<span class="string">&#x27;词云.jpg&#x27;</span>, dpi=<span class="number">2600</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**&lt;font size=<span class="number">6</span> color=green&gt;接下来正式开始大模型之旅！**</span><br><span class="line"></span><br><span class="line"><span class="comment">## 二、更新PaddleNLP</span></span><br><span class="line">`clear_output`主要是为了清除输出信息，对更新没有影响，为了最后项目的美观，所以在最后加上了一句 `clear_output`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="comment"># 清除输出，使项目更清晰</span></span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> clear_output</span><br><span class="line">!pip install paddlenlp==<span class="number">2.4</span><span class="number">.2</span> -i https://pypi.org/simple</span><br><span class="line"><span class="comment"># 清除输出</span></span><br><span class="line">clear_output()</span><br></pre></td></tr></table></figure></li></ul><p>查看版本号是否正确</p><ul><li><code>paddlepaddle</code>的版本为<code>2.4.0</code>，<code>paddlenlp</code>的版本为<code>2.4.2</code></li><li>如果版本不匹配的话可能后面会出现cannot import name <code>&#39;AutoModelForSequenceclassification&#39; from paddlenlp.transfomers</code>的错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line"><span class="keyword">import</span> paddlenlp</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;paddle版本&quot;</span>,paddle.__version__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;paddlenlp版本&quot;</span>,paddlenlp.__version__)</span><br></pre></td></tr></table></figure><pre><code>paddle版本 2.4.0paddlenlp版本 2.4.2</code></pre><h2 id="二、数据处理"><a href="#二、数据处理" class="headerlink" title="二、数据处理"></a>二、数据处理</h2><ul><li>利用&#96;正则表达式清理数据</li><li>利用<code>paddlenlp.datasets</code>中的 <code>DatasetBuilder</code>函数对数据进行处理</li><li>数据变成了[{‘text_a’: ‘data’, ‘label’: label},……] 的格式</li></ul><h3 id="2-1-清洗数据"><a href="#2-1-清洗数据" class="headerlink" title="2.1 清洗数据"></a>2.1 清洗数据</h3><ul><li>使用<code>正则表达式</code>去除音频中的中文标点符号，并和标签一起写入txt文件中</li><li>用到的正则表达式为<code> re.sub(r&#39;[^\u4e00-\u9fa5a-zA-Z0-9\s]+&#39;, &#39; &#39;, content)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 读取CSV文件</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 遍历每一行，将内容存入txt文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">        content = row[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">        content =  re.sub(<span class="string">r&#x27;[^\u4e00-\u9fa5a-zA-Z0-9\s]+&#x27;</span>, <span class="string">&#x27; &#x27;</span>, content)</span><br><span class="line">        label = row[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">        file.write(<span class="string">f&quot;<span class="subst">&#123;label&#125;</span>\t<span class="subst">&#123;content&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>清洗完的数据如下：</li></ul><p><img src="https://ai-studio-static-online.cdn.bcebos.com/4baf88211b974dbb86dc4bc5fc10d8503606abaf10ef4ec490d3ce2b36ead0c5"></p><h3 id="2-2-划分数据集"><a href="#2-2-划分数据集" class="headerlink" title="2.2 划分数据集"></a>2.2 划分数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取output.txt文件中的内容</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机打乱数据</span></span><br><span class="line">random.shuffle(lines)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算切分的索引</span></span><br><span class="line">total_lines = <span class="built_in">len</span>(lines)</span><br><span class="line">train_end = <span class="built_in">int</span>(total_lines * <span class="number">0.7</span>)</span><br><span class="line">validation_end = <span class="built_in">int</span>(total_lines * <span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分数据</span></span><br><span class="line">train_data = lines[:train_end]</span><br><span class="line">validation_data = lines[train_end:validation_end]</span><br><span class="line">test_data = lines[validation_end:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据写入train.txt</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;train.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.writelines(train_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据写入validation.txt</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;validation.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.writelines(validation_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据写入test.txt</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.writelines(test_data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3-加载数据"><a href="#2-3-加载数据" class="headerlink" title="2.3 加载数据"></a>2.3 加载数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入DatasetBuilder</span></span><br><span class="line"><span class="keyword">from</span> paddlenlp.datasets <span class="keyword">import</span> DatasetBuilder</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewsData</span>(<span class="title class_ inherited__">DatasetBuilder</span>):</span><br><span class="line">    SPLITS = &#123;</span><br><span class="line">        <span class="string">&#x27;train&#x27;</span>: <span class="string">&#x27;/home/aistudio/train.txt&#x27;</span>,  <span class="comment"># 训练集</span></span><br><span class="line">        <span class="string">&#x27;dev&#x27;</span>: <span class="string">&#x27;/home/aistudio/validation.txt&#x27;</span>,      <span class="comment"># 验证集</span></span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>: <span class="string">&#x27;/home/aistudio/test.txt&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_data</span>(<span class="params">self, mode, **kwargs</span>):</span><br><span class="line">        filename = self.SPLITS[mode]</span><br><span class="line">        <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_read</span>(<span class="params">self, filename</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;读取数据&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                <span class="keyword">if</span> line == <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                data = line.strip().split(<span class="string">&quot;\t&quot;</span>)    <span class="comment"># 以&#x27;\t&#x27;分隔各列</span></span><br><span class="line">                label, text_a = data</span><br><span class="line">                text_a = text_a.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> label <span class="keyword">in</span> [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]:</span><br><span class="line">                    <span class="keyword">yield</span> &#123;<span class="string">&quot;text_a&quot;</span>: text_a, <span class="string">&quot;label&quot;</span>: label&#125;  <span class="comment"># 此次设置数据的格式为：text_a,label，可以根据具体情况进行修改</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_labels</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> label_list   <span class="comment"># 类别标签</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义数据集加载函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_dataset</span>(<span class="params">name=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 data_files=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 splits=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 lazy=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 **kwargs</span>):</span><br><span class="line">   </span><br><span class="line">    reader_cls = NewsData  <span class="comment"># 加载定义的数据集格式</span></span><br><span class="line">    <span class="built_in">print</span>(reader_cls)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">        reader_instance = reader_cls(lazy=lazy, **kwargs)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        reader_instance = reader_cls(lazy=lazy, name=name, **kwargs)</span><br><span class="line">    datasets = reader_instance.read_datasets(data_files=data_files, splits=splits)</span><br><span class="line">    <span class="keyword">return</span> datasets</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载训练和验证集</span></span><br><span class="line">label_list = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]</span><br><span class="line">train_ds, dev_ds, text_t = load_dataset(splits=[<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;test&#x27;</span>])</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;__main__.NewsData&#39;&gt;</code></pre><h3 id="2-4-展示数据"><a href="#2-4-展示数据" class="headerlink" title="2.4 展示数据"></a>2.4 展示数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_ds[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>[&#123;&#39;text_a&#39;: &#39;人有两颗心一颗是贪心一颗是不甘心&#39;, &#39;label&#39;: 0&#125;, &#123;&#39;text_a&#39;: &#39;一边张灯结彩一边天人永别太讽刺了&#39;, &#39;label&#39;: 0&#125;, &#123;&#39;text_a&#39;: &#39;C从我自己的观影感受里就可以感知到观众对于真正的中国犯罪电影有多么的渴望犯罪链条上每一个奇观展现都让我觉得抓眼带感这不是所谓的短视频猎奇而是我们真的想要看国内电影里存在这样的东西一些陆家嘴之狼CBD风云最大的问题当然是没有人物也没有主题为正的导向更是让它不可能具有任何的人性深度但值得肯定的是申奥还是一定程度上把人对金钱的狂热拍了出来&#39;,  &#39;label&#39;: 0&#125;, &#123;&#39;text_a&#39;: &#39;暑期档继续发疯紧张刺激&#39;, &#39;label&#39;: 0&#125;, &#123;&#39;text_a&#39;: &#39;请不要在反诈宣传片里插播偶像剧&#39;, &#39;label&#39;: 1&#125;]</code></pre><h2 id="三、RNIE-3-0文心大模型"><a href="#三、RNIE-3-0文心大模型" class="headerlink" title="三、RNIE 3.0文心大模型"></a>三、RNIE 3.0文心大模型</h2><p><a href="https://arxiv.org/abs/2112.12731">ERNIE 3.0 Titan: Exploring Larger-scale Knowledge Enhanced Pre-training for Language Understanding and Generation</a> 论文摘要：<code>经过预训练的语言模型在各种自然语言处理（NLP）任务中取得了最先进的结果。GPT-3已经表明，扩大预先训练的语言模型可以进一步开发它们的巨大潜力。最近提出了一个名为ERNIE3.0的统一框架，用于预训练大规模知识增强模型，并训练了一个具有100亿个参数的模型。ERNIE3.0在各种NLP任务上的表现优于最先进的模型。为了探索扩大ERNIE3.0的性能，我们在飞桨平台上训练了一个名为ERNIE3.0Titan的数百亿参数模型，其参数高达2600亿。此外，我们设计了一个自监督的对抗性损失和一个可控的语言建模损失，使ERNIE3.0 Titan生成可信和可控的文本。为了减少计算开销和碳排放，我们为ERNIE3.0 Titan提出了一个在线蒸馏框架，教师模型将同时教授学生和训练自己。ERNIE3.0泰坦是迄今为止中国最大的密集预训练模型。经验结果表明，ERNIE3.0 Titan在68个NLP数据集上的性能优于最先进的模型。</code><br><img src="https://ai-studio-static-online.cdn.bcebos.com/71e361e00b7f41a99710abe7537f54ccd77f9c56ebf34c36bb98499173465378"><br><code>两种生成机制的示意图（左）和预训练的数据策略（右）。绿色、橙色和蓝色的方块表示源文本、目标文本和人造符号。</code><br><img src="https://ai-studio-static-online.cdn.bcebos.com/64da5eca8ed34b8ea38c04be2c0527211799a24565364f6a87c1ef66717958ba"></p><p><code>消融研究结果</code></p><h3 id="3-1-导入模型"><a href="#3-1-导入模型" class="headerlink" title="3.1 导入模型"></a>3.1 导入模型</h3><p>详细教程可以参考<a href="https://paddlenlp.readthedocs.io/zh/latest/model_zoo/index.html">PaddleNLP Transformer预训练模型</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line"><span class="keyword">import</span> paddlenlp</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp.transformers <span class="keyword">import</span> AutoModelForSequenceClassification, AutoTokenizer</span><br><span class="line">model_name = <span class="string">&quot;ernie-3.0-medium-zh&quot;</span></span><br><span class="line">model = AutoModelForSequenceClassification.from_pretrained(model_name, num_classes=<span class="number">2</span>)</span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_name)</span><br></pre></td></tr></table></figure><pre><code>[2023-08-20 17:09:48,154] [    INFO] - We are using &lt;class &#39;paddlenlp.transformers.ernie.modeling.ErnieForSequenceClassification&#39;&gt; to load &#39;ernie-3.0-medium-zh&#39;.[2023-08-20 17:09:48,159] [    INFO] - Downloading https://bj.bcebos.com/paddlenlp/models/transformers/ernie_3.0/ernie_3.0_medium_zh.pdparams and saved to /home/aistudio/.paddlenlp/models/ernie-3.0-medium-zh[2023-08-20 17:09:48,162] [    INFO] - Downloading ernie_3.0_medium_zh.pdparams from https://bj.bcebos.com/paddlenlp/models/transformers/ernie_3.0/ernie_3.0_medium_zh.pdparams100%|██████████| 313M/313M [00:09&lt;00:00, 32.9MB/s] W0820 17:09:58.220381   204 gpu_resources.cc:61] Please NOTE: device: 0, GPU Compute Capability: 7.0, Driver API Version: 11.2, Runtime API Version: 11.2W0820 17:09:58.224973   204 gpu_resources.cc:91] device: 0, cuDNN Version: 8.2.[2023-08-20 17:10:01,278] [    INFO] - We are using &lt;class &#39;paddlenlp.transformers.ernie.tokenizer.ErnieTokenizer&#39;&gt; to load &#39;ernie-3.0-medium-zh&#39;.[2023-08-20 17:10:01,282] [    INFO] - Downloading https://bj.bcebos.com/paddlenlp/models/transformers/ernie_3.0/ernie_3.0_medium_zh_vocab.txt and saved to /home/aistudio/.paddlenlp/models/ernie-3.0-medium-zh[2023-08-20 17:10:01,285] [    INFO] - Downloading ernie_3.0_medium_zh_vocab.txt from https://bj.bcebos.com/paddlenlp/models/transformers/ernie_3.0/ernie_3.0_medium_zh_vocab.txt100%|██████████| 182k/182k [00:00&lt;00:00, 9.63MB/s][2023-08-20 17:10:01,391] [    INFO] - tokenizer config file saved in /home/aistudio/.paddlenlp/models/ernie-3.0-medium-zh/tokenizer_config.json[2023-08-20 17:10:01,394] [    INFO] - Special tokens file saved in /home/aistudio/.paddlenlp/models/ernie-3.0-medium-zh/special_tokens_map.json</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> paddlenlp.data <span class="keyword">import</span> Stack, <span class="type">Tuple</span>, Pad</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span>  convert_example, create_dataloader</span><br><span class="line"><span class="comment"># 模型运行批处理大小</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">max_seq_length = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">trans_func = partial(</span><br><span class="line">    convert_example,</span><br><span class="line">    tokenizer=tokenizer,</span><br><span class="line">    max_seq_length=max_seq_length)</span><br><span class="line">batchify_fn = <span class="keyword">lambda</span> samples, fn=<span class="type">Tuple</span>(</span><br><span class="line">    Pad(axis=<span class="number">0</span>, pad_val=tokenizer.pad_token_id),  <span class="comment"># input</span></span><br><span class="line">    Pad(axis=<span class="number">0</span>, pad_val=tokenizer.pad_token_type_id),  <span class="comment"># segment</span></span><br><span class="line">    Stack(dtype=<span class="string">&quot;int64&quot;</span>)  <span class="comment"># label</span></span><br><span class="line">): [data <span class="keyword">for</span> data <span class="keyword">in</span> fn(samples)]</span><br><span class="line">train_data_loader = create_dataloader(</span><br><span class="line">    train_ds,</span><br><span class="line">    mode=<span class="string">&#x27;train&#x27;</span>,</span><br><span class="line">    batch_size=batch_size,</span><br><span class="line">    batchify_fn=batchify_fn,</span><br><span class="line">    trans_fn=trans_func)</span><br><span class="line">dev_data_loader = create_dataloader(</span><br><span class="line">    dev_ds,</span><br><span class="line">    mode=<span class="string">&#x27;dev&#x27;</span>,</span><br><span class="line">    batch_size=batch_size,</span><br><span class="line">    batchify_fn=batchify_fn,</span><br><span class="line">    trans_fn=trans_func)</span><br></pre></td></tr></table></figure><h3 id="3-2-模型训练"><a href="#3-2-模型训练" class="headerlink" title="3.2 模型训练"></a>3.2 模型训练</h3><p>数据量太少了，很容易过拟合，这里的的</p><ul><li>epoch设置成20</li><li>weight_decay 设置成0.1</li><li>learning_rate 设置成 5e-6 </li><li>大概两分钟即可训练完成</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paddlenlp <span class="keyword">as</span> ppnlp</span><br><span class="line"><span class="keyword">import</span> paddle</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp.transformers <span class="keyword">import</span> LinearDecayWithWarmup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练过程中的最大学习率</span></span><br><span class="line">learning_rate = <span class="number">5e-6</span> </span><br><span class="line"><span class="comment"># 训练轮次</span></span><br><span class="line">epochs = <span class="number">20</span> <span class="comment">#3</span></span><br><span class="line"><span class="comment"># 学习率预热比例</span></span><br><span class="line">warmup_proportion = <span class="number">0.3</span></span><br><span class="line"><span class="comment"># 权重衰减系数，类似模型正则项策略，避免模型过拟合</span></span><br><span class="line">weight_decay = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">num_training_steps = <span class="built_in">len</span>(train_data_loader) * epochs</span><br><span class="line">lr_scheduler = LinearDecayWithWarmup(learning_rate, num_training_steps, warmup_proportion)</span><br><span class="line">optimizer = paddle.optimizer.AdamW(</span><br><span class="line">    learning_rate=lr_scheduler,</span><br><span class="line">    parameters=model.parameters(),</span><br><span class="line">    weight_decay=weight_decay,</span><br><span class="line">    apply_decay_param_fun=<span class="keyword">lambda</span> x: x <span class="keyword">in</span> [</span><br><span class="line">        p.name <span class="keyword">for</span> n, p <span class="keyword">in</span> model.named_parameters()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(nd <span class="keyword">in</span> n <span class="keyword">for</span> nd <span class="keyword">in</span> [<span class="string">&quot;bias&quot;</span>, <span class="string">&quot;norm&quot;</span>])</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">criterion = paddle.nn.loss.CrossEntropyLoss()</span><br><span class="line">metric = paddle.metric.Accuracy()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paddle.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> evaluate</span><br><span class="line">all_train_loss=[]</span><br><span class="line">all_train_accs = []</span><br><span class="line">Batch=<span class="number">0</span></span><br><span class="line">Batchs=[]</span><br><span class="line">global_step = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, epochs + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> step, batch <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_data_loader, start=<span class="number">1</span>):</span><br><span class="line">        input_ids, segment_ids, labels = batch</span><br><span class="line">        logits = model(input_ids, segment_ids)</span><br><span class="line">        loss = criterion(logits, labels)</span><br><span class="line">        probs = F.softmax(logits, axis=<span class="number">1</span>)</span><br><span class="line">        correct = metric.compute(probs, labels)</span><br><span class="line">        metric.update(correct)</span><br><span class="line">        acc = metric.accumulate()</span><br><span class="line">        global_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> global_step % <span class="number">10</span> == <span class="number">0</span> :</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;global step %d, epoch: %d, batch: %d, loss: %.5f, acc: %.5f&quot;</span> % (global_step, epoch, step, loss, acc))</span><br><span class="line">            Batch += <span class="number">10</span> </span><br><span class="line">            Batchs.append(Batch)</span><br><span class="line">            all_train_loss.append(loss)</span><br><span class="line">            all_train_accs.append(acc)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        lr_scheduler.step()</span><br><span class="line">        optimizer.clear_grad()</span><br><span class="line">    evaluate(model, criterion, metric, dev_data_loader)</span><br><span class="line"></span><br><span class="line">model.save_pretrained(<span class="string">&#x27;/home/aistudio/checkpoint&#x27;</span>)</span><br><span class="line">tokenizer.save_pretrained(<span class="string">&#x27;/home/aistudio/checkpoint&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>eval loss: 0.75054, accu: 0.43902global step 10, epoch: 2, batch: 2, loss: 0.66468, acc: 0.59375eval loss: 0.75193, accu: 0.43902global step 20, epoch: 3, batch: 4, loss: 0.57682, acc: 0.64062eval loss: 0.75422, accu: 0.43902global step 30, epoch: 4, batch: 6, loss: 0.64896, acc: 0.56771eval loss: 0.74524, accu: 0.43902global step 40, epoch: 5, batch: 8, loss: 0.62321, acc: 0.62205eval loss: 0.75564, accu: 0.43902eval loss: 0.77395, accu: 0.43902global step 50, epoch: 7, batch: 2, loss: 0.56548, acc: 0.65625eval loss: 0.73238, accu: 0.43902global step 60, epoch: 8, batch: 4, loss: 0.57789, acc: 0.67969eval loss: 0.74135, accu: 0.46341global step 70, epoch: 9, batch: 6, loss: 0.57494, acc: 0.70312eval loss: 0.71202, accu: 0.51220global step 80, epoch: 10, batch: 8, loss: 0.43934, acc: 0.76378eval loss: 0.72221, accu: 0.53659eval loss: 0.71013, accu: 0.57317global step 90, epoch: 12, batch: 2, loss: 0.44184, acc: 0.87500eval loss: 0.72470, accu: 0.57317global step 100, epoch: 13, batch: 4, loss: 0.34039, acc: 0.90625eval loss: 0.71655, accu: 0.63415global step 110, epoch: 14, batch: 6, loss: 0.21924, acc: 0.93229eval loss: 0.78495, accu: 0.62195global step 120, epoch: 15, batch: 8, loss: 0.21976, acc: 0.95669eval loss: 0.78816, accu: 0.64634eval loss: 0.88699, accu: 0.59756global step 130, epoch: 17, batch: 2, loss: 0.13201, acc: 0.95312eval loss: 0.83912, accu: 0.64634global step 140, epoch: 18, batch: 4, loss: 0.13333, acc: 0.97656eval loss: 0.79599, accu: 0.65854global step 150, epoch: 19, batch: 6, loss: 0.11692, acc: 0.98958eval loss: 0.89906, accu: 0.63415global step 160, epoch: 20, batch: 8, loss: 0.11152, acc: 0.96457eval loss: 0.91676, accu: 0.63415[2023-08-20 17:10:31,859] [    INFO] - tokenizer config file saved in /home/aistudio/checkpoint/tokenizer_config.json[2023-08-20 17:10:31,863] [    INFO] - Special tokens file saved in /home/aistudio/checkpoint/special_tokens_map.json(&#39;/home/aistudio/checkpoint/tokenizer_config.json&#39;, &#39;/home/aistudio/checkpoint/special_tokens_map.json&#39;, &#39;/home/aistudio/checkpoint/added_tokens.json&#39;)</code></pre><h3 id="3-3-可视化训练曲线"><a href="#3-3-可视化训练曲线" class="headerlink" title="3.3 可视化训练曲线"></a>3.3 可视化训练曲线</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_train_acc</span>(<span class="params">Batchs, train_accs,train_loss</span>):</span><br><span class="line">    title=<span class="string">&quot;training accs&quot;</span></span><br><span class="line">    plt.title(title, fontsize=<span class="number">24</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;batch&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;acc&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">    plt.plot(Batchs, train_accs, color=<span class="string">&#x27;green&#x27;</span>, label=<span class="string">&#x27;training accs&#x27;</span>)</span><br><span class="line">    plt.plot(Batchs, train_loss, color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;training loss&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.grid()</span><br><span class="line">    plt.show()</span><br><span class="line">draw_train_acc(Batchs,all_train_accs,all_train_loss)</span><br></pre></td></tr></table></figure><p><img src="/output_34_0.png" alt="png"></p><h3 id="3-5-模型预测"><a href="#3-5-模型预测" class="headerlink" title="3.5 模型预测"></a>3.5 模型预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载模型参数</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line">params_path = <span class="string">&#x27;checkpoint/model_state.pdparams&#x27;</span></span><br><span class="line"><span class="keyword">if</span> params_path <span class="keyword">and</span> os.path.isfile(params_path):</span><br><span class="line">    state_dict = paddle.load(params_path)</span><br><span class="line">    model.set_dict(state_dict)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Successful Loaded down!&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Successful Loaded down!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> predict</span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">data = text_t</span><br><span class="line">label_map = &#123;<span class="number">0</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line">results = predict(</span><br><span class="line">    model, data, tokenizer, label_map, batch_size=batch_size)</span><br><span class="line"><span class="keyword">for</span> idx, text <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Data: &#123;&#125; \t Lable: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(text, results[idx]))</span><br></pre></td></tr></table></figure><pre><code>Data: &#123;&#39;text_a&#39;: &#39;阿才太帅了纯爱战神啊阿天那条线是最令人唏嘘的阿天母亲的演的太好了这边哭天抢地下一个镜头就是放鞭炮庆祝的转场戏剧性拉满&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;这种宣传片为啥不在电视或网络上免费普及给广大群众呢还让人民群众花银子受俩小时的教育把坏人往有血有肉有情有义里演成大活人把好人往假大空伟光正里演成稻草人真是的&#39;, &#39;label&#39;: 1&#125;  Lable: 1Data: &#123;&#39;text_a&#39;: &#39;这个故事告诉我们只要长的好看有才华就算被拐卖到境外也可以被编剧老师眷顾这部片跟奈飞的距离差了3个陈思诚反诈宣传片从预告片就开始在诈骗&#39;, &#39;label&#39;: 1&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;反诈宣传片但是现实绝对比电影更残酷&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;母亲从门框伸出的手拉不回被贪心拖向地狱的儿荷官从屏幕伸出的手推下了想要上岸却坠落的人这边是关在牢笼里绑在石头上的动物那边是晒出来也会发霉刺进去不会流血的黑心我以为吞得下秘密你以为赚得到真金用筷子夹了一张纸钞从抽屉拿走了一块玉镯我用它来孤注一掷却满盘皆输&#39;, &#39;label&#39;: 1&#125;  Lable: 1Data: &#123;&#39;text_a&#39;: &#39;很现实电信诈骗真的远远比我们想的恐怖就在前段时间我的朋友才刚刚被骗了几万块就渐渐被带进去了当突然意识到的时候已经晚了每个人物都很饱满很现实是因为结局并不是合家欢的这真的除不尽不仅要靠国家更要靠自己甄别并不是聪明就不会被骗全员演技在线算是这段时间让人眼前一亮的电影了&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;命题作文中表现较好的但现实里不会有坏人的仁慈&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;炸裂今年最牛最棒最赞最精彩国产片&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;开头很好后面就编得不行主次不分了不过7分没问题为了正常上映很多黄暴没有拍出来点到为止放在90年代的香港拍那就更好了&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;现实主义题材是目前国内适时应该出现的反诈电影本片用三分之一段落描述潘生和梁安娜被骗进诈骗团伙有用三分之一的段落完整揭示一个真实上当人生被毁的案例后三分之一是艰难反诈斗争的正能量宁浩在本片虽然之挂名监制但很明显给导演申奥的助力很多孤注一掷的节奏很好而且第二段真实诈骗段落的展开深入精彩有力而且孤在强调犯罪者的狡诈和阴险之外还保留了他们的人性让孤的结局更真实更有余味&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;潘生安娜阿天三条故事线都很有警示作用瓦里只会比电影中更残忍更癫狂推荐观看全民防诈少一点人间悲剧上一次看孙阳还是在过春天上一次看王传君还是无名所以阿才和陆经理又是怎么上的贼船呢很高兴这俩角色都没完全偏平化还有最后一个镜头脑袋发麻申奥导演可以的&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;看哭了咱就是说阿天的父母该有多么心痛啊&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;比较碎人物描摹和事件编排节奏都虎头蛇尾空有一个略显不伦不类的花架子几次视角的转换不如直接做成接力式的叙事结构暴力氛围也一般想想南车摩托车飞头的突然震撼最吃惊的是张艺兴这拉胯演技对标的竟是胡歌被抓前的一段妆造都是比着胡歌来的吧咏梅封后后的表演面瘫感更重了不能说演的不好就有种随它吧老娘想演就来一段不想演你也给我瞪着眼看着的感觉&#39;, &#39;label&#39;: 1&#125;  Lable: 1Data: &#123;&#39;text_a&#39;: &#39;几个人物挺出彩的前半段远好于后半段教育意义远大于艺术价值&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;更像网剧一些剧作可以再顺畅一些张艺兴这人设在片头的动机太牵强了在线教育老总那条线也直接断了倒是任务片里的私货在线教育和传销作比民众围殴警察有点意思7&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;在网络世界里看着形形色色的人可能一直被锤炼一直不服输的张艺兴就是申奥导演最想要抓住的人物特质张艺兴也做到了演绎潘生不仅是把绝地求生的人物体现出来也是把希望送给了每一位观影的观众&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;和现实最大的区别就是阿才不会心软&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;16最恶劣的那种电影之一简单粗暴非常剥削在大旗下一步一步一段一段逼人接受请君入瓮仿佛新秩序式的那种缺点在看似复杂的行动中对观众的操纵性过强不留一点空间&#39;, &#39;label&#39;: 1&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;说不上哪里好但又不觉得差给五星觉得高但不给五星又觉得对不起我观看时不由自主的种种反应里面所有以前我认为演戏突兀尴尬的几位在里面表演都出奇的流畅和合适一点不出戏节奏把控也很好还真挺震撼的但不是因为血腥是因为心底的恐惧代入到自己身上的绝望美中不足阿才长太帅了要是个又丑又邋遢猥琐的放了顶多觉得良心发现或者还有后招但是这个演员太帅了放了的场景让我衍生出了几秒恋爱脑降低了本片的警示意味和严肃性真是不应该啊不应该是说我见缝插针恋爱脑不应该&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;前面还是电影后面就成宣传片了主角从受害人变成了咏梅关键破案过程也不好看神兵天降加反派降智叙事混乱加节奏仓促我不知道那个馒头是怎么如此精准地投递给张艺兴的而他又怎么瞬间就明白了火柴盒的用途还有个让我不满但也许观众会觉得很爽的地方就是影片有很多暴力与性暗示镜头这些更多是商业噱头看不出对这些受害者有什么人文关怀&#39;, &#39;label&#39;: 1&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;呃我就说一句能不能别把反派里的男人塑造的情深似海了逃出缅北靠爱情就真的不要这样好烦啊&#39;, &#39;label&#39;: 1&#125;  Lable: 1Data: &#123;&#39;text_a&#39;: &#39;放走金晨那段纯属强行给反派降智&#39;, &#39;label&#39;: 1&#125;  Lable: 1Data: &#123;&#39;text_a&#39;: &#39;为什么从广州去新加坡还需要转机这么离谱从一开始故事就不成立了槽点不胜枚举年度诈骗电影&#39;, &#39;label&#39;: 1&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;拍出了受害者的可恨拍出了诈骗者的迫不得已良心未泯反诈宣传片诈骗工厂宣传片&#39;, &#39;label&#39;: 1&#125;  Lable: 1Data: &#123;&#39;text_a&#39;: &#39;看似反诈科普实则利用血腥和暴力场面恫吓国民让大家趁早打消出国念头把钱留给内循环这与中式家长动辄恐吓小孩的祖传教育思想如出一辙近年来国产商业片只要涉及异域必定要服膺一种外国即地狱风景这边独好的保守主义思潮这当然是一场属于部分民众和宣传工具的双向奔赴你甚至很难苛责一个背刺字幕组和靠抖音热门拍片的导演拍出这样一部前一半剥削电影后一半战狼出征的怪胎毕竟他最后会带着大几十亿的票房骄傲地反问你一句人民群众喜闻乐见你不喜欢你算老几&#39;, &#39;label&#39;: 1&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;王大陆演技不错&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;影片本身承担了很重的责任在这个框架内主创已经尽力拉高了影片的可看性在一切都为一个大的主题辅助的前提下角色符号化几乎是不可避免的看完影片观众记住电信诈骗的危害就行了关心不关心角色不是重点但我还是想呼吁适当的分级或者统一审查标准不要那边要求不能出现红色的血这边人脑袋上扎钉子&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;骗子太可恶了&#39;, &#39;label&#39;: 0&#125;  Lable: 1Data: &#123;&#39;text_a&#39;: &#39;演员张艺兴值得信赖为了过审只能舍掉一些细节理想化一下结局&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;不开玩笑这个开分绝对偏低了不说剧情紧张刺激猎奇更多的是影片本身的普世价值和社会意义过审不容易目睹过身边的人赌博以及被骗的真实经历一点也不夸张真诚地推荐所有人以及带着家人一起看对小广告深恶痛绝反诈宣传从我做起&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;有教育意义诈骗戏份可大学生和警察戏份比较不好看喜欢里面的孙阳&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;极其扯淡的电影甚至骂都是浪费时间和人生大事一样浪费好题材整部电影一盘散沙从被骗到诈骗的经历再到受害者的故事再到破获案件的过程没有一个部分拍好的花钱去看电影就好比你花钱去看cctv的公益广告整部电影亮点只有王传君但如此傻逼的剧情把这个角色都搞得水泄不通诈骗犯有兄弟情有爱情TM来搞笑的伟光正男主真的全场尬住ok申奥可以拉进黑名单了&#39;, &#39;label&#39;: 1&#125;  Lable: 1Data: &#123;&#39;text_a&#39;: &#39;我这辈子是不去东南亚了&#39;, &#39;label&#39;: 0&#125;  Lable: 1Data: &#123;&#39;text_a&#39;: &#39;完成度一般演技也掉线叙事缺逻辑编剧不给力安娜和潘生出戏让人懵宁浩加申奥效果不太妙&#39;, &#39;label&#39;: 1&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;那么多国产片歌功颂德描绘盛世粉饰太平至少它直面了人生的恶人性的恶人的恶哪怕只是一小部分走出影院是夏日傍晚热浪蝉鸣车流人群街道路边摊即使裹挟着灰尘与嘈杂但一切都很真实充满烟火气仿佛自己也刚经历了一场暗夜之行而重返人间忽然好想去找家小店坐下来喝碗粉丝汤&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;烂&#39;, &#39;label&#39;: 1&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;七位主角和一众黄金配角的戏非常精彩让影片远超我预期逻辑硬漏洞不去想不去提单纯为看到周也开心也为看到咏梅孙阳王传君开心孙阳演技大进步&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;孙阳像辣椒炒肉油辣得刚好黄艺馨演受刑比金晨好500个张艺兴&#39;, &#39;label&#39;: 1&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;用一组狂派以暴制暴莫名想起王道吉&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;片子本身挺扎实作为半命题作文故事完整演员发挥OK除了某些不得不做的戏剧性设置如金晨被孙阳恋爱脑给救了基本拥有了与其宣传话题匹配的可看性抖音密集投放两个月的短视频宣传也被证明这是抓住大陆下沉市场以获得最大路人关注榨取最广大345678线城市票房的最优手段当然这样的宣传手段也得益于本片自身所拥有的优秀话题性即非常贴合时下缅北诈骗这一社会热点两相结合之下本片与最广大普通观众群体神奇地达成了双向奔赴那句最朴实的价值观念多一人观影少一人受骗的口号也发挥出了实实在在的作用个人看完之后听到身边很多人都在交流是被前期宣传吸引来的看完之后也确实得到了一点关于诈骗的小小震撼和警示私以为这就很不错了豆瓣这群文青们一个个自恃智商奇高不会受骗反而纷纷以观看此片为受诈也挺可笑&#39;, &#39;label&#39;: 0&#125;  Lable: 0Data: &#123;&#39;text_a&#39;: &#39;社会热点自然会很火但确实把赌博境外诈骗这个产业链有好好表达了最重要是这就发生在我们每个人身边希望这更有社会现实意义的电影被更多人看到&#39;, &#39;label&#39;: 0&#125;  Lable: 0</code></pre><p>可以看到有正确的也有错误的，整体来说还是正确的多一些，我觉得主要的问题在于数据量太少了，训练的数据量至少要上万，但是由于这是个小demo初体验项目，影刺没有爬取太多的数据，只有区区600条，用于训练的只用420条数据，很容易造成过拟合的情况，导致模型在测试集、验证集上面的效果并不好。<br><img src="https://ai-studio-static-online.cdn.bcebos.com/df71cd0ded03423b829b21befb467cc85979e7b478704cf88fac329c3afa96b6"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>通过这个项目了解了文心大模型Ernie-3.0的使用方法</li><li>采用超小样本的预训练对现在非常火的孤注一掷电影影评进行分析</li><li>整体来说，效果还算不错</li><li>大多数人进了缅北的人，并没有成为潘生，多数是悲惨的一生</li><li><strong>珍爱生命，远离诈骗，远离赌博</strong>！<br><img src="https://ai-studio-static-online.cdn.bcebos.com/c9b8752bcca84ca3be76bda889286bb1da194be4dc984261a318f56207915f63"></li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://aistudio.baidu.com/projectdetail/5125584?channelType=0&channel=0">三岁大佬的基于Ernie-3.0的电影评论情感分析</a></li><li><a href="https://arxiv.org/abs/2112.12731">ERNIE 3.0 Titan: Exploring Larger-scale Knowledge Enhanced Pre-training for Language Understanding and Generation</a></li><li><a href="https://paddlenlp.readthedocs.io/zh/latest/model_zoo/index.html">PaddleNLP Transformer预训练模型</a></li><li><a href="https://github.com/PaddlePaddle/PaddleNLP">PaddleNlp-Github</a></li></ul><h3 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h3><ul><li>作者为一名在校大三学生，<strong>人工智能专业</strong></li><li>学习方向：<strong>深度学习和计算机视觉</strong></li><li>百度飞桨PPDE，百度飞桨领航团成员，阿里云开发者社区博客专家，<strong>csdn人工智能领域新星创作者 万粉博主</strong></li></ul><ul><li><a href="https://github.com/lzypython">Github主页</a>：<a href="https://github.com/lzypython">https://github.com/lzypython</a></li><li><a href="https://www.lizhiyang.xyz/">个人博客主页</a>：<a href="https://www.lizhiyang.xyz/">https://www.lizhiyang.xyz/</a></li><li><a href="https://lizhiyang.blog.csdn.net/">CSDN主页</a>：<a href="https://lizhiyang.blog.csdn.net/">https://lizhiyang.blog.csdn.net/</a></li></ul><p><font size=5><strong>欢迎关注，交流学习！</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17.Resnet</title>
      <link href="/2023/08/20/17-Resnet/"/>
      <url>/2023/08/20/17-Resnet/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：moban.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/15 21:19 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.9定稿版本</span></span><br><span class="line"><span class="comment"># 参考：</span></span><br><span class="line"><span class="comment"># arxiv 1505.04597</span></span><br><span class="line"><span class="comment"># arxiv 1801.05746，官方实现：https://github.com/ternaus/TernausNet</span></span><br><span class="line"><span class="comment"># https://blog.csdn.net/github_36923418/article/details/83273107</span></span><br><span class="line"><span class="comment"># pixelshuffle参考: arxiv 1609.05158</span></span><br><span class="line"></span><br><span class="line">backbone = <span class="string">&#x27;resnet50&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DecoderBlock</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    U-Net中的解码模块</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    采用每个模块一个stride为1的3*3卷积加一个上采样层的形式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    上采样层可使用&#x27;deconv&#x27;、&#x27;pixelshuffle&#x27;, 其中pixelshuffle必须要mid_channels=4*out_channles</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    定稿采用pixelshuffle</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    BN_enable控制是否存在BN，定稿设置为True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, mid_channels, out_channels, upsample_mode=<span class="string">&#x27;pixelshuffle&#x27;</span>, BN_enable=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.in_channels = in_channels</span><br><span class="line">        self.mid_channels = mid_channels</span><br><span class="line">        self.out_channels = out_channels</span><br><span class="line">        self.upsample_mode = upsample_mode</span><br><span class="line">        self.BN_enable = BN_enable</span><br><span class="line"></span><br><span class="line">        self.conv = nn.Conv2d(in_channels=in_channels, out_channels=mid_channels, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>,</span><br><span class="line">                              bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.BN_enable:</span><br><span class="line">            self.norm1 = nn.BatchNorm2d(mid_channels)</span><br><span class="line">        self.relu1 = nn.ReLU(inplace=<span class="literal">False</span>)</span><br><span class="line">        self.relu2 = nn.ReLU(inplace=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.upsample_mode == <span class="string">&#x27;deconv&#x27;</span>:</span><br><span class="line">            self.upsample = nn.ConvTranspose2d(in_channels=mid_channels, out_channels=out_channels,</span><br><span class="line"></span><br><span class="line">                                               kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>, output_padding=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.upsample_mode == <span class="string">&#x27;pixelshuffle&#x27;</span>:</span><br><span class="line">            self.upsample = nn.PixelShuffle(upscale_factor=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> self.BN_enable:</span><br><span class="line">            self.norm2 = nn.BatchNorm2d(out_channels)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv(x)</span><br><span class="line">        <span class="keyword">if</span> self.BN_enable:</span><br><span class="line">            x = self.norm1(x)</span><br><span class="line">        x = self.relu1(x)</span><br><span class="line">        x = self.upsample(x)</span><br><span class="line">        <span class="keyword">if</span> self.BN_enable:</span><br><span class="line">            x = self.norm2(x)</span><br><span class="line">        x = self.relu2(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resnet_Unet</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定稿使用resnet50作为backbone</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    BN_enable控制是否存在BN，定稿设置为True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, BN_enable=<span class="literal">True</span>, resnet_pretrain=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.BN_enable = BN_enable</span><br><span class="line">        <span class="comment"># encoder部分</span></span><br><span class="line">        <span class="comment"># 使用resnet34或50预定义模型，由于单通道入，因此自定义第一个conv层，同时去掉原fc层</span></span><br><span class="line">        <span class="comment"># 剩余网络各部分依次继承</span></span><br><span class="line">        <span class="comment"># 经过测试encoder取三层效果比四层更佳，因此降采样、升采样各取4次</span></span><br><span class="line">        <span class="keyword">if</span> backbone == <span class="string">&#x27;resnet34&#x27;</span>:</span><br><span class="line">            resnet = models.resnet34(pretrained=resnet_pretrain)</span><br><span class="line">            filters = [<span class="number">64</span>, <span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span><br><span class="line">        <span class="keyword">elif</span> backbone == <span class="string">&#x27;resnet50&#x27;</span>:</span><br><span class="line">            resnet = models.resnet50(pretrained=resnet_pretrain)</span><br><span class="line">            filters = [<span class="number">64</span>, <span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>]</span><br><span class="line">        self.firstconv = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">7</span>, stride=<span class="number">2</span>, padding=<span class="number">3</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.firstbn = resnet.bn1</span><br><span class="line">        self.firstrelu = resnet.relu</span><br><span class="line">        self.firstmaxpool = resnet.maxpool</span><br><span class="line">        self.encoder1 = resnet.layer1</span><br><span class="line">        self.encoder2 = resnet.layer2</span><br><span class="line">        self.encoder3 = resnet.layer3</span><br><span class="line"></span><br><span class="line">        <span class="comment"># decoder部分</span></span><br><span class="line">        self.center = DecoderBlock(in_channels=filters[<span class="number">3</span>], mid_channels=filters[<span class="number">3</span>] * <span class="number">4</span>, out_channels=filters[<span class="number">3</span>],</span><br><span class="line">                                   BN_enable=self.BN_enable)</span><br><span class="line">        self.decoder1 = DecoderBlock(in_channels=filters[<span class="number">3</span>] + filters[<span class="number">2</span>], mid_channels=filters[<span class="number">2</span>] * <span class="number">4</span>,</span><br><span class="line">                                     out_channels=filters[<span class="number">2</span>], BN_enable=self.BN_enable)</span><br><span class="line">        self.decoder2 = DecoderBlock(in_channels=filters[<span class="number">2</span>] + filters[<span class="number">1</span>], mid_channels=filters[<span class="number">1</span>] * <span class="number">4</span>,</span><br><span class="line">                                     out_channels=filters[<span class="number">1</span>], BN_enable=self.BN_enable)</span><br><span class="line">        self.decoder3 = DecoderBlock(in_channels=filters[<span class="number">1</span>] + filters[<span class="number">0</span>], mid_channels=filters[<span class="number">0</span>] * <span class="number">4</span>,</span><br><span class="line">                                     out_channels=filters[<span class="number">0</span>], BN_enable=self.BN_enable)</span><br><span class="line">        <span class="keyword">if</span> self.BN_enable:</span><br><span class="line">            self.final = nn.Sequential(</span><br><span class="line">                nn.Conv2d(in_channels=filters[<span class="number">0</span>], out_channels=<span class="number">32</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">                nn.BatchNorm2d(<span class="number">32</span>),</span><br><span class="line">                nn.ReLU(inplace=<span class="literal">False</span>),</span><br><span class="line">                nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">1</span>, kernel_size=<span class="number">1</span>),</span><br><span class="line">                nn.Sigmoid()</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.final = nn.Sequential(</span><br><span class="line">                nn.Conv2d(in_channels=filters[<span class="number">0</span>], out_channels=<span class="number">32</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">                nn.ReLU(inplace=<span class="literal">False</span>),</span><br><span class="line">                nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">1</span>, kernel_size=<span class="number">1</span>),</span><br><span class="line">                nn.Sigmoid()</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.firstconv(x)</span><br><span class="line">        x = self.firstbn(x)</span><br><span class="line">        x = self.firstrelu(x)</span><br><span class="line">        x_ = self.firstmaxpool(x)</span><br><span class="line"></span><br><span class="line">        e1 = self.encoder1(x_)</span><br><span class="line">        e2 = self.encoder2(e1)</span><br><span class="line">        e3 = self.encoder3(e2)</span><br><span class="line"></span><br><span class="line">        center = self.center(e3)</span><br><span class="line"></span><br><span class="line">        d2 = self.decoder1(torch.cat([center, e2], dim=<span class="number">1</span>))</span><br><span class="line">        d3 = self.decoder2(torch.cat([d2, e1], dim=<span class="number">1</span>))</span><br><span class="line">        d4 = self.decoder3(torch.cat([d3, x], dim=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.final(d4)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16.Unet</title>
      <link href="/2023/08/20/16-Unet/"/>
      <url>/2023/08/20/16-Unet/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689328149107-2b62a4a4-ffba-4c0b-be7c-5cb9c4837ef1.png#averageHue=%23fefdfd&clientId=ue79d56f7-95fb-4&from=paste&height=542&id=u8e034505&originHeight=760&originWidth=1195&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=209951&status=done&style=none&taskId=uea74b23c-d625-449d-a108-564b35090dc&title=&width=852.6198729318769" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：unet_parts.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/14 17:47 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Conv_Block</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_channel,out_channel</span>):</span><br><span class="line">        <span class="built_in">super</span>(Conv_Block, self).__init__()</span><br><span class="line">        self.layer = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channel,out_channel,kernel_size=<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">1</span>,bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channel),</span><br><span class="line">            nn.Relu(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(out_channel,out_channel,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channel),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.layer(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Down</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_channel,out_channel</span>):</span><br><span class="line">        <span class="built_in">super</span>(Down, self).__init__()</span><br><span class="line">        self.maxpool_conv = nn.Sequential(</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv_Block(in_channel,out_channel)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.maxpool_conv(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Up</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_channel,out_channel,bilinear=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Up, self).__init__()</span><br><span class="line">        self.up = nn.Upsample(scale_factor=<span class="number">2</span>,mode=<span class="string">&quot;bilinear&quot;</span>,align_corners=<span class="literal">True</span>)</span><br><span class="line">        self.conv = Conv_Block(in_channel,out_channel)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x1,x2</span>):</span><br><span class="line">        x1 = self.up(x1)</span><br><span class="line">        <span class="comment"># 下面这里有点不大懂，GPT给的解释是</span></span><br><span class="line">        <span class="comment"># 这样的填充操作是为了保持x1和x2在高度和宽度上的尺寸一致。通过计算尺寸差异并进行填充，可以将x1的尺寸调整为与x2相同，以便进行后续的拼接操作。</span></span><br><span class="line">        diffY = x2.size()[<span class="number">2</span>]-x1.size()[<span class="number">2</span>]</span><br><span class="line">        diffX = x2.size()[<span class="number">3</span>]-x1.size()[<span class="number">3</span>]</span><br><span class="line">        x1 = F.pad(x1,[diffX//<span class="number">2</span>,diffX-diffX//<span class="number">2</span>,</span><br><span class="line">                       diffY//<span class="number">2</span>,diffY-diffY//<span class="number">2</span>])</span><br><span class="line">        x = torch.cat([x2,x1],dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.conv(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OutConv</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_channel,out_channel</span>):</span><br><span class="line">        <span class="built_in">super</span>(OutConv, self).__init__()</span><br><span class="line">        self.conv = nn.Conv2d(in_channel,out_channel,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.conv(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：unet.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/15 15:37 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> unet_parts <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Unet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n_channels,n_classes,bilinear=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Unet, self).__init__()</span><br><span class="line">        self.n_channels = n_channels</span><br><span class="line">        self.n_classes = n_classes</span><br><span class="line">        self.bilinear = bilinear</span><br><span class="line"></span><br><span class="line">        self.inc = (Conv_Block(n_channels, <span class="number">64</span>))</span><br><span class="line">        self.down1 = (Down(<span class="number">64</span>, <span class="number">128</span>))</span><br><span class="line">        self.down2 = (Down(<span class="number">128</span>, <span class="number">256</span>))</span><br><span class="line">        self.down3 = (Down(<span class="number">256</span>, <span class="number">512</span>))</span><br><span class="line">        factor = <span class="number">2</span> <span class="keyword">if</span> bilinear <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        self.down4 = (Down(<span class="number">512</span>, <span class="number">1024</span> // factor))</span><br><span class="line">        self.up1 = (Up(<span class="number">1024</span>, <span class="number">512</span> // factor, bilinear))</span><br><span class="line">        self.up2 = (Up(<span class="number">512</span>, <span class="number">256</span> // factor, bilinear))</span><br><span class="line">        self.up3 = (Up(<span class="number">256</span>, <span class="number">128</span> // factor, bilinear))</span><br><span class="line">        self.up4 = (Up(<span class="number">128</span>, <span class="number">64</span>, bilinear))</span><br><span class="line">        self.outc = (OutConv(<span class="number">64</span>, n_classes))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x1 = self.inc(x)</span><br><span class="line">        x2 = self.down1(x1)</span><br><span class="line">        x3 = self.down2(x2)</span><br><span class="line">        x4 = self.down3(x3)</span><br><span class="line">        x5 = self.down4(x4)</span><br><span class="line">        x = self.up1(x5, x4)</span><br><span class="line">        x = self.up2(x, x3)</span><br><span class="line">        x = self.up3(x, x2)</span><br><span class="line">        x = self.up4(x, x1)</span><br><span class="line">        logits = self.outc(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15.SA和CA注意力机制</title>
      <link href="/2023/08/20/15-SA%E5%92%8CCA%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/"/>
      <url>/2023/08/20/15-SA%E5%92%8CCA%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689328067114-50533b38-cf3e-4b52-8b2f-90eefa7ba13f.png#averageHue=%23eeedec&clientId=u27724aa6-6d23-4&from=paste&height=366&id=ue5cb5826&originHeight=513&originWidth=971&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=152709&status=done&style=none&taskId=u5a5f4251-7500-4c13-ba12-ff608bd128e&title=&width=692.7982398467385" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@Project ：Pytorch_learn </span><br><span class="line">@File    ：Myattention.py</span><br><span class="line">@IDE     ：PyCharm </span><br><span class="line">@Author  ：咋</span><br><span class="line">@Date    ：2023/7/14 17:42 </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">from torch.nn import Conv2d</span><br><span class="line"></span><br><span class="line">class Channel_attention(nn.Module):</span><br><span class="line">    def __init__(self,channel,ratio=16):</span><br><span class="line">        super(Channel_attention, self).__init__()</span><br><span class="line">        self.max_pool = nn.AdaptiveMaxPool2d(1)</span><br><span class="line">        self.avg_pool = nn.AdaptiveAvgPool2d(1)</span><br><span class="line">        self.fc = nn.Sequential(</span><br><span class="line">            nn.Linear(channel,channel//ratio,False),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(channel//ratio,channel,False),</span><br><span class="line">        )</span><br><span class="line">        self.sigmoid = nn.Sigmoid()</span><br><span class="line">    def forward(self,x):</span><br><span class="line">        b,c,h,w = x.size()</span><br><span class="line">        maxpool = self.max_pool(x).view([b,c])</span><br><span class="line">        avgpool = self.avg_pool(x).view([b,c])</span><br><span class="line">        maxpool_fc = self.fc(maxpool)</span><br><span class="line">        avgpool_fc = self.fc(avgpool)</span><br><span class="line">        out =maxpool_fc+avgpool_fc</span><br><span class="line">        out = self.sigmoid(out).view([b,c,1,1])</span><br><span class="line">        return out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Spacial_attention(nn.Module):</span><br><span class="line">    def __init__(self,kernel_size=7):</span><br><span class="line">        super(Spacial_attention, self).__init__()</span><br><span class="line">        self.conv1 = Conv2d(2,1,kernel_size,1,padding=3,bias=False)</span><br><span class="line">        self.sigmoid = nn.Sigmoid()</span><br><span class="line"></span><br><span class="line">    def forward(self,x):</span><br><span class="line">        max_pool_out,_ = torch.max(x,dim=1,keepdim=True)</span><br><span class="line">        avg_pool_out = torch.mean(x,dim=1,keepdim=True)</span><br><span class="line">        pool_out = torch.cat([max_pool_out,avg_pool_out],dim=1)</span><br><span class="line">        out = self.conv1(pool_out)</span><br><span class="line">        out = self.sigmoid(out)</span><br><span class="line">        return out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class My_attention(nn.Module):</span><br><span class="line">    def __init__(self,channel,ratio=16,kernel_size=7):</span><br><span class="line">        super(My_attention, self).__init__()</span><br><span class="line">        self.channel_attention = Channel_attention(channel)</span><br><span class="line">        self.spacial_attention = Spacial_attention()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def forward(self,x):</span><br><span class="line">        SA_x = self.spacial_attention(x)*x   # 空间注意力机制求的结果</span><br><span class="line">        CA_x = self.channel_attention(x)*x   # 通道注意力机制求的结果</span><br><span class="line">        output = SA_x+CA_x+x    # 将三个特征图加在一起</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">myattention = My_attention(512)</span><br><span class="line">print(myattention)</span><br><span class="line">inputs = torch.ones([2,512,26,26])</span><br><span class="line">outputs = myattention(inputs)</span><br><span class="line">print(outputs)</span><br><span class="line">print(outputs.size())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.Dropout</title>
      <link href="/2023/08/20/14-Dropout/"/>
      <url>/2023/08/20/14-Dropout/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>在训练过程中，dropout会以概率p随机地将一些神经元的输出设置为0，防止过拟合。在测试过程中，dropout不会被应用，而是通过将每个神经元的输出乘以保留概率（通常为0.5）来进行缩放。这是因为测试时，我们希望利用所有的神经元来获得更好的预测结果。<br>dropout的工作原理是，在每个训练批次中，随机选择一些神经元，并将它们的输出设置为0。这样做的结果是，网络不再依赖于特定的神经元，而是强迫网络学习多个独立的特征子集，从而减少了过拟合的风险。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Dropout(p=<span class="number">0.5</span>, inplace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689312331805-3c5dde65-c415-4962-9e2d-fd61b0d3c4fa.png#averageHue=%23fefefe&clientId=ubcf07a11-b406-4&from=paste&height=290&id=u581be1e2&originHeight=407&originWidth=794&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=135581&status=done&style=none&taskId=uf2cae1c8-b21c-4837-a9b1-039306aa440&title=&width=566.5106101321425" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689312358007-5ba99320-af05-4612-9402-1ca40bd8f654.png#averageHue=%23fefefe&clientId=ubcf07a11-b406-4&from=paste&height=320&id=u5911c6f0&originHeight=448&originWidth=886&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=132633&status=done&style=none&taskId=udddc6bdf-15dd-46fc-bd5b-0e2603cd771&title=&width=632.1516380063957" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689312344337-aa8df863-f589-41da-b6c5-26c0bd192d8f.png#averageHue=%23fefefe&clientId=ubcf07a11-b406-4&from=paste&height=352&id=ud6112dd0&originHeight=493&originWidth=906&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=126219&status=done&style=none&taskId=u837fe9fe-a4f1-42ad-a606-2c7557d043f&title=&width=646.4214266747117" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.用Gpu训练</title>
      <link href="/2023/08/20/13-%E7%94%A8Gpu%E8%AE%AD%E7%BB%83/"/>
      <url>/2023/08/20/13-%E7%94%A8Gpu%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257370054-16027114-a607-4264-8a4f-4ed7cc73b502.png#averageHue=%23404138&clientId=u17bb579b-6d2b-4&from=paste&id=u78f34584&originHeight=410&originWidth=1037&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=263558&status=done&style=none&taskId=u9091ba39-ac84-4d83-80d6-e8498c56dec&title=" alt="image.png"></p><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="https://editor.csdn.net/md/?articleId=131711411#Pycharm_5">一、Pycharm连接远程服务器</a></li><li><a href="https://editor.csdn.net/md/?articleId=131711411#xshell7xrtp7_60">二、xshell7和xrtp7配合使用</a></li><li><a href="https://editor.csdn.net/md/?articleId=131711411#_65">三、总结</a></li></ul><h1 id="一、Pycharm连接远程服务器"><a href="#一、Pycharm连接远程服务器" class="headerlink" title="一、Pycharm连接远程服务器"></a>一、Pycharm连接远程服务器</h1><p>首先要确定自己的Pycharm是专业版的，平时我们用的基本上都是社区版的Pycharm，社区版的Pycharm不带远程连接的功能，所以需要用专业版的Pycharm。给大家推一篇专业版Pycharm的安装教程，只要按照这个教程进行安装即可：<a href="https://blog.csdn.net/Feng512275/article/details/83548341?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168925309116800184142759%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168925309116800184142759&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-83548341-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=pycharm%E4%B8%93%E4%B8%9A%E7%89%88%E7%A0%B4%E8%A7%A3&spm=1018.2226.3001.4187">Pycharm专业版安装</a>。<br>打开界面，点击工具箱下的deployment下的configuration。<img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257370108-fce0562c-0ff2-441b-a4b6-d5156eb49d92.png#averageHue=%2381bb8d&clientId=u17bb579b-6d2b-4&from=paste&id=u7d7d76ee&originHeight=1023&originWidth=1921&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=189304&status=done&style=none&taskId=ufa099e15-ff31-4889-a4ae-b24fc9e8bf2&title=" alt="image.png"><br>点击加号添加服务器信息，选择SFTP，点击右边的…添加信息：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257369964-c8ee8a54-32cf-4a8c-b0c3-97ca8902d655.png#averageHue=%233d4043&clientId=u17bb579b-6d2b-4&from=paste&id=ua319863c&originHeight=810&originWidth=961&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=49836&status=done&style=none&taskId=u8c3cabac-014b-4a01-9ed6-cbb7a326632&title=" alt="image.png"><br>依次输入IP，端口号（默认是22），用户名（注意大小写），密码。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257369907-9362c7ce-9a62-4b32-ac47-6e5a097c1cdd.png#averageHue=%233d4042&clientId=u17bb579b-6d2b-4&from=paste&id=u8046223f&originHeight=843&originWidth=1000&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=45822&status=done&style=none&taskId=u6976a25a-3322-4ee9-a7fb-48d3f45f0a7&title=" alt="image.png"><br>点击确定后返回上一个界面，可以点击Test_connection尝试连接，successful connect说明可以正常连接服务器了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257369988-a60b579e-41d2-485f-a536-5cc4af92c0b3.png#averageHue=%233c4042&clientId=u17bb579b-6d2b-4&from=paste&id=u3c3cee81&originHeight=810&originWidth=961&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=65456&status=done&style=none&taskId=ue2c71793-7e25-4605-afbe-20474c73043&title=" alt="image.png"><br><strong>关键一步来了！</strong>-——配置文件映射信息。点击mappings，local path即为本地文件夹的路径，用的是\斜杠，deployment path是远程服务器对应的路径，<strong>重点!</strong>,服务器最后的文件夹名称一定要和本地的文件夹名称一样，我这里本地是lzy，服务器也要创建一个lzy<strong>同名文件夹</strong>，否则后面运行文件时，<strong>会报找不到文件的错误！</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257370920-7bbe2896-9bfd-4133-bbce-2363057ab59f.png#averageHue=%233d4042&clientId=u17bb579b-6d2b-4&from=paste&id=u00fd9f8e&originHeight=810&originWidth=961&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=45924&status=done&style=none&taskId=ue4ae7009-c6d6-4ff0-aad2-1212701691f&title=" alt="image.png"><br>然后创建虚拟环境，选择ssh创建，选择我们之前创建好的服务器连接：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257371208-e9ce7645-800a-484f-aa2d-3fb9625b522d.png#averageHue=%233c4043&clientId=u17bb579b-6d2b-4&from=paste&id=ub9026781&originHeight=684&originWidth=1006&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=47144&status=done&style=none&taskId=u81f4824f-a5cd-4916-846d-1ccba53c12a&title=" alt="image.png"><br>选择远程服务器中conda的虚拟环境，然后把之前的文件的映射关系填到这上面来。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257371291-5dfe6d99-6d87-4d6e-949c-60b8c057f8ff.png#averageHue=%233c4042&clientId=u17bb579b-6d2b-4&from=paste&id=uc199ac42&originHeight=684&originWidth=1006&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=39724&status=done&style=none&taskId=ua97bbc85-7372-4728-9081-eb02c6b1a1e&title=" alt="image.png"><br>点击finish，点击右侧的齿轮然后showall，找到远程服务器的环境，点击右侧的编辑。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257371293-955dd98d-65e7-49c9-bca1-a9c0d798ea56.png#averageHue=%233f4347&clientId=u17bb579b-6d2b-4&from=paste&id=uf3b1a48c&originHeight=701&originWidth=783&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=56147&status=done&style=none&taskId=ub88c9862-bf0a-4479-92d0-3cf4209336f&title=" alt="image.png"><br>改为SSH连接，修改SSH configuration和解释器路径，修改成自己的就可以。然后点击OK。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257372074-7640a3bb-bd51-403a-bae4-50b54ffc7e4c.png#averageHue=%2340454a&clientId=u17bb579b-6d2b-4&from=paste&id=ub7f38a4a&originHeight=347&originWidth=684&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=31815&status=done&style=none&taskId=u63c4af50-cf27-493c-95d3-da2a36d9e57&title=" alt="image.png"><br>可以看到远程服务器上的虚拟环境中的库。我已经提前安装了Pytorch和torchvision和torchaudio，并且是GPU版本的。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257372696-3eaea03a-4804-42e1-b464-549d0da5d48d.png#averageHue=%233e4246&clientId=u17bb579b-6d2b-4&from=paste&id=u211106af&originHeight=843&originWidth=1180&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=79616&status=done&style=none&taskId=u917ef1e9-c0bc-4e74-a939-c92052975c1&title=" alt="image.png"><br>将文件自动上传打开，也可以手动上传文件，在上传时，点击整个目录夹，然后上传。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257372677-94a72cb1-56be-4190-bfcd-97f1b72b787c.png#averageHue=%237ebc8c&clientId=u17bb579b-6d2b-4&from=paste&id=u4a58018f&originHeight=576&originWidth=1921&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=137046&status=done&style=none&taskId=u297f2cf8-7c69-4d30-86fb-9d95d17bc9b&title=" alt="image.png"><br>写个脚本测试一下，服务器上的Gpu有没有成功连接：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257372755-8e38a3f4-dfa9-4fae-add9-4002fc3d7a6a.png#averageHue=%23f0e9cb&clientId=u17bb579b-6d2b-4&from=paste&id=u13617293&originHeight=1023&originWidth=1921&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=209716&status=done&style=none&taskId=u28e63fb8-6dc4-43eb-8567-ce9a253437d&title=" alt="image.png"><br>输出：</p><p>现在代码就是在远程服务器上跑的了，用的是服务器上的GPU，至此Pycharm连接远程服务器就结束了，<strong>开始愉快的使用服务器上的显卡吧！</strong>下面给大家推荐两个很实用的工具，xshell和xftp。</p><h1 id="二、xshell7和xrtp7配合使用"><a href="#二、xshell7和xrtp7配合使用" class="headerlink" title="二、xshell7和xrtp7配合使用"></a>二、xshell7和xrtp7配合使用</h1><p>xshell是用连接远程服务器的，xrtp是用来传输文件的。xshell连接之后就相当于linux的命令窗口，可以使用各种linux的指令来控制远程服务器的动作。xrtp是在xshell连接上之后，和远程服务器进行文件互传的工作，它有可视化界面，非常方便。xshell和xrtp免费版下载地址：<a href="https://www.xshell.com/zh/free-for-home-school/">xshell和xrtp免费版下载地址</a>。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257372694-b482a589-79ca-4f9e-9928-8a01451e75b6.png#averageHue=%23646362&clientId=u17bb579b-6d2b-4&from=paste&id=u72d1dbff&originHeight=765&originWidth=984&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=84415&status=done&style=none&taskId=u45a3b815-fc0d-45b7-a4a8-5368c044140&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689257373240-14988cdb-37eb-4366-b2b4-bbdf6ede34ee.png#averageHue=%23f3f2f0&clientId=u17bb579b-6d2b-4&from=paste&id=uc35e914e&originHeight=1067&originWidth=1388&originalType=url&ratio=1.4015624523162842&rotation=0&showTitle=false&size=176696&status=done&style=none&taskId=u0828ec20-6437-4e4e-a8cf-32a773dab81&title=" alt="image.png"><br>填ip和端口号，用户名和密码就可以直接连接了，下一次可以不用输密码直接连接了。主要网络问题，如果挂着代理，要把代理关掉，确保当前网络是适合连接当前服务器的。</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>之前觉得配置远程服务器和本地的Pycharm连接非常麻烦，随着这篇博客的完成，感觉也不是很麻烦了。思路很清晰，之前踩的坑都帮大家一一说明了，如果大家还遇到了其他问题也欢迎在下方评论！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：628test </span></span><br><span class="line"><span class="string">@File    ：test.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/6/28 23:24 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line">cuda_version = torch.version.cuda</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;CUDA 版本:&quot;</span>, cuda_version)</span><br><span class="line">device = torch.cuda.get_device_name()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;名称:&quot;</span>, device)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="number">1.10</span><span class="number">.2</span>+cu111</span><br><span class="line">CUDA 版本: <span class="number">11.1</span></span><br><span class="line">名称: NVIDIA GeForce RTX <span class="number">3090</span></span><br></pre></td></tr></table></figure><p>将device设置成GPU</p><ul><li>device &#x3D; torch.device(“cuda” if torch.cuda.is_available() else “cpu”) # 三目判断</li><li>model &#x3D; model.to(device)</li><li>loss_F &#x3D; loss_F.to(device)</li><li>train_img &#x3D; train_img.to(device)</li><li>train_label &#x3D; train_label.to(device)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：train_GPU.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/13 22:12 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> Mymodel <span class="keyword">import</span> MyModule</span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="comment"># 0.设置参数</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">lr = <span class="number">0.01</span></span><br><span class="line">epochs = <span class="number">20</span></span><br><span class="line">savetime = <span class="number">5</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="comment"># 1.准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(<span class="string">&quot;CIFAR10&quot;</span>,train=<span class="literal">True</span>,transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                          download=<span class="literal">True</span>)</span><br><span class="line">test_data = torchvision.datasets.CIFAR10(<span class="string">&quot;CIFAR10&quot;</span>,train=<span class="literal">False</span>,transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                         download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.加载数据集</span></span><br><span class="line">train_loader = data.DataLoader(dataset=train_data,batch_size=batch_size)</span><br><span class="line">test_loader = data.DataLoader(dataset=test_data,batch_size=batch_size)</span><br><span class="line">train_len = <span class="built_in">len</span>(train_loader)</span><br><span class="line">test_len = <span class="built_in">len</span>(test_loader)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练集长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_len))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试集长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_len))</span><br><span class="line"><span class="comment"># 3.定义网络结构，实例化模型</span></span><br><span class="line">model = MyModule()</span><br><span class="line">model = model.to(device)</span><br><span class="line"><span class="comment"># 4.定义损失函数</span></span><br><span class="line">loss_F = torch.nn.CrossEntropyLoss()</span><br><span class="line">loss_F = loss_F.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.定义参数更新方式</span></span><br><span class="line">optim = torch.optim.SGD(model.parameters(),lr=lr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.开始训练和评估</span></span><br><span class="line">model.train()</span><br><span class="line">write = SummaryWriter(<span class="string">&quot;log_6&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------开始第&#123;&#125;轮训练，总共&#123;&#125;轮-------&quot;</span>.<span class="built_in">format</span>(epoch,epochs))</span><br><span class="line">    train_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> train_time,train_item <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        train_img,train_label = train_item</span><br><span class="line">        train_img = train_img.to(device)</span><br><span class="line">        train_label = train_label.to(device)</span><br><span class="line">        <span class="comment"># 前向传播</span></span><br><span class="line">        result = model(train_img)</span><br><span class="line">        <span class="comment"># 计算损失</span></span><br><span class="line">        loss = loss_F(result,train_label)</span><br><span class="line">        <span class="comment"># 反向传播更新参数</span></span><br><span class="line">        optim.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optim.step()</span><br><span class="line">        train_loss += loss</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    right =<span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> test_time,test_item <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            test_img,test_label = test_item</span><br><span class="line">            test_img = test_img.to(device)</span><br><span class="line">            test_label = test_label.to(device)</span><br><span class="line">            test_result = model(test_img)</span><br><span class="line">            <span class="comment"># 获取测试集上的loss</span></span><br><span class="line">            loss = loss_F(test_result,test_label)</span><br><span class="line">            test_loss += loss</span><br><span class="line">            <span class="comment"># 获取测试集上的准确率</span></span><br><span class="line">            right += (test_result.argmax(<span class="number">1</span>) == test_label).<span class="built_in">sum</span>()</span><br><span class="line">    accuracy = right/test_len</span><br><span class="line">    write.add_scalar(<span class="string">&quot;train_loss&quot;</span>,train_loss,epoch)</span><br><span class="line">    write.add_scalar(<span class="string">&quot;test_loss&quot;</span>,test_loss,epoch)</span><br><span class="line">    write.add_scalar(<span class="string">&quot;accuracy&quot;</span>,accuracy,epoch)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练集上的损失为:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集上的损失为:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集上的准确率为:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(accuracy))</span><br><span class="line">    <span class="keyword">if</span> epoch % savetime ==<span class="number">0</span>:</span><br><span class="line">        torch.save(model,<span class="string">&quot;./model/model&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练完成！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孤注一掷——基于文心Ernie-3.0大模型的影评情感分析</title>
      <link href="/2023/08/20/12-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
      <url>/2023/08/20/12-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>模型训练可以分为以下几步</p><ol><li>数据集准备</li><li>数据集加载</li><li>模型定义及实例化</li><li>损失函数定义</li><li>参数更新方式定义</li><li>模型必要参数设置</li><li>模型训练逻辑及一些提示信息、可视化编写</li><li>开始训练模型<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：train.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/13 15:38 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> Mymodel <span class="keyword">import</span> MyModule</span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="comment"># 0.设置参数</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">lr = <span class="number">0.01</span></span><br><span class="line">epochs = <span class="number">20</span></span><br><span class="line">savetime = <span class="number">5</span></span><br><span class="line"><span class="comment"># 1.准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(<span class="string">&quot;CIFAR10&quot;</span>,train=<span class="literal">True</span>,transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                          download=<span class="literal">True</span>)</span><br><span class="line">test_data = torchvision.datasets.CIFAR10(<span class="string">&quot;CIFAR10&quot;</span>,train=<span class="literal">False</span>,transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                         download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.加载数据集</span></span><br><span class="line">train_loader = data.DataLoader(dataset=train_data,batch_size=batch_size)</span><br><span class="line">test_loader = data.DataLoader(dataset=test_data,batch_size=batch_size)</span><br><span class="line">train_len = <span class="built_in">len</span>(train_loader)</span><br><span class="line">test_len = <span class="built_in">len</span>(test_loader)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练集长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_len))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试集长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_len))</span><br><span class="line"><span class="comment"># 3.定义网络结构，实例化模型</span></span><br><span class="line">model = MyModule()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.定义损失函数</span></span><br><span class="line">loss_F = torch.nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.定义参数更新方式</span></span><br><span class="line">optim = torch.optim.SGD(model.parameters(),lr=lr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.开始训练和评估</span></span><br><span class="line">model.train()</span><br><span class="line">write = SummaryWriter(<span class="string">&quot;log_6&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------开始第&#123;&#125;轮训练，总共&#123;&#125;轮-------&quot;</span>.<span class="built_in">format</span>(epoch,epochs))</span><br><span class="line">    train_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> train_time,train_item <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        train_img,train_label = train_item</span><br><span class="line">        <span class="comment"># 前向传播</span></span><br><span class="line">        result = model(train_img)</span><br><span class="line">        <span class="comment"># 计算损失</span></span><br><span class="line">        loss = loss_F(result,train_label)</span><br><span class="line">        <span class="comment"># 反向传播更新参数</span></span><br><span class="line">        optim.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optim.step()</span><br><span class="line">        train_loss += loss</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    right =<span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> test_time,test_item <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            test_img,test_label = test_item</span><br><span class="line">            test_result = model(test_img)</span><br><span class="line">            <span class="comment"># 获取测试集上的loss</span></span><br><span class="line">            loss = loss_F(test_result,test_label)</span><br><span class="line">            test_loss += loss</span><br><span class="line">            <span class="comment"># 获取测试集上的准确率</span></span><br><span class="line">            right += (test_result.argmax(<span class="number">1</span>) == test_label).<span class="built_in">sum</span>()</span><br><span class="line">    accuracy = right/test_len</span><br><span class="line">    write.add_scalar(<span class="string">&quot;train_loss&quot;</span>,train_loss,epoch)</span><br><span class="line">    write.add_scalar(<span class="string">&quot;test_loss&quot;</span>,test_loss,epoch)</span><br><span class="line">    write.add_scalar(<span class="string">&quot;accuracy&quot;</span>,accuracy,epoch)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练集上的损失为:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集上的损失为:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集上的准确率为:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(accuracy))</span><br><span class="line">    <span class="keyword">if</span> epoch % savetime ==<span class="number">0</span>:</span><br><span class="line">        torch.save(model,<span class="string">&quot;./model/model&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练完成！&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">D:\anaconda\envs\Gpu-Pytorch\python.exe D:/Pytorch_learn/train.py</span><br><span class="line">D:\anaconda\envs\Gpu-Pytorch\lib\site-packages\torchvision\io\image.py:<span class="number">11</span>: UserWarning: Failed to load image Python extension: Could <span class="keyword">not</span> find module <span class="string">&#x27;D:\anaconda\envs\Gpu-Pytorch\Lib\site-packages\torchvision\image.pyd&#x27;</span> (<span class="keyword">or</span> one of its dependencies). Try using the full path <span class="keyword">with</span> constructor syntax.</span><br><span class="line">  warn(<span class="string">f&quot;Failed to load image Python extension: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">Files already downloaded <span class="keyword">and</span> verified</span><br><span class="line">Files already downloaded <span class="keyword">and</span> verified</span><br><span class="line">训练集长度为：<span class="number">782</span></span><br><span class="line">测试集长度为：<span class="number">157</span></span><br><span class="line">-------开始第<span class="number">0</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">1692.0927734375</span></span><br><span class="line">测试集上的损失为:<span class="number">318.7899475097656</span></span><br><span class="line">测试集上的准确率为:<span class="number">17.171974182128906</span></span><br><span class="line">-------开始第<span class="number">1</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">1462.9697265625</span></span><br><span class="line">测试集上的损失为:<span class="number">302.61761474609375</span></span><br><span class="line">测试集上的准确率为:<span class="number">19.770700454711914</span></span><br><span class="line">-------开始第<span class="number">2</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">1305.275390625</span></span><br><span class="line">测试集上的损失为:<span class="number">266.6638488769531</span></span><br><span class="line">测试集上的准确率为:<span class="number">23.980892181396484</span></span><br><span class="line">-------开始第<span class="number">3</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">1211.9080810546875</span></span><br><span class="line">测试集上的损失为:<span class="number">264.86248779296875</span></span><br><span class="line">测试集上的准确率为:<span class="number">24.78343963623047</span></span><br><span class="line">-------开始第<span class="number">4</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">1148.6689453125</span></span><br><span class="line">测试集上的损失为:<span class="number">258.8547058105469</span></span><br><span class="line">测试集上的准确率为:<span class="number">25.93630599975586</span></span><br><span class="line">-------开始第<span class="number">5</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">1094.395751953125</span></span><br><span class="line">测试集上的损失为:<span class="number">245.91709899902344</span></span><br><span class="line">测试集上的准确率为:<span class="number">27.719745635986328</span></span><br><span class="line">-------开始第<span class="number">6</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">1043.458984375</span></span><br><span class="line">测试集上的损失为:<span class="number">231.48187255859375</span></span><br><span class="line">测试集上的准确率为:<span class="number">29.585987091064453</span></span><br><span class="line">-------开始第<span class="number">7</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">993.9429321289062</span></span><br><span class="line">测试集上的损失为:<span class="number">216.33401489257812</span></span><br><span class="line">测试集上的准确率为:<span class="number">32.070064544677734</span></span><br><span class="line">-------开始第<span class="number">8</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">947.3882446289062</span></span><br><span class="line">测试集上的损失为:<span class="number">203.79718017578125</span></span><br><span class="line">测试集上的准确率为:<span class="number">34.248409271240234</span></span><br><span class="line">-------开始第<span class="number">9</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">905.7017822265625</span></span><br><span class="line">测试集上的损失为:<span class="number">194.99539184570312</span></span><br><span class="line">测试集上的准确率为:<span class="number">35.828025817871094</span></span><br><span class="line">-------开始第<span class="number">10</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">868.5162963867188</span></span><br><span class="line">测试集上的损失为:<span class="number">187.56068420410156</span></span><br><span class="line">测试集上的准确率为:<span class="number">37.08917236328125</span></span><br><span class="line">-------开始第<span class="number">11</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">835.2941284179688</span></span><br><span class="line">测试集上的损失为:<span class="number">181.5903778076172</span></span><br><span class="line">测试集上的准确率为:<span class="number">37.840763092041016</span></span><br><span class="line">-------开始第<span class="number">12</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">805.2085571289062</span></span><br><span class="line">测试集上的损失为:<span class="number">177.99606323242188</span></span><br><span class="line">测试集上的准确率为:<span class="number">38.445858001708984</span></span><br><span class="line">-------开始第<span class="number">13</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">777.8590698242188</span></span><br><span class="line">测试集上的损失为:<span class="number">175.87742614746094</span></span><br><span class="line">测试集上的准确率为:<span class="number">38.904457092285156</span></span><br><span class="line">-------开始第<span class="number">14</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">752.6644287109375</span></span><br><span class="line">测试集上的损失为:<span class="number">174.36672973632812</span></span><br><span class="line">测试集上的准确率为:<span class="number">39.25477600097656</span></span><br><span class="line">-------开始第<span class="number">15</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">729.43798828125</span></span><br><span class="line">测试集上的损失为:<span class="number">173.59202575683594</span></span><br><span class="line">测试集上的准确率为:<span class="number">39.48407745361328</span></span><br><span class="line">-------开始第<span class="number">16</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">707.3736572265625</span></span><br><span class="line">测试集上的损失为:<span class="number">173.00869750976562</span></span><br><span class="line">测试集上的准确率为:<span class="number">39.56687927246094</span></span><br><span class="line">-------开始第<span class="number">17</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">686.6292114257812</span></span><br><span class="line">测试集上的损失为:<span class="number">172.45094299316406</span></span><br><span class="line">测试集上的准确率为:<span class="number">39.8216552734375</span></span><br><span class="line">-------开始第<span class="number">18</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">667.0374755859375</span></span><br><span class="line">测试集上的损失为:<span class="number">172.76763916015625</span></span><br><span class="line">测试集上的准确率为:<span class="number">39.77070236206055</span></span><br><span class="line">-------开始第<span class="number">19</span>轮训练，总共<span class="number">20</span>轮-------</span><br><span class="line">训练集上的损失为:<span class="number">648.382568359375</span></span><br><span class="line">测试集上的损失为:<span class="number">172.2664794921875</span></span><br><span class="line">测试集上的准确率为:<span class="number">40.08917236328125</span></span><br><span class="line">训练完成！</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>tensorboard可视化：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689238509115-0eb7073a-bc9c-4333-b22d-8c674d09c432.png#averageHue=%23fcfcfc&clientId=uca85b293-4788-4&from=paste&height=388&id=uddd68540&originHeight=544&originWidth=560&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=23107&status=done&style=none&taskId=ub70402f9-10c0-4458-a03d-34faf75fdea&title=&width=399.5540827128461" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689238523784-1f4d46eb-5929-4b91-9a9c-ed1c079bbb44.png#averageHue=%23fcfcfc&clientId=uca85b293-4788-4&from=paste&height=362&id=uc4cfe88b&originHeight=507&originWidth=580&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=20010&status=done&style=none&taskId=ub403e638-48c1-4550-860a-89e8f8913c3&title=&width=413.823871381162" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689238532237-a56e0ff2-e665-4dfb-99ff-a1d3efd71532.png#averageHue=%23fcfcfc&clientId=uca85b293-4788-4&from=paste&height=396&id=uc175d01e&originHeight=555&originWidth=572&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=21564&status=done&style=none&taskId=u51fb7012-819b-4da9-b380-10be4a69d5b&title=&width=408.11595591383565" alt="image.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.模型保存和加载</title>
      <link href="/2023/08/20/11-%E6%A8%A1%E5%9E%8B%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD/"/>
      <url>/2023/08/20/11-%E6%A8%A1%E5%9E%8B%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>模型保存和加载有两套方法，分别为<br>方法一</p><ol><li>torch.save(vgg16,”vgg_1.pth”) 直接保存模型结构和模型参数，内存占用比较大</li><li>model &#x3D; torch.load(“vgg_1.pth”)</li></ol><p>方法二</p><ol><li>torch.save(vgg16.state_dict(),”vgg_2.pth”) 以键值对的形式只保存模型参数，节省内存</li><li>vgg16.load_state_dict(torch.load(“vgg_2.pth”)) #加载时需要先知道模型结构，再和模型参数匹配</li></ol><h1 id="一、以vgg模型保存和加载为例"><a href="#一、以vgg模型保存和加载为例" class="headerlink" title="一、以vgg模型保存和加载为例"></a>一、以vgg模型保存和加载为例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：model_save.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/13 13:19 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型保存方式1 保存模型结构+模型参数</span></span><br><span class="line">torch.save(vgg16,<span class="string">&quot;vgg_1.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型保存方式2 以字典的形式保存模型参数</span></span><br><span class="line">torch.save(vgg16.state_dict(),<span class="string">&quot;vgg_2.pth&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：model_load.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/13 13:30 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一种方式保存模型时，加载模型</span></span><br><span class="line"><span class="string">model = torch.load(&quot;vgg_1.pth&quot;)</span></span><br><span class="line"><span class="string">print(model)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式保存模型时，加载模型</span></span><br><span class="line"><span class="comment"># 首先要获取模型结构</span></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 讲模型结构和读取的键值对型的模型参数匹配在一起</span></span><br><span class="line">vgg16.load_state_dict(torch.load(<span class="string">&quot;vgg_2.pth&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(vgg16)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、以自己定义的模型保存和加载为例"><a href="#二、以自己定义的模型保存和加载为例" class="headerlink" title="二、以自己定义的模型保存和加载为例"></a>二、以自己定义的模型保存和加载为例</h1><p>为方便管理，将自己的模型单独放置在一个文件中，其他地方需要时，只需要导入即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：Mymodel.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/13 13:24 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader,Dataset</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Module,Conv2d,MaxPool2d,Sequential,Flatten,Linear</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModule</span>(<span class="title class_ inherited__">Module</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModule, self).__init__()</span><br><span class="line">        self.model = Sequential(</span><br><span class="line">        Conv2d(<span class="number">3</span>,<span class="number">32</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Conv2d(<span class="number">32</span>,<span class="number">32</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Conv2d(<span class="number">32</span>,<span class="number">64</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Flatten(),</span><br><span class="line">        Linear(<span class="number">1024</span>,<span class="number">64</span>),</span><br><span class="line">        Linear(<span class="number">64</span>,<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.model(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：model_save_my_model.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/13 13:23 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> Mymodel <span class="keyword">import</span> MyModule</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = MyModule()</span><br><span class="line"><span class="comment"># 第一种方式保存</span></span><br><span class="line">torch.save(model,<span class="string">&quot;model1.pth&quot;</span>)</span><br><span class="line"><span class="comment"># 第二种方式保存</span></span><br><span class="line">torch.save(model.state_dict(),<span class="string">&quot;model2.pth&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;保存完毕&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：model_load_my_model.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/13 13:50 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> Mymodel <span class="keyword">import</span> *</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一种方式加载模型</span></span><br><span class="line"><span class="string">model = torch.load(&quot;model1.pth&quot;)</span></span><br><span class="line"><span class="string">print(model)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式加载模型</span></span><br><span class="line">model = MyModule()</span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&quot;model2.pth&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">D:\anaconda\envs\Gpu-Pytorch\python.exe D:/Pytorch_learn/model_load_my_model.py</span><br><span class="line">D:\anaconda\envs\Gpu-Pytorch\lib\site-packages\torchvision\io\image.py:<span class="number">11</span>: UserWarning: Failed to load image Python extension: Could <span class="keyword">not</span> find module <span class="string">&#x27;D:\anaconda\envs\Gpu-Pytorch\Lib\site-packages\torchvision\image.pyd&#x27;</span> (<span class="keyword">or</span> one of its dependencies). Try using the full path <span class="keyword">with</span> constructor syntax.</span><br><span class="line">  warn(<span class="string">f&quot;Failed to load image Python extension: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">MyModule(</span><br><span class="line">  (model): Sequential(</span><br><span class="line">    (<span class="number">0</span>): Conv2d(<span class="number">3</span>, <span class="number">32</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">    (<span class="number">1</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">2</span>): Conv2d(<span class="number">32</span>, <span class="number">32</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">    (<span class="number">3</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">4</span>): Conv2d(<span class="number">32</span>, <span class="number">64</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">    (<span class="number">5</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">6</span>): Flatten(start_dim=<span class="number">1</span>, end_dim=-<span class="number">1</span>)</span><br><span class="line">    (<span class="number">7</span>): Linear(in_features=<span class="number">1024</span>, out_features=<span class="number">64</span>, bias=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">8</span>): Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加载自己的模型时，要从文件中提前导入自己的模型类，并进行实例化。</p>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.现有模型使用和修改</title>
      <link href="/2023/08/20/10-%E7%8E%B0%E6%9C%89%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BF%AE%E6%94%B9/"/>
      <url>/2023/08/20/10-%E7%8E%B0%E6%9C%89%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>首先加载模型结构，可以设置pretrained参数设置成是否是在特定数据集上训练好的预训练模型。<br>通过add_module添加模型结构<br>可以根据索引去修改模型结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：vgg16.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/13 12:53 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear</span><br><span class="line"></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">True</span>)  <span class="comment"># 设置成True即代表是在ImageNet上训练好的预训练模型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加模型结构</span></span><br><span class="line">vgg16.classifier.add_module(<span class="string">&quot;7&quot;</span>,Linear(<span class="number">1000</span>,<span class="number">10</span>))</span><br><span class="line"><span class="comment"># print(vgg16)</span></span><br><span class="line"><span class="comment"># 修改现在的模型结构</span></span><br><span class="line">vgg16.classifier[<span class="number">0</span>] = Linear(<span class="number">25088</span>,<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">VGG(</span><br><span class="line">  (features): Sequential(</span><br><span class="line">    (<span class="number">0</span>): Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">1</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">2</span>): Conv2d(<span class="number">64</span>, <span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">3</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">4</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">5</span>): Conv2d(<span class="number">64</span>, <span class="number">128</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">6</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">7</span>): Conv2d(<span class="number">128</span>, <span class="number">128</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">8</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">9</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">10</span>): Conv2d(<span class="number">128</span>, <span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">11</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">12</span>): Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">13</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">14</span>): Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">15</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">16</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">17</span>): Conv2d(<span class="number">256</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">18</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">19</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">20</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">21</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">22</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">23</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">24</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">25</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">26</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">27</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">28</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">29</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">30</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">  )</span><br><span class="line">  (avgpool): AdaptiveAvgPool2d(output_size=(<span class="number">7</span>, <span class="number">7</span>))</span><br><span class="line">  (classifier): Sequential(</span><br><span class="line">    (<span class="number">0</span>): Linear(in_features=<span class="number">25088</span>, out_features=<span class="number">4096</span>, bias=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">1</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">2</span>): Dropout(p=<span class="number">0.5</span>, inplace=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">3</span>): Linear(in_features=<span class="number">4096</span>, out_features=<span class="number">4096</span>, bias=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">4</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">5</span>): Dropout(p=<span class="number">0.5</span>, inplace=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">6</span>): Linear(in_features=<span class="number">4096</span>, out_features=<span class="number">1000</span>, bias=<span class="literal">True</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">D:\anaconda\envs\Gpu-Pytorch\python.exe D:/Pytorch_learn/vgg16.py</span><br><span class="line">D:\anaconda\envs\Gpu-Pytorch\lib\site-packages\torchvision\io\image.py:<span class="number">11</span>: UserWarning: Failed to load image Python extension: Could <span class="keyword">not</span> find module <span class="string">&#x27;D:\anaconda\envs\Gpu-Pytorch\Lib\site-packages\torchvision\image.pyd&#x27;</span> (<span class="keyword">or</span> one of its dependencies). Try using the full path <span class="keyword">with</span> constructor syntax.</span><br><span class="line">  warn(<span class="string">f&quot;Failed to load image Python extension: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">VGG(</span><br><span class="line">  (features): Sequential(</span><br><span class="line">    (<span class="number">0</span>): Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">1</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">2</span>): Conv2d(<span class="number">64</span>, <span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">3</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">4</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">5</span>): Conv2d(<span class="number">64</span>, <span class="number">128</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">6</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">7</span>): Conv2d(<span class="number">128</span>, <span class="number">128</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">8</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">9</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">10</span>): Conv2d(<span class="number">128</span>, <span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">11</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">12</span>): Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">13</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">14</span>): Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">15</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">16</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">17</span>): Conv2d(<span class="number">256</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">18</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">19</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">20</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">21</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">22</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">23</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">24</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">25</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">26</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">27</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">28</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">29</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">30</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">  )</span><br><span class="line">  (avgpool): AdaptiveAvgPool2d(output_size=(<span class="number">7</span>, <span class="number">7</span>))</span><br><span class="line">  (classifier): Sequential(</span><br><span class="line">    (<span class="number">0</span>): Linear(in_features=<span class="number">25088</span>, out_features=<span class="number">4096</span>, bias=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">1</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">2</span>): Dropout(p=<span class="number">0.5</span>, inplace=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">3</span>): Linear(in_features=<span class="number">4096</span>, out_features=<span class="number">4096</span>, bias=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">4</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">5</span>): Dropout(p=<span class="number">0.5</span>, inplace=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">6</span>): Linear(in_features=<span class="number">4096</span>, out_features=<span class="number">1000</span>, bias=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">7</span>): Linear(in_features=<span class="number">1000</span>, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">VGG(</span><br><span class="line">  (features): Sequential(</span><br><span class="line">    (<span class="number">0</span>): Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">1</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">2</span>): Conv2d(<span class="number">64</span>, <span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">3</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">4</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">5</span>): Conv2d(<span class="number">64</span>, <span class="number">128</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">6</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">7</span>): Conv2d(<span class="number">128</span>, <span class="number">128</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">8</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">9</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">10</span>): Conv2d(<span class="number">128</span>, <span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">11</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">12</span>): Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">13</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">14</span>): Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">15</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">16</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">17</span>): Conv2d(<span class="number">256</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">18</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">19</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">20</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">21</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">22</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">23</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">24</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">25</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">26</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">27</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">28</span>): Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    (<span class="number">29</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">30</span>): MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line">  )</span><br><span class="line">  (avgpool): AdaptiveAvgPool2d(output_size=(<span class="number">7</span>, <span class="number">7</span>))</span><br><span class="line">  (classifier): Sequential(</span><br><span class="line">    (<span class="number">0</span>): Linear(in_features=<span class="number">25088</span>, out_features=<span class="number">1000</span>, bias=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">1</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">2</span>): Dropout(p=<span class="number">0.5</span>, inplace=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">3</span>): Linear(in_features=<span class="number">4096</span>, out_features=<span class="number">4096</span>, bias=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">4</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">5</span>): Dropout(p=<span class="number">0.5</span>, inplace=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">6</span>): Linear(in_features=<span class="number">4096</span>, out_features=<span class="number">1000</span>, bias=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">7</span>): Linear(in_features=<span class="number">1000</span>, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.损失函数负反馈与优化器</title>
      <link href="/2023/08/20/9-%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E8%B4%9F%E5%8F%8D%E9%A6%88%E4%B8%8E%E4%BC%98%E5%8C%96%E5%99%A8/"/>
      <url>/2023/08/20/9-%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E8%B4%9F%E5%8F%8D%E9%A6%88%E4%B8%8E%E4%BC%98%E5%8C%96%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h1><ul><li>计算实际输出与目标之间的差距</li><li>为我们更新输出提供一定的依据（反向传播）</li></ul><h2 id="CROSSENTROPYLOSS（交叉熵）"><a href="#CROSSENTROPYLOSS（交叉熵）" class="headerlink" title="CROSSENTROPYLOSS（交叉熵）"></a>CROSSENTROPYLOSS（交叉熵）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLASStorch.nn.CrossEntropyLoss(weight=<span class="literal">None</span>, size_average=<span class="literal">None</span>, ignore_index=- <span class="number">100</span>, reduce=<span class="literal">None</span>, reduction=<span class="string">&#x27;mean&#x27;</span>, label_smoothing=<span class="number">0.0</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>weight (</strong><a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor">Tensor</a><strong><em>,</em>_ _<em>optional</em>) – a manual rescaling weight given to each class. If given, has to be a Tensor of size C</strong></li><li><strong>size_average (</strong><a href="https://docs.python.org/3/library/functions.html#bool">bool</a><strong><em>,</em>_ _<em>optional</em>) – Deprecated (see reduction). By default, the losses are averaged over each loss element in the batch. Note that for some losses, there are multiple elements per sample. If the field size_average is set to False, the losses are instead summed for each minibatch. Ignored when reduce is False. Default: True</strong></li><li><strong>ignore_index (</strong><a href="https://docs.python.org/3/library/functions.html#int">int</a><strong><em>,</em>_ _<em>optional</em>) – Specifies a target value that is ignored and does not contribute to the input gradient. When size_average is True, the loss is averaged over non-ignored targets. Note that ignore_index is only applicable when the target contains class indices.</strong></li><li><strong>reduce (</strong><a href="https://docs.python.org/3/library/functions.html#bool">bool</a><strong><em>,</em>_ _<em>optional</em>) – Deprecated (see reduction). By default, the losses are averaged or summed over observations for each minibatch depending on size_average. When reduce is False, returns a loss per batch element instead and ignores size_average. Default: True</strong></li><li><strong>reduction (</strong><a href="https://docs.python.org/3/library/stdtypes.html#str">str</a><strong><em>,</em>_ _<em>optional</em>) – Specifies the reduction to apply to the output: ‘none’ | ‘mean’ | ‘sum’. ‘none’: no reduction will be applied, ‘mean’: the weighted mean of the output is taken, ‘sum’: the output will be summed. Note: size_average and reduce are in the process of being deprecated, and in the meantime, specifying either of those two args will override reduction. Default: ‘mean’</strong></li><li><strong>label_smoothing (</strong><a href="https://docs.python.org/3/library/functions.html#float">float</a><strong><em>, optional</em>) – A float in [0.0, 1.0]. Specifies the amount of smoothing when computing the loss, where 0.0 means no smoothing. The targets become a mixture of the original ground truth and a uniform distribution as described in <strong><a href="https://arxiv.org/abs/1512.00567">Rethinking the Inception Architecture for Computer Vision</a></strong>. Default: 0.00.0.</strong></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689211175565-2d46a1a1-9b95-4d91-b78b-b5cc7ad1444b.png#averageHue=%23f9f9f9&clientId=u803ecfee-1f5f-4&from=paste&height=495&id=ufb7edac8&originHeight=694&originWidth=1283&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=260176&status=done&style=none&taskId=u23e1dd0d-1c6e-4d86-8d24-ca9c26144d2&title=&width=915.406943072467" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689212929398-69aba419-49a3-4809-b44b-8cd5c95088e7.png#averageHue=%23faf8f6&clientId=u803ecfee-1f5f-4&from=paste&height=316&id=u91ab8bbd&originHeight=443&originWidth=911&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=58091&status=done&style=none&taskId=u073183ea-0872-46d6-a81a-112f00869e5&title=&width=649.9888738417907" alt="image.png"></p><h1 id="MSELOSS（平方差）"><a href="#MSELOSS（平方差）" class="headerlink" title="MSELOSS（平方差）"></a>MSELOSS（平方差）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.MSELoss(size_average=<span class="literal">None</span>, reduce=<span class="literal">None</span>, reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>size_average (</strong><a href="https://docs.python.org/3/library/functions.html#bool">bool</a><strong><em>,</em>_ _<em>optional</em>) – Deprecated (see reduction). By default, the losses are averaged over each loss element in the batch. Note that for some losses, there are multiple elements per sample. If the field size_average is set to False, the losses are instead summed for each minibatch. Ignored when reduce is False. Default: True</strong></li><li><strong>reduce (</strong><a href="https://docs.python.org/3/library/functions.html#bool">bool</a><strong><em>,</em>_ _<em>optional</em>) – Deprecated (see reduction). By default, the losses are averaged or summed over observations for each minibatch depending on size_average. When reduce is False, returns a loss per batch element instead and ignores size_average. Default: True</strong></li><li><strong>reduction (</strong><a href="https://docs.python.org/3/library/stdtypes.html#str">str</a><strong><em>, optional</em>) – Specifies the reduction to apply to the output: ‘none’ | ‘mean’ | ‘sum’. ‘none’: no reduction will be applied, ‘mean’: the sum of the output will be divided by the number of elements in the output, ‘sum’: the output will be summed. Note: size_average and reduce are in the process of being deprecated, and in the meantime, specifying either of those two args will override reduction. Default: ‘mean’</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：loss.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/5 18:33 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss,MSELoss,CrossEntropyLoss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.Tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">target = torch.Tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># L1loss</span></span><br><span class="line">loss = L1Loss() <span class="comment"># reduction=&quot;sum&quot;</span></span><br><span class="line">output = loss(<span class="built_in">input</span>,target)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># MSELoss 平方差损失</span></span><br><span class="line">loss_msl = MSELoss(reduction=<span class="string">&quot;sum&quot;</span>)</span><br><span class="line">output = loss_msl(<span class="built_in">input</span>,target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CROSSENTROPYLOSS</span></span><br><span class="line">crossentropyloss = CrossEntropyLoss()</span><br><span class="line">output = CrossEntropyLoss(<span class="built_in">input</span>,target)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure></li></ul><h1 id="负反馈"><a href="#负反馈" class="headerlink" title="负反馈"></a>负反馈</h1><p>主要是计算梯度，然后方便下面的优化器进行下一步的更新。<br>loss.backward()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：loss_backward.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/13 9:29 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Linear, Flatten, Module</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;CIFAR10&quot;</span>,train=<span class="literal">True</span>,transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                       download=<span class="literal">True</span>)</span><br><span class="line">dataloader = DataLoader(dataset=dataset,batch_size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数</span></span><br><span class="line">loss = torch.nn.CrossEntropyLoss()</span><br><span class="line"><span class="comment"># 定义网络</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModule</span>(<span class="title class_ inherited__">Module</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModule, self).__init__()</span><br><span class="line">        self.model = Sequential(</span><br><span class="line">        Conv2d(<span class="number">3</span>,<span class="number">32</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Conv2d(<span class="number">32</span>,<span class="number">32</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Conv2d(<span class="number">32</span>,<span class="number">64</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Flatten(),</span><br><span class="line">        Linear(<span class="number">1024</span>,<span class="number">64</span>),</span><br><span class="line">        Linear(<span class="number">64</span>,<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.model(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">model = MyModule()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">    img,label = data</span><br><span class="line">    result = model(img)</span><br><span class="line">    result = result.reshape((<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">    <span class="comment"># 打印result和label看信息</span></span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    <span class="comment"># print(label)</span></span><br><span class="line">    <span class="comment"># tensor([[ 0.0937,  0.0191,  0.0275, -0.0915, -0.0129,  0.1434,  0.1817,  0.0104,</span></span><br><span class="line">    <span class="comment">#          -0.0251, -0.0779]], grad_fn=&lt;AddmmBackward0&gt;)</span></span><br><span class="line">    <span class="comment"># tensor([2])</span></span><br><span class="line">    loss_result = loss(result,label)</span><br><span class="line">    <span class="comment"># print(&quot;loss_result:&quot;,loss_result)</span></span><br><span class="line">    loss_result.backward()</span><br><span class="line">    <span class="comment"># print(&quot;loss_result_1:&quot;,loss_result)</span></span><br><span class="line">    <span class="comment"># loss_result: tensor(2.1570, grad_fn= &lt; NllLossBackward0 &gt;)</span></span><br><span class="line">    <span class="comment"># loss_result_1: tensor(2.1570, grad_fn= &lt; NllLossBackward0 &gt;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h1><p>有多种优化器，其实本质就是一种参数更新的算法。<br>主要就是三步</p><ul><li>optim.zero_grad()  # 梯度全部变成0</li><li>loss_result.backward()</li><li>optim.step()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：optim.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/13 10:20 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Linear, Flatten, Module</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;CIFAR10&quot;</span>,train=<span class="literal">False</span>,transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                       download=<span class="literal">True</span>)</span><br><span class="line">dataloader = DataLoader(dataset=dataset,batch_size=<span class="number">64</span>)</span><br><span class="line"><span class="comment"># 定义网络</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModule</span>(<span class="title class_ inherited__">Module</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModule, self).__init__()</span><br><span class="line">        self.model = Sequential(</span><br><span class="line">        Conv2d(<span class="number">3</span>,<span class="number">32</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Conv2d(<span class="number">32</span>,<span class="number">32</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Conv2d(<span class="number">32</span>,<span class="number">64</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Flatten(),</span><br><span class="line">        Linear(<span class="number">1024</span>,<span class="number">64</span>),</span><br><span class="line">        Linear(<span class="number">64</span>,<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.model(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">model = MyModule()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数</span></span><br><span class="line">loss = torch.nn.CrossEntropyLoss()</span><br><span class="line"><span class="comment"># 定义参数更新方式</span></span><br><span class="line">optim = torch.optim.SGD(model.parameters(),lr=<span class="number">0.01</span>)</span><br><span class="line">write = SummaryWriter(<span class="string">&quot;log_5&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    run_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">        img,label = data</span><br><span class="line">        result = model(img)</span><br><span class="line">        <span class="comment"># result = result.reshape((64,10))</span></span><br><span class="line">        loss_result = loss(result,label)</span><br><span class="line">        optim.zero_grad()  <span class="comment"># 梯度全部变成0</span></span><br><span class="line">        loss_result.backward()</span><br><span class="line">        optim.step()</span><br><span class="line">        run_loss += loss_result</span><br><span class="line">    <span class="built_in">print</span>(run_loss)</span><br><span class="line">    write.add_scalar(<span class="string">&quot;loss change&quot;</span>,run_loss,epoch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OK!&quot;</span>)</span><br><span class="line">write.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>用的tensorboard可视化损失：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Files already downloaded <span class="keyword">and</span> verified</span><br><span class="line">tensor(<span class="number">359.8933</span>, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">tensor(<span class="number">353.3619</span>, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">tensor(<span class="number">329.9563</span>, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">tensor(<span class="number">313.8071</span>, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">tensor(<span class="number">304.5399</span>, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">tensor(<span class="number">295.0195</span>, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">tensor(<span class="number">287.4640</span>, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">tensor(<span class="number">280.7477</span>, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">tensor(<span class="number">274.6153</span>, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">tensor(<span class="number">269.1077</span>, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">OK!</span><br></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689222880746-68213229-3a15-48d7-80ad-8380fa1df62f.png#averageHue=%23fbfbfb&clientId=u803ecfee-1f5f-4&from=paste&height=340&id=u56a7375a&originHeight=477&originWidth=578&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=25488&status=done&style=none&taskId=u5948ff94-8f7e-4d40-ac56-5e2caf4cdec&title=&width=412.39689251433043" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.Sequential与模型搭建实战</title>
      <link href="/2023/08/20/8-Sequential%E4%B8%8E%E6%A8%A1%E5%9E%8B%E6%90%AD%E5%BB%BA%E5%AE%9E%E6%88%98/"/>
      <url>/2023/08/20/8-Sequential%E4%B8%8E%E6%A8%A1%E5%9E%8B%E6%90%AD%E5%BB%BA%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688455452445-c4c58f14-2ba0-40d6-baab-b9302298d7d0.png#averageHue=%23dedede&clientId=u7ca3f253-01fa-4&from=paste&id=ucf2ca8fd&originHeight=375&originWidth=1343&originalType=url&ratio=1.5234375&rotation=0&showTitle=false&size=224151&status=done&style=none&taskId=u637e814d-f143-4ea2-b354-f2b6f0059ff&title=" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：Sequential与模型搭建实战.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/4 15:25 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader,Dataset</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Module,Conv2d,MaxPool2d,Sequential,Flatten,Linear</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;CIFAR10&quot;</span>,train=<span class="literal">True</span>,transform=transforms.ToTensor(),download=<span class="literal">True</span>)</span><br><span class="line">dataloader = DataLoader(dataset=dataset,batch_size=<span class="number">64</span>)</span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">普通定义</span></span><br><span class="line"><span class="string">class MyModule(Module):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        super(MyModule, self).__init__()</span></span><br><span class="line"><span class="string">        self.conv1 = Conv2d(3,32,5,padding=2)</span></span><br><span class="line"><span class="string">        self.maxpool1 =  MaxPool2d(2)</span></span><br><span class="line"><span class="string">        self.conv2 = Conv2d(32,32,5,padding=2)</span></span><br><span class="line"><span class="string">        self.maxpool2 = MaxPool2d(2)</span></span><br><span class="line"><span class="string">        self.conv3 = Conv2d(32,64,5,padding=2)</span></span><br><span class="line"><span class="string">        self.maxpool3 = MaxPool2d(2)</span></span><br><span class="line"><span class="string">        self.flatten = Flatten()</span></span><br><span class="line"><span class="string">        self.Linear1 = Linear(1024,64)</span></span><br><span class="line"><span class="string">        self.Linear2 = Linear(64,10)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def forward(self,x):</span></span><br><span class="line"><span class="string">        x = self.conv1(x)</span></span><br><span class="line"><span class="string">        x = self.maxpool1(x)</span></span><br><span class="line"><span class="string">        x = self.conv2(x)</span></span><br><span class="line"><span class="string">        x = self.maxpool2(x)</span></span><br><span class="line"><span class="string">        x = self.conv3(x)</span></span><br><span class="line"><span class="string">        x = self.maxpool3(x)</span></span><br><span class="line"><span class="string">        x = self.flatten(x)</span></span><br><span class="line"><span class="string">        x = self.Linear1(x)</span></span><br><span class="line"><span class="string">        x = self.Linear2(x)</span></span><br><span class="line"><span class="string">        return x</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sequential定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModule</span>(<span class="title class_ inherited__">Module</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModule, self).__init__()</span><br><span class="line">        self.model = Sequential(</span><br><span class="line">        Conv2d(<span class="number">3</span>,<span class="number">32</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Conv2d(<span class="number">32</span>,<span class="number">32</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Conv2d(<span class="number">32</span>,<span class="number">64</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">        MaxPool2d(<span class="number">2</span>),</span><br><span class="line">        Flatten(),</span><br><span class="line">        Linear(<span class="number">1024</span>,<span class="number">64</span>),</span><br><span class="line">        Linear(<span class="number">64</span>,<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.model(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">model = MyModule()</span><br><span class="line"><span class="built_in">print</span>(model)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;log_4&quot;</span>)</span><br><span class="line"><span class="comment"># write.add_graph(model)</span></span><br><span class="line"><span class="comment"># input = torch.ones((64,3,32,32))</span></span><br><span class="line"><span class="comment"># write.add_graph(model,input)</span></span><br><span class="line"><span class="keyword">for</span> i,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">    image,label = data</span><br><span class="line">    <span class="built_in">print</span>(image.shape)</span><br><span class="line">    write.add_graph(model,image)</span><br><span class="line">    output = model(image)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br><span class="line">write.close()</span><br><span class="line"><span class="comment"># MyModule(</span></span><br><span class="line"><span class="comment">#   (model): Sequential(</span></span><br><span class="line"><span class="comment">#     (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span></span><br><span class="line"><span class="comment">#     (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span></span><br><span class="line"><span class="comment">#     (2): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span></span><br><span class="line"><span class="comment">#     (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span></span><br><span class="line"><span class="comment">#     (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span></span><br><span class="line"><span class="comment">#     (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span></span><br><span class="line"><span class="comment">#     (6): Flatten(start_dim=1, end_dim=-1)</span></span><br><span class="line"><span class="comment">#     (7): Linear(in_features=1024, out_features=64, bias=True)</span></span><br><span class="line"><span class="comment">#     (8): Linear(in_features=64, out_features=10, bias=True)</span></span><br><span class="line"><span class="comment">#   )</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688458476306-1fc29a1a-702f-4dbe-8dce-f55c9c5b1986.png#averageHue=%23f0eeee&clientId=u7ca3f253-01fa-4&from=paste&height=2141&id=u87116f92&originHeight=3262&originWidth=1950&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=321165&status=done&style=none&taskId=u6e34323b-12b4-4075-87ce-18f563ff5ac&title=&width=1280" alt="png.png"></p>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.神经网络</title>
      <link href="/2023/08/20/7-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/08/20/7-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Conv2d"><a href="#Conv2d" class="headerlink" title="Conv2d"></a>Conv2d</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=<span class="number">1</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, groups=<span class="number">1</span>, bias=<span class="literal">True</span>, padding_mode=<span class="string">&#x27;zeros&#x27;</span>, device=<span class="literal">None</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>in_channels (</strong><a href="https://docs.python.org/3/library/functions.html#int">int</a><strong>) – Number of channels in the input image</strong></li><li><strong>out_channels (</strong><a href="https://docs.python.org/3/library/functions.html#int">int</a><strong>) – Number of channels produced by the convolution</strong></li><li><strong>kernel_size (</strong><a href="https://docs.python.org/3/library/functions.html#int">int</a><strong>_ <strong>or</strong> _</strong><a href="https://docs.python.org/3/library/stdtypes.html#tuple">tuple</a><strong>) – Size of the convolving kernel</strong></li><li><strong>stride (</strong><a href="https://docs.python.org/3/library/functions.html#int">int</a><strong>_ or _</strong><a href="https://docs.python.org/3/library/stdtypes.html#tuple">tuple</a><strong><em>, optional</em>) – Stride of the convolution. Default: 1  # 步长</strong></li><li><strong>padding (</strong><a href="https://docs.python.org/3/library/functions.html#int">int</a><strong><em>,</em>_ _</strong><a href="https://docs.python.org/3/library/stdtypes.html#tuple">tuple</a><strong>_ <strong>or</strong> _</strong><a href="https://docs.python.org/3/library/stdtypes.html#str">str</a><strong><em>,</em>_ _<em>optional</em>) – Padding added to all four sides of the input. Default: 0</strong></li><li><strong>padding_mode (</strong><a href="https://docs.python.org/3/library/stdtypes.html#str">str</a><strong><em>,</em>_ _<em>optional</em>) – ‘zeros’, ‘reflect’, ‘replicate’ or ‘circular’. Default: ‘zeros’</strong></li><li><strong>dilation (</strong><a href="https://docs.python.org/3/library/functions.html#int">int</a><strong>_ or _</strong><a href="https://docs.python.org/3/library/stdtypes.html#tuple">tuple</a><strong><em>, optional</em>) – Spacing between kernel elements. Default: 1  #空洞卷积</strong></li><li><strong>groups (</strong><a href="https://docs.python.org/3/library/functions.html#int">int</a><strong><em>,</em>_ _<em>optional</em>) – Number of blocked connections from input channels to output channels. Default: 1</strong></li><li><strong>bias (</strong><a href="https://docs.python.org/3/library/functions.html#bool">bool</a><strong><em>, optional</em>) – If True, adds a learnable bias to the output. Default: True</strong></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688370102231-751b436d-1ff1-471a-a1f9-69df3d39a7c1.png#averageHue=%23cba376&clientId=uef395455-85f2-4&from=paste&height=521&id=u5a593d4d&originHeight=794&originWidth=1160&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=264007&status=done&style=none&taskId=u4d7f5d65-9457-4e69-8b63-7ef77881626&title=&width=761.4358974358975" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688370118339-755113e6-94a1-4adb-9407-bac8d1cd6ca9.png#averageHue=%23caa376&clientId=uef395455-85f2-4&from=paste&height=569&id=u8094dfe3&originHeight=867&originWidth=1472&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=294785&status=done&style=none&taskId=ucba69f46-9787-4c43-8f4a-8ff495af4f0&title=&width=966.2358974358974" alt="image.png"><br>in_channels与out_channels计算公式<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689582545743-cd304c8e-6652-4732-a27e-65b214cc8af8.png#averageHue=%23fbf8f6&clientId=u11cf2d30-1909-4&from=paste&height=225&id=u430da774&originHeight=315&originWidth=892&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=36862&status=done&style=none&taskId=ua0a945da-caa1-4ce2-9369-0884305c7e2&title=&width=636.4325746068905" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1689582611945-460abe4a-31b4-49b8-a8a9-0ccc9d005414.png#averageHue=%23fcfbfa&clientId=u11cf2d30-1909-4&from=paste&height=273&id=u5ed00617&originHeight=382&originWidth=805&originalType=binary&ratio=1.4015624523162842&rotation=0&showTitle=false&size=29644&status=done&style=none&taskId=u494ea59a-3050-4778-b363-79734eec140&title=&width=574.3589938997162" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：conv2d_and_pool.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/3 16:20 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Module</span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line">dataset = datasets.CIFAR10(<span class="string">&quot;CIFAR10&quot;</span>,train=<span class="literal">True</span>,transform=transforms.ToTensor(),download=<span class="literal">True</span>)</span><br><span class="line">dataloader = DataLoader(dataset=dataset,batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCNN</span>(<span class="title class_ inherited__">Module</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyCNN, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>,<span class="number">6</span>,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">CNN = MyCNN()</span><br><span class="line">write = SummaryWriter(<span class="string">&quot;log_3&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">    img,label = data</span><br><span class="line">    write.add_images(<span class="string">&quot;input&quot;</span>,img,i)</span><br><span class="line">    <span class="built_in">print</span>(img.shape)</span><br><span class="line"></span><br><span class="line">    output = CNN(img)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line">    output = torch.reshape(output,(-<span class="number">1</span>,<span class="number">3</span>,<span class="number">30</span>,<span class="number">30</span>))</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line">    write.add_images(<span class="string">&quot;output&quot;</span>,output,i)</span><br><span class="line"></span><br><span class="line">write.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688373712056-3ecb9249-6a87-4be6-bb0e-f1a1516c9e15.png#averageHue=%233cab3e&clientId=uef395455-85f2-4&from=paste&height=668&id=u35542230&originHeight=1017&originWidth=841&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=288571&status=done&style=none&taskId=u950c363c-b18b-4c28-97e0-b9efa1d52bc&title=&width=552.0410256410256" alt="image.png"></p><h1 id="MAXPOOL2D"><a href="#MAXPOOL2D" class="headerlink" title="MAXPOOL2D"></a>MAXPOOL2D</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.MaxPool2d(kernel_size, stride=<span class="literal">None</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, return_indices=<span class="literal">False</span>, ceil_mode=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>kernel_size (</strong><a href="https://docs.python.org/3/library/typing.html#typing.Union">Union</a><strong>_[_**<a href="https://docs.python.org/3/library/functions.html#int">int</a></strong><em>,</em>_ <em><strong><a href="https://docs.python.org/3/library/typing.html#typing.Tuple">Tuple</a></strong></em>[<em><strong><a href="https://docs.python.org/3/library/functions.html#int">int</a></strong></em>,__ <em><strong><a href="https://docs.python.org/3/library/functions.html#int">int</a></strong></em>]_<em>]</em>) – the size of the window to take a max over**</li><li><strong>stride (</strong><a href="https://docs.python.org/3/library/typing.html#typing.Union">Union</a><strong>_[_**<a href="https://docs.python.org/3/library/functions.html#int">int</a></strong><em>, <em><strong><a href="https://docs.python.org/3/library/typing.html#typing.Tuple">Tuple</a></strong></em>[_<strong><a href="https://docs.python.org/3/library/functions.html#int">int</a></strong></em>, <em><strong><a href="https://docs.python.org/3/library/functions.html#int">int</a></strong></em>]]_) – the stride of the window. Default value is kernel_size # 默认是kernel_size大小**</li><li><strong>padding (</strong><a href="https://docs.python.org/3/library/typing.html#typing.Union">Union</a><strong>_[_**<a href="https://docs.python.org/3/library/functions.html#int">int</a></strong><em>,</em>_ <em><strong><a href="https://docs.python.org/3/library/typing.html#typing.Tuple">Tuple</a></strong></em>[<em><strong><a href="https://docs.python.org/3/library/functions.html#int">int</a></strong></em>,__ <em><strong><a href="https://docs.python.org/3/library/functions.html#int">int</a></strong></em>]_<em>]</em>) – Implicit negative infinity padding to be added on both sides**</li><li><strong>dilation (</strong><a href="https://docs.python.org/3/library/typing.html#typing.Union">Union</a><strong>_[_**<a href="https://docs.python.org/3/library/functions.html#int">int</a></strong><em>,</em>_ <em><strong><a href="https://docs.python.org/3/library/typing.html#typing.Tuple">Tuple</a></strong></em>[<em><strong><a href="https://docs.python.org/3/library/functions.html#int">int</a></strong></em>,__ <em><strong><a href="https://docs.python.org/3/library/functions.html#int">int</a></strong></em>]_<em>]</em>) – a parameter that controls the stride of elements in the window**</li><li><strong>return_indices (</strong><a href="https://docs.python.org/3/library/functions.html#bool">bool</a><strong>) – if True, will return the max indices along with the outputs. Useful for <strong><a href="https://pytorch.org/docs/stable/generated/torch.nn.MaxUnpool2d.html#torch.nn.MaxUnpool2d">torch.nn.MaxUnpool2d</a></strong> later</strong></li><li><strong>ceil_mode (</strong><a href="https://docs.python.org/3/library/functions.html#bool">bool</a><strong>) – when True, will use ceil instead of floor to compute the output shape＃有点去1法和进1法的意思</strong></li></ul><p><strong>作用：保持特征，减少参数</strong><br>in_channel与out_channel计算关系<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688372309747-e09186c9-7e88-4245-a6bc-b31e6d64ab7d.png#averageHue=%23f3f2f1&clientId=uef395455-85f2-4&from=paste&height=312&id=ub34289c5&originHeight=476&originWidth=1048&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=57210&status=done&style=none&taskId=uf4eb2c0e-c606-430c-b5fc-38f9bc6d498&title=&width=687.9179487179487" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：conv2d_and_pool.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/3 16:20 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Module</span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line">dataset = datasets.CIFAR10(<span class="string">&quot;CIFAR10&quot;</span>,train=<span class="literal">True</span>,transform=transforms.ToTensor(),download=<span class="literal">True</span>)</span><br><span class="line">dataloader = DataLoader(dataset=dataset,batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCNN</span>(<span class="title class_ inherited__">Module</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyCNN, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>,<span class="number">6</span>,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">        self.pool2d = nn.MaxPool2d(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.pool2d(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">CNN = MyCNN()</span><br><span class="line">write = SummaryWriter(<span class="string">&quot;log_3&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">    img,label = data</span><br><span class="line">    write.add_images(<span class="string">&quot;input&quot;</span>,img,i)</span><br><span class="line">    <span class="built_in">print</span>(img.shape)</span><br><span class="line"></span><br><span class="line">    output = CNN(img)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line">    output = torch.reshape(output,(-<span class="number">1</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line">    write.add_images(<span class="string">&quot;output&quot;</span>,output,i)</span><br><span class="line"></span><br><span class="line">write.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688374183400-3dc782c6-4310-4d76-af49-969ab5849600.png#averageHue=%2344a442&clientId=uef395455-85f2-4&from=paste&height=661&id=u3715ebc3&originHeight=1007&originWidth=858&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=280111&status=done&style=none&taskId=u295be576-c1b7-4ad6-9b36-3446e8fe8c3&title=&width=563.2" alt="image.png"><br>自定义tensor，记得加上dtype&#x3D;torch.float32</p><h1 id="非线性激活函数"><a href="#非线性激活函数" class="headerlink" title="非线性激活函数"></a>非线性激活函数</h1><h2 id="RELU"><a href="#RELU" class="headerlink" title="RELU"></a>RELU</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688376252467-059920b4-d4f3-49bf-9a24-d83a8b3868e4.png#averageHue=%23fcfbfb&clientId=u0b238e3c-98d4-4&from=paste&height=727&id=u16ed43cf&originHeight=1108&originWidth=1099&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=112620&status=done&style=none&taskId=u77480dd1-23cd-43bd-a1fc-9df0bfb8fe8&title=&width=721.3948717948718" alt="image.png"></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：RELU.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/3 17:24 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> ReLU, Module</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModule</span>(<span class="title class_ inherited__">Module</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModule, self).__init__()</span><br><span class="line">        self.relu = ReLU(inplace=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tensor = torch.tensor([[<span class="number">1</span>,-<span class="number">1</span>],[<span class="number">0.5</span>,-<span class="number">0.5</span>]])</span><br><span class="line">model = MyModule()</span><br><span class="line">output = model(tensor)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">tensor([[1.0000, 0.0000],</span></span><br><span class="line"><span class="string">        [0.5000, 0.0000]])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="sigmoid"><a href="#sigmoid" class="headerlink" title="sigmoid"></a>sigmoid</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688376628068-b4d147cc-ce56-4d3c-9aa3-f77fd7af2846.png#averageHue=%23fcfbfb&clientId=u0b238e3c-98d4-4&from=paste&height=716&id=uf4b152bf&originHeight=1091&originWidth=1126&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=107994&status=done&style=none&taskId=u8da3603f-22a7-4ce4-a009-951a0f9603b&title=&width=739.1179487179487" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：Sigomid.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/3 17:30 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sigmoid, Module</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModule</span>(<span class="title class_ inherited__">Module</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModule, self).__init__()</span><br><span class="line">        self.sigmoid = Sigmoid()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.sigmoid(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tensor = torch.tensor([[<span class="number">1</span>,-<span class="number">1</span>],[<span class="number">0.5</span>,-<span class="number">0.5</span>]])</span><br><span class="line">model = MyModule()</span><br><span class="line">output = model(tensor)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">tensor([[0.7311, 0.2689],</span></span><br><span class="line"><span class="string">        [0.6225, 0.3775]])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>增强非线性变化，加强对特征的提取，减少过拟合，加强模型泛化能力。</p><h1 id="线性层"><a href="#线性层" class="headerlink" title="线性层"></a>线性层</h1><p>**<strong>torch.nn.Linear</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Linear(in_features, out_features, bias=<span class="literal">True</span>, device=<span class="literal">None</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688613798998-4c95b1be-1d1e-409b-8f7f-27b567bcf150.png#averageHue=%23faf8f7&clientId=u55e43857-1530-4&from=paste&height=104&id=u9ab4c1d9&originHeight=158&originWidth=884&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=22873&status=done&style=none&taskId=u7286b357-961d-4b3f-82c2-77622ba9092&title=&width=580.2666666666667" alt="image.png"></p><ul><li><strong>in_features (</strong><a href="https://docs.python.org/3/library/functions.html#int">int</a><strong>) – size of each input sample</strong></li><li><strong>out_features (</strong><a href="https://docs.python.org/3/library/functions.html#int">int</a><strong>) – size of each output sample</strong></li><li><strong>bias (</strong><a href="https://docs.python.org/3/library/functions.html#bool">bool</a><strong>) – If set to False, the layer will not learn an additive bias. Default: True</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.nn.module</title>
      <link href="/2023/08/20/6-nn-module/"/>
      <url>/2023/08/20/6-nn-module/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">20</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.relu(self.conv1(x))</span><br><span class="line">        <span class="keyword">return</span> F.relu(self.conv2(x))</span><br></pre></td></tr></table></figure><h2 id="最简单的神经网络"><a href="#最简单的神经网络" class="headerlink" title="最简单的神经网络"></a>最简单的神经网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：nn.module.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/2 16:19 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Module</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModule</span>(<span class="title class_ inherited__">Module</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># self.conv1 = nn.Conv2d(1, 20, 5)</span></span><br><span class="line">        <span class="comment"># self.conv2 = nn.Conv2d(20, 20, 5)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># x = F.relu(self.conv1(x))</span></span><br><span class="line">        <span class="keyword">return</span> x+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = torch.tensor(<span class="number">1</span>) <span class="comment">#创建一个tensor1</span></span><br><span class="line"></span><br><span class="line">model = MyModule() <span class="comment"># 实例化模型</span></span><br><span class="line"></span><br><span class="line">output = model(x) <span class="comment"># callback</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="comment"># print(modle.forward(x))</span></span><br></pre></td></tr></table></figure><h2 id="神经网络实战"><a href="#神经网络实战" class="headerlink" title="神经网络实战"></a>神经网络实战</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：nn.module.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/2 16:19 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Module</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModule</span>(<span class="title class_ inherited__">Module</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">20</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.relu(self.conv1(x))</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image_path = <span class="string">&quot;test.jpg&quot;</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(image_path).convert(<span class="string">&quot;L&quot;</span>)</span><br><span class="line">tran_tensor = transforms.ToTensor()</span><br><span class="line">image_tensor = tran_tensor(image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image_tensor = image_tensor.unsqueeze(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(image_tensor.shape)</span><br><span class="line">model = MyModule() <span class="comment"># 实例化模型</span></span><br><span class="line"></span><br><span class="line">output = model(image_tensor) <span class="comment"># callback</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="comment"># print(modle.forward(x))</span></span><br></pre></td></tr></table></figure><ul><li>unsqueeze(0)可以添加维度，其中0为维度的索引</li><li>也可以用一个torch.reshape(-1,3,28,28）去改变大小，-1表示让他自己计算。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Transforms</title>
      <link href="/2023/08/20/5-Transforms/"/>
      <url>/2023/08/20/5-Transforms/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>question?</p><ul><li>为什么要使用transform？</li><li>怎么使用transform？</li></ul><h1 id="question1"><a href="#question1" class="headerlink" title="question1"></a>question1</h1><p>加快运算，使用GPU运算，加快计算速度！</p><h1 id="question2"><a href="#question2" class="headerlink" title="question2"></a>question2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：transform_1.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/6/29 18:16 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image_path = <span class="string">&quot;data\\train\\ants_image\\5650366_e22b7e1065.jpg&quot;</span></span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">transform_tool = transforms.ToTensor()  <span class="comment"># 创建一个transform工具</span></span><br><span class="line">image_tensor = transform_tool(image)</span><br><span class="line"><span class="built_in">print</span>(image_tensor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># tensor([[[0.3804, 0.3804, 0.3843,  ..., 0.3412, 0.3373, 0.3333],</span></span><br><span class="line"><span class="comment">#          [0.3765, 0.3804, 0.3843,  ..., 0.3529, 0.3490, 0.3451],</span></span><br><span class="line"><span class="comment">#          [0.3804, 0.3804, 0.3843,  ..., 0.3725, 0.3686, 0.3647],</span></span><br><span class="line"><span class="comment">#          ...,</span></span><br><span class="line"><span class="comment">#          [0.6078, 0.6078, 0.6118,  ..., 0.4627, 0.4627, 0.4627],</span></span><br><span class="line"><span class="comment">#          [0.5882, 0.5922, 0.5922,  ..., 0.4588, 0.4588, 0.4588],</span></span><br><span class="line"><span class="comment">#          [0.5804, 0.5804, 0.5843,  ..., 0.4549, 0.4549, 0.4549]],</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#         [[0.4667, 0.4667, 0.4706,  ..., 0.4039, 0.4000, 0.3961],</span></span><br><span class="line"><span class="comment">#          [0.4706, 0.4667, 0.4706,  ..., 0.3922, 0.3882, 0.3843],</span></span><br><span class="line"><span class="comment">#          [0.4745, 0.4745, 0.4784,  ..., 0.3804, 0.3765, 0.3725],</span></span><br><span class="line"><span class="comment">#          ...,</span></span><br><span class="line"><span class="comment">#          [0.5961, 0.5961, 0.6000,  ..., 0.4588, 0.4588, 0.4588],</span></span><br><span class="line"><span class="comment">#          [0.5882, 0.5922, 0.5922,  ..., 0.4549, 0.4549, 0.4549],</span></span><br><span class="line"><span class="comment">#          [0.5804, 0.5804, 0.5804,  ..., 0.4510, 0.4510, 0.4510]],</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#         [[0.4157, 0.4157, 0.4196,  ..., 0.3608, 0.3569, 0.3529],</span></span><br><span class="line"><span class="comment">#          [0.4196, 0.4157, 0.4196,  ..., 0.3569, 0.3529, 0.3490],</span></span><br><span class="line"><span class="comment">#          [0.4235, 0.4235, 0.4235,  ..., 0.3608, 0.3569, 0.3529],</span></span><br><span class="line"><span class="comment">#          ...,</span></span><br><span class="line"><span class="comment">#          [0.5608, 0.5608, 0.5647,  ..., 0.4392, 0.4392, 0.4392],</span></span><br><span class="line"><span class="comment">#          [0.5412, 0.5529, 0.5608,  ..., 0.4353, 0.4353, 0.4353],</span></span><br><span class="line"><span class="comment">#          [0.5333, 0.5412, 0.5608,  ..., 0.4314, 0.4314, 0.4314]]])</span></span><br></pre></td></tr></table></figure><p>transform其实就是一个工具箱，我们可以用transform提供的工具制造我们自己的工具。</p><h1 id="常见的transform"><a href="#常见的transform" class="headerlink" title="常见的transform"></a>常见的transform</h1><h2 id="1-tosensor"><a href="#1-tosensor" class="headerlink" title="1.tosensor"></a>1.tosensor</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image_path = <span class="string">&quot;test.jpg&quot;</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># totensor</span></span><br><span class="line">tran_tensor = transforms.ToTensor()</span><br><span class="line">image_tensor = tran_tensor(image)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(image))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(image_tensor))</span><br></pre></td></tr></table></figure><p>将opencv读取的numpy对象，PIL读入的Image对象转成tensor对象。</p><h2 id="2-normalize"><a href="#2-normalize" class="headerlink" title="2.normalize"></a>2.normalize</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># normalize</span></span><br><span class="line">tran_norm = transforms.Normalize([<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>],[<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>])</span><br><span class="line">image_norm = tran_norm(image_tensor)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(image)</span><br><span class="line"><span class="built_in">print</span>(image_norm)</span><br></pre></td></tr></table></figure><p>标准化为了使数据具有相似的尺度和分布，以便更好地进行模型训练。通过规范化，可以减少数据之间的差异，提高模型的收敛速度和稳定性。</p><h2 id="3-compose"><a href="#3-compose" class="headerlink" title="3.compose"></a>3.compose</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#compose</span></span><br><span class="line"></span><br><span class="line">tran_com = transforms.Compose(</span><br><span class="line">    [tran_tensor,</span><br><span class="line">     tran_norm]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">image_compose = tran_com(image)</span><br><span class="line"><span class="built_in">print</span>(image)</span><br><span class="line"><span class="built_in">print</span>(image_compose)</span><br></pre></td></tr></table></figure><p>将不同的transform模块拼接起来，主要不同模块输入与输出，可以用ctrl+点击该函数进入，查看函数的输入输出类型。</p><h2 id="4-randomcrop"><a href="#4-randomcrop" class="headerlink" title="4.randomcrop"></a>4.randomcrop</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># randomcrop</span></span><br><span class="line"></span><br><span class="line">tran_crop = transforms.RandomCrop(<span class="number">512</span>)</span><br><span class="line">write = SummaryWriter(<span class="string">&quot;log_1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    image_crop = tran_crop(image_tensor)</span><br><span class="line">    write.add_image(<span class="string">&quot;change&quot;</span>, image_crop, i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensorboard --logdir=logs --port=6007</span></span><br><span class="line">write.close()</span><br></pre></td></tr></table></figure><p>随机剪裁图片，可以用tensorboard查看<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688283109877-7f6ce614-d4ab-4b94-b82a-84dfb86dd03a.png#averageHue=%23a8afa7&clientId=u020b4e0d-5170-4&from=paste&height=357&id=ue2d29a7d&originHeight=544&originWidth=650&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=107761&status=done&style=none&taskId=u45532af1-86b5-4e24-b8b7-b772268e054&title=&width=426.6666666666667" alt="image.png"></p><h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># resize</span></span><br><span class="line">tran_resize = transforms.Resize((<span class="number">512</span>,<span class="number">512</span>))</span><br><span class="line">image_resize = tran_resize(image_tensor)</span><br><span class="line"><span class="built_in">print</span>(image_tensor.shape)</span><br><span class="line"><span class="built_in">print</span>(image_resize.shape)</span><br><span class="line"><span class="comment"># return</span></span><br><span class="line"><span class="comment"># torch.Size([3, 512, 768])</span></span><br><span class="line"><span class="comment"># torch.Size([3, 512, 512])</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.TensorBoard</title>
      <link href="/2023/08/20/4-TensorBoard/"/>
      <url>/2023/08/20/4-TensorBoard/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>作用：用于展示某个值或者图像的变换过程</p><h2 id="用于展示值的变化"><a href="#用于展示值的变化" class="headerlink" title="用于展示值的变化"></a>用于展示值的变化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch学习 </span></span><br><span class="line"><span class="string">@File    ：tensorboard.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/6/29 15:59 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">from torch.utils.tensorboard.writer import SummaryWriter 报错</span></span><br><span class="line"><span class="string">解决方法:</span></span><br><span class="line"><span class="string">pip install  -i https://mirrors.aliyun.com/pypi/simple/ tensorboardX</span></span><br><span class="line"><span class="string">from tensorboardX import SummaryWriter</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="comment"># from torch.utils.tensorboard.writer import SummaryWriter</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="comment"># writer.add_image()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;y=2x&quot;</span>,<span class="number">2</span>*i,i)</span><br><span class="line">writer.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">开启指令：</span></span><br><span class="line"><span class="string">tensorboard --logdir=logs --port=6007 # port指定端口号，防止冲突  # 使用anaconda powershell 打开</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688027885696-517c997b-7cf1-4029-9136-e261490520a5.png#averageHue=%23deddad&clientId=u2a0bc918-fafe-4&from=paste&height=906&id=u72fab822&originHeight=1380&originWidth=2160&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=201652&status=done&style=none&taskId=udb6c123b-ee84-40f7-8128-a7942d5d736&title=&width=1417.8461538461538" alt="image.png"></p><h2 id="用于展示图像的变化"><a href="#用于展示图像的变化" class="headerlink" title="用于展示图像的变化"></a>用于展示图像的变化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch学习 </span></span><br><span class="line"><span class="string">@File    ：tensorboard_2.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/6/29 16:48 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;log&quot;</span>)</span><br><span class="line">image = cv2.imread(<span class="string">&quot;data\\train\\ants_image\\5650366_e22b7e1065.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># write.add_image(&quot;test&quot;,image,1,dataformats=&#x27;HWC&#x27;)</span></span><br><span class="line">write.add_image(<span class="string">&quot;test&quot;</span>,image,<span class="number">2</span>,dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line">write.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688032249682-9106d709-7655-49af-953c-5ff4390acb09.png#averageHue=%23eb9c55&clientId=u7be588cf-d23b-4&from=paste&height=303&id=u53e4ef85&originHeight=462&originWidth=473&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=127369&status=done&style=none&taskId=u8456c2ef-b9a8-4bb5-9bcd-940361502c8&title=&width=310.48205128205126" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688032259574-aa3590f0-3db4-4ebf-a335-ff9e8ccfb33c.png#averageHue=%23827e2e&clientId=u7be588cf-d23b-4&from=paste&height=326&id=uce621bca&originHeight=496&originWidth=555&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=136317&status=done&style=none&taskId=udda35877-4870-456b-aa47-b486ab3dfec&title=&width=364.3076923076923" alt="image.png"><br>上面有一个滑动条，可以拖动滑动条展示图片的变化过程，这个方法可以用在pytorch模型训练时，可视化出特征图的变化。<br>ps：奇怪的是用pycharm的终端和本地的终端tensorboard –logdir&#x3D;logs –port&#x3D;6007都进不去，anaconda powershell 能进去，而且本地的终端，社区版还有jupyter notebook的终端一运行就会跳转到专业版的pycharm，就很奇怪。没有报错，但是没有给连接地址，之后用tensorboard的话就用anaconda自带的终端进入。</p>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.dataset与datalodar</title>
      <link href="/2023/08/20/3-dataset%E4%B8%8Edatalodar/"/>
      <url>/2023/08/20/3-dataset%E4%B8%8Edatalodar/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="dataset"><a href="#dataset" class="headerlink" title="dataset"></a>dataset</h1><p>提供一种方式去获取数据及其label</p><ul><li><strong>如何获取每一个数据及其label</strong></li><li>告诉我们有多少数据</li></ul><h2 id="查看pytorch是否可以"><a href="#查看pytorch是否可以" class="headerlink" title="查看pytorch是否可以"></a>查看pytorch是否可以</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(torch.cuda.is_available()) <span class="comment"># 查看当前cuda是否可用</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="查看dataset"><a href="#查看dataset" class="headerlink" title="查看dataset"></a>查看dataset</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>(Dataset) <span class="comment"># 用帮助文档查看Dataset</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">Help on class Dataset in module torch.utils.data.dataset:</span><br><span class="line"></span><br><span class="line">class Dataset(typing.Generic)</span><br><span class="line"> |  Dataset(*args, **kwds)</span><br><span class="line"> |  </span><br><span class="line"> |  An abstract class representing a :class:`Dataset`.</span><br><span class="line"> |  </span><br><span class="line"> |  All datasets that represent a map from keys to data samples should subclass</span><br><span class="line"> |  it. All subclasses should overwrite :meth:`__getitem__`, supporting fetching a</span><br><span class="line"> |  data sample for a given key. Subclasses could also optionally overwrite</span><br><span class="line"> |  :meth:`__len__`, which is expected to return the size of the dataset by many</span><br><span class="line"> |  :class:`~torch.utils.data.Sampler` implementations and the default options</span><br><span class="line"> |  of :class:`~torch.utils.data.DataLoader`.</span><br><span class="line"> |  </span><br><span class="line"> |  .. note::</span><br><span class="line"> |    :class:`~torch.utils.data.DataLoader` by default constructs a index</span><br><span class="line"> |    sampler that yields integral indices.  To make it work with a map-style</span><br><span class="line"> |    dataset with non-integral indices/keys, a custom sampler must be provided.</span><br><span class="line"> |  </span><br><span class="line"> |  Method resolution order:</span><br><span class="line"> |      Dataset</span><br><span class="line"> |      typing.Generic</span><br><span class="line"> |      builtins.object</span><br><span class="line"> |  </span><br><span class="line"> |  Methods defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  __add__(self, other: &#x27;Dataset[T_co]&#x27;) -&gt; &#x27;ConcatDataset[T_co]&#x27;</span><br><span class="line"> |  </span><br><span class="line"> |  __getattr__(self, attribute_name)</span><br><span class="line"> |  </span><br><span class="line"> |  __getitem__(self, index) -&gt; +T_co</span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Class methods defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  register_datapipe_as_function(function_name, cls_to_register, enable_df_api_tracing=False) from builtins.type</span><br><span class="line"> |  </span><br><span class="line"> |  register_function(function_name, function) from builtins.type</span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data descriptors defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  __dict__</span><br><span class="line"> |      dictionary for instance variables (if defined)</span><br><span class="line"> |  </span><br><span class="line"> |  __weakref__</span><br><span class="line"> |      list of weak references to the object (if defined)</span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data and other attributes defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  __annotations__ = &#123;&#x27;functions&#x27;: typing.Dict[str, typing.Callable]&#125;</span><br><span class="line"> |  </span><br><span class="line"> |  __orig_bases__ = (typing.Generic[+T_co],)</span><br><span class="line"> |  </span><br><span class="line"> |  __parameters__ = (+T_co,)</span><br><span class="line"> |  </span><br><span class="line"> |  functions = &#123;&#x27;concat&#x27;: functools.partial(&lt;function Dataset.register_da...</span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Class methods inherited from typing.Generic:</span><br><span class="line"> |  </span><br><span class="line"> |  __class_getitem__(params) from builtins.type</span><br><span class="line"> |  </span><br><span class="line"> |  __init_subclass__(*args, **kwargs) from builtins.type</span><br><span class="line"> |      This method is called when a class is subclassed.</span><br><span class="line"> |      </span><br><span class="line"> |      The default implementation does nothing. It may be</span><br><span class="line"> |      overridden to extend subclasses.</span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Static methods inherited from typing.Generic:</span><br><span class="line"> |  </span><br><span class="line"> |  __new__(cls, *args, **kwds)</span><br><span class="line"> |      Create and return a new object.  See help(type) for accurate signature.</span><br></pre></td></tr></table></figure><h2 id="os操作读取文件夹下的对象"><a href="#os操作读取文件夹下的对象" class="headerlink" title="os操作读取文件夹下的对象"></a>os操作读取文件夹下的对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">dir_path = <span class="string">&quot;hymenoptera_data\\hymenoptera_data\\train\\ants&quot;</span>  <span class="comment"># 文件夹目录</span></span><br><span class="line">data_dir = os.listdir(dir_path)  <span class="comment"># 获取文件夹目录中的对象</span></span><br><span class="line">data_dir</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;0013035.jpg&#x27;,</span><br><span class="line"> &#x27;1030023514_aad5c608f9.jpg&#x27;,</span><br><span class="line"> &#x27;1095476100_3906d8afde.jpg&#x27;,</span><br><span class="line"> &#x27;1099452230_d1949d3250.jpg&#x27;,</span><br><span class="line"> &#x27;116570827_e9c126745d.jpg&#x27;,</span><br><span class="line"> &#x27;1225872729_6f0856588f.jpg&#x27;,</span><br><span class="line"> &#x27;1262877379_64fcada201.jpg&#x27;,</span><br><span class="line"> &#x27;1269756697_0bce92cdab.jpg&#x27;,</span><br><span class="line"> &#x27;1286984635_5119e80de1.jpg&#x27;,</span><br><span class="line"> &#x27;132478121_2a430adea2.jpg&#x27;,</span><br><span class="line"> &#x27;1360291657_dc248c5eea.jpg&#x27;,</span><br><span class="line"> &#x27;1368913450_e146e2fb6d.jpg&#x27;,</span><br><span class="line"> &#x27;1473187633_63ccaacea6.jpg&#x27;,</span><br><span class="line"> &#x27;148715752_302c84f5a4.jpg&#x27;,</span><br><span class="line"> &#x27;1489674356_09d48dde0a.jpg&#x27;,</span><br><span class="line"> &#x27;149244013_c529578289.jpg&#x27;,</span><br><span class="line"> &#x27;150801003_3390b73135.jpg&#x27;,</span><br><span class="line"> &#x27;150801171_cd86f17ed8.jpg&#x27;,</span><br><span class="line"> &#x27;154124431_65460430f2.jpg&#x27;,</span><br><span class="line"> &#x27;162603798_40b51f1654.jpg&#x27;,</span><br><span class="line"> &#x27;1660097129_384bf54490.jpg&#x27;,</span><br><span class="line"> &#x27;167890289_dd5ba923f3.jpg&#x27;,</span><br><span class="line"> &#x27;1693954099_46d4c20605.jpg&#x27;,</span><br><span class="line"> &#x27;175998972.jpg&#x27;,</span><br><span class="line"> &#x27;178538489_bec7649292.jpg&#x27;,</span><br><span class="line"> &#x27;1804095607_0341701e1c.jpg&#x27;,</span><br><span class="line"> &#x27;1808777855_2a895621d7.jpg&#x27;,</span><br><span class="line"> &#x27;188552436_605cc9b36b.jpg&#x27;,</span><br><span class="line"> &#x27;1917341202_d00a7f9af5.jpg&#x27;,</span><br><span class="line"> &#x27;1924473702_daa9aacdbe.jpg&#x27;,</span><br><span class="line"> &#x27;196057951_63bf063b92.jpg&#x27;,</span><br><span class="line"> &#x27;196757565_326437f5fe.jpg&#x27;,</span><br><span class="line"> &#x27;201558278_fe4caecc76.jpg&#x27;,</span><br><span class="line"> &#x27;201790779_527f4c0168.jpg&#x27;,</span><br><span class="line"> &#x27;2019439677_2db655d361.jpg&#x27;,</span><br><span class="line"> &#x27;207947948_3ab29d7207.jpg&#x27;,</span><br><span class="line"> &#x27;20935278_9190345f6b.jpg&#x27;,</span><br><span class="line"> &#x27;224655713_3956f7d39a.jpg&#x27;,</span><br><span class="line"> &#x27;2265824718_2c96f485da.jpg&#x27;,</span><br><span class="line"> &#x27;2265825502_fff99cfd2d.jpg&#x27;,</span><br><span class="line"> &#x27;226951206_d6bf946504.jpg&#x27;,</span><br><span class="line"> &#x27;2278278459_6b99605e50.jpg&#x27;,</span><br><span class="line"> &#x27;2288450226_a6e96e8fdf.jpg&#x27;,</span><br><span class="line"> &#x27;2288481644_83ff7e4572.jpg&#x27;,</span><br><span class="line"> &#x27;2292213964_ca51ce4bef.jpg&#x27;,</span><br><span class="line"> &#x27;24335309_c5ea483bb8.jpg&#x27;,</span><br><span class="line"> &#x27;245647475_9523dfd13e.jpg&#x27;,</span><br><span class="line"> &#x27;255434217_1b2b3fe0a4.jpg&#x27;,</span><br><span class="line"> &#x27;258217966_d9d90d18d3.jpg&#x27;,</span><br><span class="line"> &#x27;275429470_b2d7d9290b.jpg&#x27;,</span><br><span class="line"> &#x27;28847243_e79fe052cd.jpg&#x27;,</span><br><span class="line"> &#x27;318052216_84dff3f98a.jpg&#x27;,</span><br><span class="line"> &#x27;334167043_cbd1adaeb9.jpg&#x27;,</span><br><span class="line"> &#x27;339670531_94b75ae47a.jpg&#x27;,</span><br><span class="line"> &#x27;342438950_a3da61deab.jpg&#x27;,</span><br><span class="line"> &#x27;36439863_0bec9f554f.jpg&#x27;,</span><br><span class="line"> &#x27;374435068_7eee412ec4.jpg&#x27;,</span><br><span class="line"> &#x27;382971067_0bfd33afe0.jpg&#x27;,</span><br><span class="line"> &#x27;384191229_5779cf591b.jpg&#x27;,</span><br><span class="line"> &#x27;386190770_672743c9a7.jpg&#x27;,</span><br><span class="line"> &#x27;392382602_1b7bed32fa.jpg&#x27;,</span><br><span class="line"> &#x27;403746349_71384f5b58.jpg&#x27;,</span><br><span class="line"> &#x27;408393566_b5b694119b.jpg&#x27;,</span><br><span class="line"> &#x27;424119020_6d57481dab.jpg&#x27;,</span><br><span class="line"> &#x27;424873399_47658a91fb.jpg&#x27;,</span><br><span class="line"> &#x27;450057712_771b3bfc91.jpg&#x27;,</span><br><span class="line"> &#x27;45472593_bfd624f8dc.jpg&#x27;,</span><br><span class="line"> &#x27;459694881_ac657d3187.jpg&#x27;,</span><br><span class="line"> &#x27;460372577_f2f6a8c9fc.jpg&#x27;,</span><br><span class="line"> &#x27;460874319_0a45ab4d05.jpg&#x27;,</span><br><span class="line"> &#x27;466430434_4000737de9.jpg&#x27;,</span><br><span class="line"> &#x27;470127037_513711fd21.jpg&#x27;,</span><br><span class="line"> &#x27;474806473_ca6caab245.jpg&#x27;,</span><br><span class="line"> &#x27;475961153_b8c13fd405.jpg&#x27;,</span><br><span class="line"> &#x27;484293231_e53cfc0c89.jpg&#x27;,</span><br><span class="line"> &#x27;49375974_e28ba6f17e.jpg&#x27;,</span><br><span class="line"> &#x27;506249802_207cd979b4.jpg&#x27;,</span><br><span class="line"> &#x27;506249836_717b73f540.jpg&#x27;,</span><br><span class="line"> &#x27;512164029_c0a66b8498.jpg&#x27;,</span><br><span class="line"> &#x27;512863248_43c8ce579b.jpg&#x27;,</span><br><span class="line"> &#x27;518773929_734dbc5ff4.jpg&#x27;,</span><br><span class="line"> &#x27;522163566_fec115ca66.jpg&#x27;,</span><br><span class="line"> &#x27;522415432_2218f34bf8.jpg&#x27;,</span><br><span class="line"> &#x27;531979952_bde12b3bc0.jpg&#x27;,</span><br><span class="line"> &#x27;533848102_70a85ad6dd.jpg&#x27;,</span><br><span class="line"> &#x27;535522953_308353a07c.jpg&#x27;,</span><br><span class="line"> &#x27;540889389_48bb588b21.jpg&#x27;,</span><br><span class="line"> &#x27;541630764_dbd285d63c.jpg&#x27;,</span><br><span class="line"> &#x27;543417860_b14237f569.jpg&#x27;,</span><br><span class="line"> &#x27;560966032_988f4d7bc4.jpg&#x27;,</span><br><span class="line"> &#x27;5650366_e22b7e1065.jpg&#x27;,</span><br><span class="line"> &#x27;6240329_72c01e663e.jpg&#x27;,</span><br><span class="line"> &#x27;6240338_93729615ec.jpg&#x27;,</span><br><span class="line"> &#x27;649026570_e58656104b.jpg&#x27;,</span><br><span class="line"> &#x27;662541407_ff8db781e7.jpg&#x27;,</span><br><span class="line"> &#x27;67270775_e9fdf77e9d.jpg&#x27;,</span><br><span class="line"> &#x27;6743948_2b8c096dda.jpg&#x27;,</span><br><span class="line"> &#x27;684133190_35b62c0c1d.jpg&#x27;,</span><br><span class="line"> &#x27;69639610_95e0de17aa.jpg&#x27;,</span><br><span class="line"> &#x27;707895295_009cf23188.jpg&#x27;,</span><br><span class="line"> &#x27;7759525_1363d24e88.jpg&#x27;,</span><br><span class="line"> &#x27;795000156_a9900a4a71.jpg&#x27;,</span><br><span class="line"> &#x27;822537660_caf4ba5514.jpg&#x27;,</span><br><span class="line"> &#x27;82852639_52b7f7f5e3.jpg&#x27;,</span><br><span class="line"> &#x27;841049277_b28e58ad05.jpg&#x27;,</span><br><span class="line"> &#x27;886401651_f878e888cd.jpg&#x27;,</span><br><span class="line"> &#x27;892108839_f1aad4ca46.jpg&#x27;,</span><br><span class="line"> &#x27;938946700_ca1c669085.jpg&#x27;,</span><br><span class="line"> &#x27;957233405_25c1d1187b.jpg&#x27;,</span><br><span class="line"> &#x27;9715481_b3cb4114ff.jpg&#x27;,</span><br><span class="line"> &#x27;998118368_6ac1d91f81.jpg&#x27;,</span><br><span class="line"> &#x27;ant photos.jpg&#x27;,</span><br><span class="line"> &#x27;Ant_1.jpg&#x27;,</span><br><span class="line"> &#x27;army-ants-red-picture.jpg&#x27;,</span><br><span class="line"> &#x27;formica.jpeg&#x27;,</span><br><span class="line"> &#x27;hormiga_co_por.jpg&#x27;,</span><br><span class="line"> &#x27;imageNotFound.gif&#x27;,</span><br><span class="line"> &#x27;kurokusa.jpg&#x27;,</span><br><span class="line"> &#x27;MehdiabadiAnt2_600.jpg&#x27;,</span><br><span class="line"> &#x27;Nepenthes_rafflesiana_ant.jpg&#x27;,</span><br><span class="line"> &#x27;swiss-army-ant.jpg&#x27;,</span><br><span class="line"> &#x27;termite-vs-ant.jpg&#x27;,</span><br><span class="line"> &#x27;trap-jaw-ant-insect-bg.jpg&#x27;,</span><br><span class="line"> &#x27;VietnameseAntMimicSpider.jpg&#x27;]</span><br></pre></td></tr></table></figure><p>注意在windows下，路径使用双斜线\</p><h2 id="Dataset实操"><a href="#Dataset实操" class="headerlink" title="Dataset实操"></a>Dataset实操</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mydata</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,root_path,label_path</span>):</span><br><span class="line">        self.root_path = root_path  <span class="comment"># hymenoptera_data/hymenoptera_data/train</span></span><br><span class="line">        self.label_path = label_path  <span class="comment"># /ants</span></span><br><span class="line">        self.path = os.path.join(self.root_path,self.label_path)  <span class="comment"># 从根目录开始的绝对路径</span></span><br><span class="line">        self.image_path = os.listdir(self.path) <span class="comment"># 从根目录开始绝对路径文件夹下的对象 hymenoptera_data/hymenoptera_data/train/ants下的图片 type--&gt; list</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        image_name = self.image_path[idx] <span class="comment"># 单一的图片名称</span></span><br><span class="line">        image_item_path = os.path.join(self.root_path,self.label_path,image_name)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(image_item_path)</span><br><span class="line">        label = self.label_path</span><br><span class="line">        <span class="keyword">return</span> img,label</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.image_path)</span><br><span class="line"></span><br><span class="line">ants_root_path = <span class="string">&quot;hymenoptera_data\\hymenoptera_data\\train&quot;</span></span><br><span class="line">ants_label_path = <span class="string">&quot;ants&quot;</span></span><br><span class="line">Ants = Mydata(ants_root_path,ants_label_path)</span><br><span class="line">Ants[<span class="number">0</span>][<span class="number">0</span>].show() <span class="comment"># 第一个0是索引，拿到第一个图像和标签，第二个0是拿到第一个图像，并显示出来</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\anaconda\envs\Gpu-Pytorch\lib\site-packages\tqdm\auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html</span><br><span class="line">  from .autonotebook import tqdm as notebook_tqdm</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688024599649-be5c0241-4ba7-4e71-8544-0f1407dd6e9c.png#averageHue=%23e1e5da&from=url&id=jNmXo&originHeight=824&originWidth=1208&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bee_root_path = <span class="string">&quot;hymenoptera_data\\hymenoptera_data\\train&quot;</span></span><br><span class="line">bee_label_path = <span class="string">&quot;bees&quot;</span></span><br><span class="line">Bees = Mydata(bee_root_path,bee_label_path)</span><br><span class="line">Bees[<span class="number">0</span>][<span class="number">0</span>].show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688024599649-be5c0241-4ba7-4e71-8544-0f1407dd6e9c.png#averageHue=%23e1e5da&from=url&id=wiTcx&originHeight=824&originWidth=1208&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建训练集</span></span><br><span class="line"></span><br><span class="line">train = Ants + Bees   <span class="comment"># 直接将数据集加起来</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the length of Ants is &quot;</span>,Ants.__len__())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the length of Bees is &quot;</span>,Bees.__len__())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the length of train is &quot;</span>,train.__len__())</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">the length of Ants is  124</span><br><span class="line">the length of Bees is  121</span><br><span class="line">the length of train is  245</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否正确</span></span><br><span class="line">train[<span class="number">123</span>][<span class="number">0</span>].show() <span class="comment"># 应该为蚂蚁</span></span><br><span class="line">train[<span class="number">124</span>][<span class="number">0</span>].show() <span class="comment"># 应该为蜜蜂</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688024599649-be5c0241-4ba7-4e71-8544-0f1407dd6e9c.png#averageHue=%23e1e5da&from=url&id=gUmQj&originHeight=824&originWidth=1208&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688024599857-7554878b-c250-49f7-b9cd-7917140a1d45.png#averageHue=%23e0dacc&from=url&id=nHJ8C&originHeight=824&originWidth=1208&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="Dataset-实操二"><a href="#Dataset-实操二" class="headerlink" title="Dataset 实操二"></a>Dataset 实操二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch学习 </span></span><br><span class="line"><span class="string">@File    ：task_3.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/6/29 14:29 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mydata</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,root_path,image_path,label_path</span>):</span><br><span class="line">        self.root_path = root_path</span><br><span class="line">        self.image_path = image_path</span><br><span class="line">        self.label_path = label_path</span><br><span class="line">        self.A_image_path = os.path.join(self.root_path,self.image_path)</span><br><span class="line">        self.A_label_path = os.path.join(self.root_path,self.label_path)</span><br><span class="line">        self.img_item = os.listdir(self.A_image_path)</span><br><span class="line">        self.label_item = os.listdir(self.A_label_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_name = self.img_item[idx]</span><br><span class="line">        img_path = os.path.join(self.A_image_path, img_name)</span><br><span class="line">        label_list = [i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> self.label_item <span class="keyword">if</span> i.count(<span class="string">&quot;.&quot;</span>) == <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># print(label_list)</span></span><br><span class="line">        <span class="keyword">if</span> img_name.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] <span class="keyword">in</span> label_list:</span><br><span class="line">            img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">            label_path = os.path.join(self.A_label_path,img_name.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">            label_path += <span class="string">&quot;.txt&quot;</span></span><br><span class="line">            file = <span class="built_in">open</span>(label_path, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">            label = file.read()</span><br><span class="line">            file.close()</span><br><span class="line">            <span class="keyword">return</span> img,label</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;没有对应的标签&quot;</span>.<span class="built_in">format</span>(img_name))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_ants_root_path = <span class="string">&quot;练手数据集\\train&quot;</span></span><br><span class="line">train_ants_image_path = <span class="string">&quot;ants_image&quot;</span></span><br><span class="line">train_ants_label_path = <span class="string">&quot;ants_label&quot;</span></span><br><span class="line">Ants = Mydata(train_ants_root_path,train_ants_image_path,train_ants_label_path)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Ants.__len__()):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(Ants[i][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;跳过此张图片！&quot;</span>)</span><br><span class="line"><span class="comment"># Ants[122][0].show()</span></span><br><span class="line"><span class="comment"># print(Ants[122][1])</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">formica.jpeg没有对应的标签</span><br><span class="line">跳过此张图片！</span><br><span class="line">ants</span><br><span class="line">imageNotFound.gif没有对应的标签</span><br><span class="line">跳过此张图片！</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br><span class="line">ants</span><br></pre></td></tr></table></figure><p>添加了异常捕获，解决了图片没有对应标签的问题！</p><h2 id="dataset实操三"><a href="#dataset实操三" class="headerlink" title="dataset实操三"></a>dataset实操三</h2><p>使用torchvision中的数据集创建dataset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Project ：Pytorch_learn </span></span><br><span class="line"><span class="string">@File    ：dataset_3.py</span></span><br><span class="line"><span class="string">@IDE     ：PyCharm </span></span><br><span class="line"><span class="string">@Author  ：咋</span></span><br><span class="line"><span class="string">@Date    ：2023/7/2 14:58 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line">dataset = torchvision.datasets.MNIST(<span class="string">&quot;./Mnist&quot;</span>,train=<span class="literal">True</span>,download=<span class="literal">True</span>,transform=transforms.ToTensor())</span><br><span class="line">dataloader = DataLoader(dataset,batch_size=<span class="number">64</span>,shuffle=<span class="literal">False</span>,num_workers=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用tensorboard将dataloader展示出来</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;方式一</span></span><br><span class="line"><span class="string"># write = SummaryWriter(&quot;log_2&quot;)</span></span><br><span class="line"><span class="string"># count = 0</span></span><br><span class="line"><span class="string"># for data in dataloader:</span></span><br><span class="line"><span class="string">#     image,label = data</span></span><br><span class="line"><span class="string">#     # print(data[1])</span></span><br><span class="line"><span class="string">#     # print(image.shape)</span></span><br><span class="line"><span class="string">#     write.add_images(&quot;dataloader&quot;,image,count)</span></span><br><span class="line"><span class="string">#     count += 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;log_3&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">    image,label = data</span><br><span class="line">    write.add_images(<span class="string">&quot;dataloader&quot;</span>,image,i)</span><br><span class="line"></span><br><span class="line">write.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34335114/1688285573130-852a3bbe-242c-4b1f-9789-d2a3d3ae7ce9.png#averageHue=%23f58716&clientId=u0bbfe70d-00dd-4&from=paste&height=406&id=u28018417&originHeight=619&originWidth=653&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=47094&status=done&style=none&taskId=u2955b002-f252-4ee0-9984-5ec65a450af&title=&width=428.63589743589745" alt="image.png"><br>enumerate会将可迭代对象中的内容和其索引一起返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如对于一个seq，得到：</span><br><span class="line">(<span class="number">0</span>, seq[<span class="number">0</span>]), (<span class="number">1</span>, seq[<span class="number">1</span>]), (<span class="number">2</span>, seq[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h1 id="datalodar"><a href="#datalodar" class="headerlink" title="datalodar"></a>datalodar</h1><p>为后面的网络提供不同的数据类型</p><h1 id="自定义dataset并用datalodar加载"><a href="#自定义dataset并用datalodar加载" class="headerlink" title="自定义dataset并用datalodar加载"></a>自定义dataset并用datalodar加载</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> net <span class="keyword">import</span> Net</span><br><span class="line"><span class="keyword">import</span> softmax</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transform_tool = transforms.ToTensor()  <span class="comment"># 创建一个transform工具</span></span><br><span class="line"><span class="comment"># # image_tensor = transform_tool(image)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;mnist-label.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    label_str = f.read().strip()   <span class="comment"># 打开文件读入缓存</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mydata</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,image_path</span>):</span><br><span class="line">        self.image_path = image_path</span><br><span class="line">        <span class="comment"># self.label_path = label_path  # /ants</span></span><br><span class="line">        self.image = os.listdir(self.image_path) <span class="comment"># 从根目录开始绝对路径文件夹下的对象 hymenoptera_data/hymenoptera_data/train/ants下的图片 type--&gt; list</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        image_name = self.image[idx] <span class="comment"># 单一的图片名称</span></span><br><span class="line">        image_item_path = os.path.join(self.image_path,image_name)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(image_item_path)</span><br><span class="line">        <span class="comment"># transform_tool = transforms.ToTensor()  # 创建一个transform工具</span></span><br><span class="line">        img = transform_tool(img)</span><br><span class="line">        labels_list = [<span class="built_in">int</span>(label) <span class="keyword">for</span> label <span class="keyword">in</span> label_str.split(<span class="string">&#x27;,&#x27;</span>)]  <span class="comment"># 读取标签，不用每次都打开</span></span><br><span class="line">        labels = np.array(labels_list)</span><br><span class="line">        label = labels[idx]</span><br><span class="line">        <span class="keyword">return</span> img,label</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.image)</span><br><span class="line"><span class="comment"># trainset = Mydata(&quot;mnist-dataset&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练参数</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">epochs = <span class="number">5</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="comment"># 数据集</span></span><br><span class="line"><span class="comment"># transform = transforms.Compose([transforms.ToTensor(),</span></span><br><span class="line"><span class="comment">#                                 transforms.Normalize((0.5,), (0.5,))])</span></span><br><span class="line"><span class="comment"># trainset =</span></span><br><span class="line"><span class="comment"># trainset = datasets.MNIST(&#x27;~/.pytorch/MNIST_data/&#x27;, download=True, train=True, transform=transform)</span></span><br><span class="line">trainset = Mydata(<span class="string">&quot;mnist-dataset&quot;</span>)</span><br><span class="line"></span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=<span class="literal">False</span>,num_workers=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(trainloader))</span><br><span class="line"><span class="comment"># 输出提示信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;batch_size:&quot;</span>, batch_size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data_batches:&quot;</span>, <span class="built_in">len</span>(trainloader))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;epochs:&quot;</span>, epochs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络</span></span><br><span class="line">net = Net().to(device)</span><br><span class="line"><span class="comment"># net.load_state_dict(torch.load(&#x27;./model/model.pth&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数和优化器</span></span><br><span class="line"><span class="comment"># 负对数似然损失</span></span><br><span class="line">criterion = nn.NLLLoss()</span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.0005</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line">total_correct = <span class="number">0</span></span><br><span class="line">total_samples = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练网络</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(trainloader):</span><br><span class="line">        inputs, labels = data</span><br><span class="line">        inputs, labels = Variable(inputs).to(device), Variable(labels).to(device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播优化参数</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        outputs = net(inputs)</span><br><span class="line">        <span class="comment"># outputs = int(net(inputs))</span></span><br><span class="line">        <span class="comment"># print(outputs)</span></span><br><span class="line">        labels = labels.long()</span><br><span class="line">        <span class="comment"># print(labels)</span></span><br><span class="line">        <span class="comment"># print(type(labels))</span></span><br><span class="line">        loss = criterion(outputs, labels)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        running_loss += loss.item()</span><br><span class="line">        <span class="comment"># 计算每个batch的准确率</span></span><br><span class="line">        _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">        total_samples += labels.size(<span class="number">0</span>)</span><br><span class="line">        total_correct += (predicted == labels).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">5</span> == <span class="number">0</span>:    <span class="comment"># 每轮输出损失值</span></span><br><span class="line">            accuracy = <span class="number">100.0</span> * total_correct / total_samples</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[epoch: %d, batches: %d] loss: %.5f accuracy: %.2f%%&#x27;</span> %</span><br><span class="line">                  (epoch + <span class="number">1</span>, i + <span class="number">1</span>, running_loss / <span class="number">2000</span>, accuracy))</span><br><span class="line">            total_correct = <span class="number">0</span></span><br><span class="line">            total_samples = <span class="number">0</span></span><br><span class="line">            running_loss = <span class="number">0.0</span></span><br><span class="line">torch.save(net.state_dict(), <span class="string">&#x27;model.pth&#x27;</span>)  <span class="comment"># 每轮保存模型参数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Finished Training&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开文件可以在定义类之前打开，把文件信息读入缓存中，在__getitem__中读取各个标签，不用每次执行__getitem__都打开一次文件。</p><h1 id="os的一些操作"><a href="#os的一些操作" class="headerlink" title="os的一些操作"></a>os的一些操作</h1><p>windows使用两个\表示路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">dir_path = <span class="string">&quot;/home/aistudio&quot;</span>  <span class="comment"># 文件夹目录</span></span><br><span class="line">data_dir = os.listdir(dir_path)  <span class="comment"># 获取文件夹目录中的对象</span></span><br><span class="line">label_path = <span class="string">&quot;label&quot;</span></span><br><span class="line">all_path = os.path.join(dir_path,label_path)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.dir与help函数</title>
      <link href="/2023/08/20/2-dir%E4%B8%8Ehelp%E5%87%BD%E6%95%B0/"/>
      <url>/2023/08/20/2-dir%E4%B8%8Ehelp%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="dir函数"><a href="#dir函数" class="headerlink" title="dir函数"></a>dir函数</h1><p>查看一个大类里面有什么小类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">print(dir(torch.cuda))</span><br><span class="line"></span><br><span class="line"># return</span><br><span class="line">[&#x27;Any&#x27;, &#x27;BFloat16Storage&#x27;, &#x27;BFloat16Tensor&#x27;, &#x27;BoolStorage&#x27;, &#x27;BoolTensor&#x27;, &#x27;ByteStorage&#x27;, &#x27;ByteTensor&#x27;, &#x27;CUDAGraph&#x27;, &#x27;CharStorage&#x27;, &#x27;CharTensor&#x27;, &#x27;ComplexDoubleStorage&#x27;, &#x27;ComplexFloatStorage&#x27;, &#x27;CudaError&#x27;, &#x27;DeferredCudaCallError&#x27;, &#x27;Device&#x27;, &#x27;Dict&#x27;, &#x27;DoubleStorage&#x27;, &#x27;DoubleTensor&#x27;, &#x27;Event&#x27;, &#x27;FloatStorage&#x27;, &#x27;FloatTensor&#x27;, &#x27;HalfStorage&#x27;, &#x27;HalfTensor&#x27;, &#x27;IntStorage&#x27;, &#x27;IntTensor&#x27;, &#x27;List&#x27;, &#x27;LongStorage&#x27;, &#x27;LongTensor&#x27;, &#x27;Optional&#x27;, &#x27;ShortStorage&#x27;, &#x27;ShortTensor&#x27;, &#x27;Stream&#x27;, &#x27;StreamContext&#x27;, &#x27;Tuple&#x27;, &#x27;Union&#x27;, &#x27;_CudaBase&#x27;, &#x27;_CudaDeviceProperties&#x27;, &#x27;_LazySeedTracker&#x27;, &#x27;_StorageBase&#x27;, &#x27;__annotations__&#x27;, &#x27;__builtins__&#x27;, &#x27;__cached__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__path__&#x27;, &#x27;__spec__&#x27;, &#x27;_check_capability&#x27;, &#x27;_check_cubins&#x27;, &#x27;_cudart&#x27;, &#x27;_device&#x27;, &#x27;_device_t&#x27;, &#x27;_dummy_type&#x27;, &#x27;_get_device_index&#x27;, &#x27;_initialization_lock&#x27;, &#x27;_initialized&#x27;, &#x27;_is_in_bad_fork&#x27;, &#x27;_lazy_call&#x27;, &#x27;_lazy_init&#x27;, &#x27;_lazy_new&#x27;, &#x27;_lazy_seed_tracker&#x27;, &#x27;_queued_calls&#x27;, &#x27;_sleep&#x27;, &#x27;_tls&#x27;, &#x27;_utils&#x27;, &#x27;amp&#x27;, &#x27;caching_allocator_alloc&#x27;, &#x27;caching_allocator_delete&#x27;, &#x27;can_device_access_peer&#x27;, &#x27;check_error&#x27;, &#x27;collections&#x27;, &#x27;contextlib&#x27;, &#x27;cudaStatus&#x27;, &#x27;cudart&#x27;, &#x27;current_blas_handle&#x27;, &#x27;current_device&#x27;, &#x27;current_stream&#x27;, &#x27;default_generators&#x27;, &#x27;default_stream&#x27;, &#x27;device&#x27;, &#x27;device_count&#x27;, &#x27;device_of&#x27;, &#x27;empty_cache&#x27;, &#x27;get_arch_list&#x27;, &#x27;get_device_capability&#x27;, &#x27;get_device_name&#x27;, &#x27;get_device_properties&#x27;, &#x27;get_gencode_flags&#x27;, &#x27;get_rng_state&#x27;, &#x27;get_rng_state_all&#x27;, &#x27;get_sync_debug_mode&#x27;, &#x27;graph&#x27;, &#x27;graph_pool_handle&#x27;, &#x27;graphs&#x27;, &#x27;has_half&#x27;, &#x27;has_magma&#x27;, &#x27;init&#x27;, &#x27;initial_seed&#x27;, &#x27;ipc_collect&#x27;, &#x27;is_available&#x27;, &#x27;is_bf16_supported&#x27;, &#x27;is_initialized&#x27;, &#x27;list_gpu_processes&#x27;, &#x27;make_graphed_callables&#x27;, &#x27;manual_seed&#x27;, &#x27;manual_seed_all&#x27;, &#x27;max_memory_allocated&#x27;, &#x27;max_memory_cached&#x27;, &#x27;max_memory_reserved&#x27;, &#x27;mem_get_info&#x27;, &#x27;memory&#x27;, &#x27;memory_allocated&#x27;, &#x27;memory_cached&#x27;, &#x27;memory_reserved&#x27;, &#x27;memory_snapshot&#x27;, &#x27;memory_stats&#x27;, &#x27;memory_stats_as_nested_dict&#x27;, &#x27;memory_summary&#x27;, &#x27;nccl&#x27;, &#x27;nvtx&#x27;, &#x27;os&#x27;, &#x27;profiler&#x27;, &#x27;random&#x27;, &#x27;reset_accumulated_memory_stats&#x27;, &#x27;reset_max_memory_allocated&#x27;, &#x27;reset_max_memory_cached&#x27;, &#x27;reset_peak_memory_stats&#x27;, &#x27;seed&#x27;, &#x27;seed_all&#x27;, &#x27;set_device&#x27;, &#x27;set_per_process_memory_fraction&#x27;, &#x27;set_rng_state&#x27;, &#x27;set_rng_state_all&#x27;, &#x27;set_stream&#x27;, &#x27;set_sync_debug_mode&#x27;, &#x27;sparse&#x27;, &#x27;stream&#x27;, &#x27;streams&#x27;, &#x27;synchronize&#x27;, &#x27;threading&#x27;, &#x27;torch&#x27;, &#x27;traceback&#x27;, &#x27;warnings&#x27;]</span><br><span class="line"># 如果出现__xx__说明这个函数已经分到底了，无法再继续细分，这里面双下划线其实是这个函数的变量，无法修改</span><br></pre></td></tr></table></figure><h1 id="help"><a href="#help" class="headerlink" title="help"></a>help</h1><p>查看函数什么作用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># print(dir(torch.cuda))</span></span><br><span class="line"><span class="built_in">help</span>(torch.cuda.is_available)  <span class="comment"># 记得去掉括号</span></span><br><span class="line"><span class="comment"># return</span></span><br><span class="line">is_available() -&gt; <span class="built_in">bool</span></span><br><span class="line">    Returns a <span class="built_in">bool</span> indicating <span class="keyword">if</span> CUDA <span class="keyword">is</span> currently available.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.准备工作</title>
      <link href="/2023/08/20/1-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
      <url>/2023/08/20/1-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="查看显卡信息"><a href="#查看显卡信息" class="headerlink" title="查看显卡信息"></a>查看显卡信息</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><meta name="referrer" content="no-referrer" /><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80d9892cc5464626aa43ccedb52ffd21~tplv-k3u1fbpfcp-zoom-1.image"></p><h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda create -n Pytorch python=3.8</span><br><span class="line">conda activate Pytorch</span><br><span class="line">pip list # 查看当前虚拟环境中的包</span><br><span class="line">conda env list # 查看虚拟环境有哪些</span><br><span class="line">where  python # 查看python解释器在哪里</span><br></pre></td></tr></table></figure><h1 id="将jupyter与创建的虚拟环境关联"><a href="#将jupyter与创建的虚拟环境关联" class="headerlink" title="将jupyter与创建的虚拟环境关联"></a>将jupyter与创建的虚拟环境关联</h1><ul><li>在base环境下安装Pytorch（不推荐）</li><li>在创建好的虚拟环境中安装jupyter</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda activate pytorch</span><br><span class="line">pip install nb_conda </span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><h1 id="查看pytorch是否可用"><a href="#查看pytorch是否可用" class="headerlink" title="查看pytorch是否可用"></a>查看pytorch是否可用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">print(torch.cuda.is_available())</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d52df311f0040b4b511d1343408f456~tplv-k3u1fbpfcp-zoom-1.image"></p>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
